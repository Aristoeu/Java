package graphs;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest7 {

    public static boolean debug = false;

    @Test
    public void test3501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3501");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean5 = hamiltonianCycle3.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle6 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[] intArray12 = new int[] { (short) -1, (short) 0 };
        int[][] intArray13 = new int[][] { intArray9, intArray12 };
        int[] intArray14 = hamiltonianCycle6.findHamiltonianCycle(intArray13);
        boolean boolean16 = hamiltonianCycle6.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray36 = new int[][] { intArray31, intArray35 };
        int[] intArray37 = hamiltonianCycle17.findHamiltonianCycle(intArray36);
        int[] intArray38 = hamiltonianCycle6.findHamiltonianCycle(intArray36);
        int[] intArray39 = hamiltonianCycle3.findHamiltonianCycle(intArray36);
        int[] intArray40 = hamiltonianCycle0.findHamiltonianCycle(intArray36);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
    }

    @Test
    public void test3502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3502");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean26 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3503");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle23.isPathFound((int) (short) 0);
        boolean boolean47 = hamiltonianCycle23.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray68 = new int[][] { intArray63, intArray67 };
        int[] intArray69 = hamiltonianCycle49.findHamiltonianCycle(intArray68);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle49.findHamiltonianCycle(intArray77);
        int[] intArray80 = hamiltonianCycle48.findHamiltonianCycle(intArray77);
        int[] intArray81 = hamiltonianCycle23.findHamiltonianCycle(intArray77);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray77);
        java.lang.Class<?> wildcardClass83 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test3504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3504");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test3505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3505");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean78 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass79 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test3506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3506");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        boolean boolean53 = hamiltonianCycle19.isPathFound(0);
        boolean boolean55 = hamiltonianCycle19.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle19.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray63);
        boolean boolean68 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) '#');
        int[][] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test3507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3507");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3508");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean58 = hamiltonianCycle0.isPresent(10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent(0);
        boolean boolean71 = hamiltonianCycle59.isPresent(100);
        boolean boolean73 = hamiltonianCycle59.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle74 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[][] intArray81 = new int[][] { intArray77, intArray80 };
        int[] intArray82 = hamiltonianCycle74.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle59.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
    }

    @Test
    public void test3509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3509");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass53 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test3510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3510");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent(0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean60 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test3511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3511");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test3512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3512");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle37.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean96 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test3513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3513");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3514");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test3515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3515");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean42 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass43 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test3516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3516");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        boolean boolean15 = hamiltonianCycle5.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle16 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[][] intArray23 = new int[][] { intArray19, intArray22 };
        int[] intArray24 = hamiltonianCycle16.findHamiltonianCycle(intArray23);
        boolean boolean26 = hamiltonianCycle16.isPresent(0);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray35 = new int[][] { intArray30, intArray34 };
        int[] intArray36 = hamiltonianCycle16.findHamiltonianCycle(intArray35);
        int[] intArray37 = hamiltonianCycle5.findHamiltonianCycle(intArray35);
        boolean boolean39 = hamiltonianCycle5.isPathFound(0);
        boolean boolean41 = hamiltonianCycle5.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle5.findHamiltonianCycle(intArray49);
        boolean boolean53 = hamiltonianCycle5.isPresent((int) ' ');
        boolean boolean55 = hamiltonianCycle5.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        boolean boolean68 = hamiltonianCycle56.isPresent(100);
        boolean boolean70 = hamiltonianCycle56.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        boolean boolean81 = hamiltonianCycle71.isPresent(0);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray90 = new int[][] { intArray85, intArray89 };
        int[] intArray91 = hamiltonianCycle71.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle56.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle5.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test3517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3517");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3518");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test3519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3519");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean32 = hamiltonianCycle0.isPathFound(0);
        boolean boolean34 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test3520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3520");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean30 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean32 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test3521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3521");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        int[] intArray22 = hamiltonianCycle0.findHamiltonianCycle(intArray20);
        java.lang.Class<?> wildcardClass23 = intArray22.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test3522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3522");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle15.findHamiltonianCycle(intArray43);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray43);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test3523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3523");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test3524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3524");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        boolean boolean25 = hamiltonianCycle13.isPresent(100);
        boolean boolean27 = hamiltonianCycle13.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray58 = new int[][] { intArray53, intArray57 };
        int[] intArray59 = hamiltonianCycle39.findHamiltonianCycle(intArray58);
        int[] intArray60 = hamiltonianCycle28.findHamiltonianCycle(intArray58);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray58);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray58);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test3525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3525");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean30 = hamiltonianCycle0.isPresent(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test3526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3526");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        boolean boolean27 = hamiltonianCycle15.isPresent(100);
        boolean boolean29 = hamiltonianCycle15.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle15.findHamiltonianCycle(intArray49);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray49);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test3527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3527");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        java.lang.Class<?> wildcardClass23 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test3528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3528");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent(10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        boolean boolean74 = hamiltonianCycle64.isPresent(0);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray83 = new int[][] { intArray78, intArray82 };
        int[] intArray84 = hamiltonianCycle64.findHamiltonianCycle(intArray83);
        int[] intArray85 = hamiltonianCycle53.findHamiltonianCycle(intArray83);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray83);
        boolean boolean88 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test3529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3529");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test3530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3530");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray36 = new int[][] { intArray31, intArray35 };
        int[] intArray37 = hamiltonianCycle17.findHamiltonianCycle(intArray36);
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray36);
        boolean boolean40 = hamiltonianCycle0.isPresent(0);
        boolean boolean42 = hamiltonianCycle0.isPathFound(0);
        boolean boolean44 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test3531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3531");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent(0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean58 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test3532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3532");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        boolean boolean49 = hamiltonianCycle37.isPresent(100);
        boolean boolean51 = hamiltonianCycle37.isPathFound(0);
        boolean boolean53 = hamiltonianCycle37.isPresent(0);
        boolean boolean55 = hamiltonianCycle37.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle67 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[][] intArray74 = new int[][] { intArray70, intArray73 };
        int[] intArray75 = hamiltonianCycle67.findHamiltonianCycle(intArray74);
        boolean boolean77 = hamiltonianCycle67.isPresent(0);
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray86 = new int[][] { intArray81, intArray85 };
        int[] intArray87 = hamiltonianCycle67.findHamiltonianCycle(intArray86);
        int[] intArray88 = hamiltonianCycle56.findHamiltonianCycle(intArray86);
        int[] intArray89 = hamiltonianCycle37.findHamiltonianCycle(intArray86);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray86);
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test3533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3533");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test3534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3534");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3535");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        boolean boolean51 = hamiltonianCycle17.isPresent((int) (byte) 1);
        boolean boolean53 = hamiltonianCycle17.isPathFound(0);
        boolean boolean55 = hamiltonianCycle17.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        boolean boolean68 = hamiltonianCycle56.isPresent(100);
        boolean boolean70 = hamiltonianCycle56.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle56.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle17.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
    }

    @Test
    public void test3536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3536");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean74 = hamiltonianCycle0.isPresent(10);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '4');
        java.lang.Class<?> wildcardClass77 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test3537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3537");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 0);
        int[][] intArray65 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test3538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3538");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3539");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test3540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3540");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(100);
        boolean boolean12 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3541");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent((int) (byte) 10);
        boolean boolean65 = hamiltonianCycle53.isPresent((int) '4');
        boolean boolean67 = hamiltonianCycle53.isPresent((int) (byte) 0);
        boolean boolean69 = hamiltonianCycle53.isPathFound(1);
        boolean boolean71 = hamiltonianCycle53.isPresent((int) '#');
        boolean boolean73 = hamiltonianCycle53.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle74 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[][] intArray81 = new int[][] { intArray77, intArray80 };
        int[] intArray82 = hamiltonianCycle74.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle53.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test3542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3542");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean70 = hamiltonianCycle0.isPresent(0);
        boolean boolean72 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test3543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3543");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3544");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3545");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent(1);
        boolean boolean78 = hamiltonianCycle0.isPresent(0);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test3546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3546");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test3547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3547");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test3548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3548");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray58 = new int[][] { intArray53, intArray57 };
        int[] intArray59 = hamiltonianCycle39.findHamiltonianCycle(intArray58);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        boolean boolean81 = hamiltonianCycle71.isPresent(0);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray90 = new int[][] { intArray85, intArray89 };
        int[] intArray91 = hamiltonianCycle71.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle60.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle39.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
    }

    @Test
    public void test3549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3549");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test3550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3550");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean27 = hamiltonianCycle25.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) (short) 10);
        int[] intArray46 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray52 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray58 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray64 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray65 = new int[][] { intArray46, intArray52, intArray58, intArray64 };
        int[] intArray66 = hamiltonianCycle28.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle25.findHamiltonianCycle(intArray65);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray65);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean72 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass73 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test3551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3551");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean68 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test3552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3552");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean78 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test3553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3553");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        boolean boolean35 = hamiltonianCycle21.isPathFound(0);
        boolean boolean37 = hamiltonianCycle21.isPresent((int) (byte) 1);
        boolean boolean39 = hamiltonianCycle21.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        boolean boolean52 = hamiltonianCycle40.isPresent(100);
        boolean boolean54 = hamiltonianCycle40.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        int[] intArray64 = hamiltonianCycle40.findHamiltonianCycle(intArray62);
        int[] intArray65 = hamiltonianCycle21.findHamiltonianCycle(intArray62);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray62);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
    }

    @Test
    public void test3554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3554");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test3555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3555");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle23.isPresent((int) (byte) 1);
        boolean boolean47 = hamiltonianCycle23.isPresent((int) (short) 10);
        boolean boolean49 = hamiltonianCycle23.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean52 = hamiltonianCycle50.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        boolean boolean65 = hamiltonianCycle53.isPresent((int) (short) 10);
        int[] intArray71 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray77 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray83 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray89 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray90 = new int[][] { intArray71, intArray77, intArray83, intArray89 };
        int[] intArray91 = hamiltonianCycle53.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle50.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle23.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        boolean boolean96 = hamiltonianCycle0.isPresent(100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test3556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3556");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean28 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3557");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) ' ');
        int[][] intArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray18 = hamiltonianCycle0.findHamiltonianCycle(intArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3558");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent(100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3559");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test3560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3560");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean6 = hamiltonianCycle0.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle7 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray10 = new int[] { (short) -1, (short) 0 };
        int[] intArray13 = new int[] { (short) -1, (short) 0 };
        int[][] intArray14 = new int[][] { intArray10, intArray13 };
        int[] intArray15 = hamiltonianCycle7.findHamiltonianCycle(intArray14);
        boolean boolean17 = hamiltonianCycle7.isPresent((int) (byte) 10);
        boolean boolean19 = hamiltonianCycle7.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle20 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[][] intArray27 = new int[][] { intArray23, intArray26 };
        int[] intArray28 = hamiltonianCycle20.findHamiltonianCycle(intArray27);
        int[] intArray29 = hamiltonianCycle7.findHamiltonianCycle(intArray27);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray27);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test3561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3561");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray57);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
    }

    @Test
    public void test3562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3562");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        boolean boolean27 = hamiltonianCycle15.isPresent((int) '4');
        boolean boolean29 = hamiltonianCycle15.isPresent((int) (short) 100);
        boolean boolean31 = hamiltonianCycle15.isPresent((int) (byte) 100);
        boolean boolean33 = hamiltonianCycle15.isPresent((int) '#');
        boolean boolean35 = hamiltonianCycle15.isPresent((int) (byte) 0);
        boolean boolean37 = hamiltonianCycle15.isPresent(10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent((int) (byte) 10);
        boolean boolean50 = hamiltonianCycle38.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        int[] intArray60 = hamiltonianCycle38.findHamiltonianCycle(intArray58);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray58);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray58);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
    }

    @Test
    public void test3563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3563");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent((int) (byte) 10);
        boolean boolean47 = hamiltonianCycle35.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent((int) (byte) 10);
        boolean boolean60 = hamiltonianCycle48.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle48.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle35.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        boolean boolean96 = hamiltonianCycle0.isPresent((-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test3564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3564");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle23.isPathFound((int) (short) 0);
        boolean boolean47 = hamiltonianCycle23.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray68 = new int[][] { intArray63, intArray67 };
        int[] intArray69 = hamiltonianCycle49.findHamiltonianCycle(intArray68);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle49.findHamiltonianCycle(intArray77);
        int[] intArray80 = hamiltonianCycle48.findHamiltonianCycle(intArray77);
        int[] intArray81 = hamiltonianCycle23.findHamiltonianCycle(intArray77);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray77);
        boolean boolean84 = hamiltonianCycle0.isPathFound(0);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test3565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3565");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray34);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean41 = hamiltonianCycle39.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPresent((int) (short) 10);
        int[] intArray60 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray66 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray72 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray78 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray79 = new int[][] { intArray60, intArray66, intArray72, intArray78 };
        int[] intArray80 = hamiltonianCycle42.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle39.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1, -1, -1]");
    }

    @Test
    public void test3566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3566");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent(0);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test3567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3567");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean62 = hamiltonianCycle0.isPathFound(0);
        boolean boolean64 = hamiltonianCycle0.isPathFound(1);
        boolean boolean66 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass67 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test3568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3568");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) '4');
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 0);
        boolean boolean35 = hamiltonianCycle19.isPathFound(1);
        boolean boolean37 = hamiltonianCycle19.isPresent((int) '#');
        boolean boolean39 = hamiltonianCycle19.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean42 = hamiltonianCycle40.isPresent((int) (short) -1);
        boolean boolean44 = hamiltonianCycle40.isPresent((int) (short) 0);
        boolean boolean46 = hamiltonianCycle40.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent((int) (byte) 10);
        boolean boolean59 = hamiltonianCycle47.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        int[] intArray69 = hamiltonianCycle47.findHamiltonianCycle(intArray67);
        int[] intArray70 = hamiltonianCycle40.findHamiltonianCycle(intArray67);
        int[] intArray71 = hamiltonianCycle19.findHamiltonianCycle(intArray67);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray67);
        boolean boolean74 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass75 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test3569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3569");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean22 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3570");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        boolean boolean40 = hamiltonianCycle0.isPathFound(0);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) '4');
        java.lang.Class<?> wildcardClass43 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test3571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3571");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean82 = hamiltonianCycle0.isPresent(0);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean88 = hamiltonianCycle0.isPresent(100);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3572");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent(10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean33 = hamiltonianCycle21.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        boolean boolean46 = hamiltonianCycle34.isPresent((int) '4');
        boolean boolean48 = hamiltonianCycle34.isPresent((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle34.isPathFound(1);
        boolean boolean52 = hamiltonianCycle34.isPresent(100);
        boolean boolean54 = hamiltonianCycle34.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray75 = new int[][] { intArray70, intArray74 };
        int[] intArray76 = hamiltonianCycle56.findHamiltonianCycle(intArray75);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle77 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[][] intArray84 = new int[][] { intArray80, intArray83 };
        int[] intArray85 = hamiltonianCycle77.findHamiltonianCycle(intArray84);
        int[] intArray86 = hamiltonianCycle56.findHamiltonianCycle(intArray84);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray84);
        int[] intArray88 = hamiltonianCycle34.findHamiltonianCycle(intArray84);
        int[] intArray89 = hamiltonianCycle21.findHamiltonianCycle(intArray84);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray84);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3573");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        java.lang.Class<?> wildcardClass33 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test3574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3574");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean40 = hamiltonianCycle0.isPathFound(0);
        boolean boolean42 = hamiltonianCycle0.isPresent((-1));
        boolean boolean44 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test3575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3575");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(100);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent((-1));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test3576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3576");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3577");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass45 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test3578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3578");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test3579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3579");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean4 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean16 = hamiltonianCycle14.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle14.findHamiltonianCycle(intArray47);
        int[] intArray51 = hamiltonianCycle5.findHamiltonianCycle(intArray47);
        boolean boolean53 = hamiltonianCycle5.isPathFound((int) (byte) 0);
        boolean boolean55 = hamiltonianCycle5.isPresent(0);
        boolean boolean57 = hamiltonianCycle5.isPresent(10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle5.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
    }

    @Test
    public void test3580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3580");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle20 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray40 = new int[][] { intArray35, intArray39 };
        int[] intArray41 = hamiltonianCycle21.findHamiltonianCycle(intArray40);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle21.findHamiltonianCycle(intArray49);
        int[] intArray52 = hamiltonianCycle20.findHamiltonianCycle(intArray49);
        int[] intArray53 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        int[] intArray54 = hamiltonianCycle0.findHamiltonianCycle(intArray49);
        boolean boolean56 = hamiltonianCycle0.isPresent(1);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '4');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test3581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3581");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean26 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3582");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean20 = hamiltonianCycle0.isPresent(10);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3583");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean26 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3584");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) '4');
        boolean boolean33 = hamiltonianCycle19.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean45 = hamiltonianCycle43.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle43.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray76);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray76);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean88 = hamiltonianCycle0.isPresent(100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test3585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3585");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        boolean boolean51 = hamiltonianCycle39.isPresent(100);
        boolean boolean53 = hamiltonianCycle39.isPresent((int) (short) 1);
        boolean boolean55 = hamiltonianCycle39.isPresent((int) (byte) 0);
        boolean boolean57 = hamiltonianCycle39.isPresent((int) (byte) 10);
        boolean boolean59 = hamiltonianCycle39.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent((int) (byte) 10);
        boolean boolean72 = hamiltonianCycle60.isPresent((int) '4');
        boolean boolean74 = hamiltonianCycle60.isPresent((int) (byte) 0);
        boolean boolean76 = hamiltonianCycle60.isPathFound(1);
        boolean boolean78 = hamiltonianCycle60.isPresent((int) '#');
        boolean boolean80 = hamiltonianCycle60.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle81 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray84 = new int[] { (short) -1, (short) 0 };
        int[] intArray87 = new int[] { (short) -1, (short) 0 };
        int[][] intArray88 = new int[][] { intArray84, intArray87 };
        int[] intArray89 = hamiltonianCycle81.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle60.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle39.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test3586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3586");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPresent((-1));
        boolean boolean46 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test3587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3587");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPresent(0);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) '4');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test3588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3588");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean46 = hamiltonianCycle0.isPresent(100);
        boolean boolean48 = hamiltonianCycle0.isPresent((-1));
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test3589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3589");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean52 = hamiltonianCycle50.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        boolean boolean74 = hamiltonianCycle64.isPresent(0);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray83 = new int[][] { intArray78, intArray82 };
        int[] intArray84 = hamiltonianCycle64.findHamiltonianCycle(intArray83);
        int[] intArray85 = hamiltonianCycle53.findHamiltonianCycle(intArray83);
        int[] intArray86 = hamiltonianCycle50.findHamiltonianCycle(intArray83);
        int[] intArray87 = hamiltonianCycle17.findHamiltonianCycle(intArray83);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray83);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3590");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) (byte) 100);
        java.lang.Class<?> wildcardClass73 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test3591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3591");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent(1);
        boolean boolean78 = hamiltonianCycle0.isPresent(0);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean86 = hamiltonianCycle0.isPathFound(1);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean90 = hamiltonianCycle0.isPresent(100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3592");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean52 = hamiltonianCycle0.isPresent(10);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test3593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3593");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(100);
        boolean boolean52 = hamiltonianCycle0.isPresent(0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test3594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3594");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        boolean boolean61 = hamiltonianCycle27.isPathFound(0);
        boolean boolean63 = hamiltonianCycle27.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        int[] intArray73 = hamiltonianCycle27.findHamiltonianCycle(intArray71);
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray71);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean78 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test3595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3595");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test3596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3596");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3597");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(1);
        boolean boolean52 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test3598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3598");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3599");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean26 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3600");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent(0);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray33 = new int[][] { intArray28, intArray32 };
        int[] intArray34 = hamiltonianCycle14.findHamiltonianCycle(intArray33);
        int[] intArray35 = hamiltonianCycle3.findHamiltonianCycle(intArray33);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray33);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean42 = hamiltonianCycle0.isPathFound(1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test3601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3601");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent(1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass17 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3602");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound(0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test3603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3603");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3604");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent(1);
        boolean boolean88 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test3605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3605");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3606");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound(0);
        boolean boolean72 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean74 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass75 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test3607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3607");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean36 = hamiltonianCycle0.isPresent(10);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test3608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3608");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test3609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3609");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean62 = hamiltonianCycle0.isPathFound(0);
        boolean boolean64 = hamiltonianCycle0.isPathFound(1);
        boolean boolean66 = hamiltonianCycle0.isPresent(10);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test3610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3610");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean50 = hamiltonianCycle0.isPresent(1);
        boolean boolean52 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test3611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3611");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle15.findHamiltonianCycle(intArray43);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean58 = hamiltonianCycle56.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle56.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle47.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
    }

    @Test
    public void test3612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3612");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test3613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3613");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3614");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test3615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3615");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        boolean boolean27 = hamiltonianCycle15.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        int[] intArray58 = hamiltonianCycle28.findHamiltonianCycle(intArray56);
        int[] intArray59 = hamiltonianCycle15.findHamiltonianCycle(intArray56);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray56);
        java.lang.Class<?> wildcardClass61 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test3616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3616");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean34 = hamiltonianCycle32.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent(0);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray65 = new int[][] { intArray60, intArray64 };
        int[] intArray66 = hamiltonianCycle46.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle35.findHamiltonianCycle(intArray65);
        int[] intArray68 = hamiltonianCycle32.findHamiltonianCycle(intArray65);
        int[] intArray69 = hamiltonianCycle23.findHamiltonianCycle(intArray65);
        int[] intArray70 = hamiltonianCycle0.findHamiltonianCycle(intArray65);
        boolean boolean72 = hamiltonianCycle0.isPathFound((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test3617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3617");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass17 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3618");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass49 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test3619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3619");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean68 = hamiltonianCycle0.isPathFound(1);
        boolean boolean70 = hamiltonianCycle0.isPresent(10);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass73 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test3620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3620");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray45);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test3621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3621");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean46 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean50 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test3622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3622");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean54 = hamiltonianCycle52.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle52.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle19.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean92 = hamiltonianCycle0.isPresent(10);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass95 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test3623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3623");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean22 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass23 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test3624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3624");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean70 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test3625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3625");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test3626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3626");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test3627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3627");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        boolean boolean37 = hamiltonianCycle25.isPresent(100);
        boolean boolean39 = hamiltonianCycle25.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        boolean boolean52 = hamiltonianCycle40.isPresent(100);
        boolean boolean54 = hamiltonianCycle40.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        int[] intArray76 = hamiltonianCycle40.findHamiltonianCycle(intArray74);
        int[] intArray77 = hamiltonianCycle25.findHamiltonianCycle(intArray74);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray74);
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test3628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3628");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean25 = hamiltonianCycle23.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        boolean boolean58 = hamiltonianCycle26.isPresent((int) ' ');
        boolean boolean60 = hamiltonianCycle26.isPresent((int) (short) 10);
        boolean boolean62 = hamiltonianCycle26.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle63 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[][] intArray70 = new int[][] { intArray66, intArray69 };
        int[] intArray71 = hamiltonianCycle63.findHamiltonianCycle(intArray70);
        boolean boolean73 = hamiltonianCycle63.isPresent((int) (byte) 10);
        boolean boolean75 = hamiltonianCycle63.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle76 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[] intArray82 = new int[] { (short) -1, (short) 0 };
        int[][] intArray83 = new int[][] { intArray79, intArray82 };
        int[] intArray84 = hamiltonianCycle76.findHamiltonianCycle(intArray83);
        int[] intArray85 = hamiltonianCycle63.findHamiltonianCycle(intArray83);
        int[] intArray86 = hamiltonianCycle26.findHamiltonianCycle(intArray83);
        int[] intArray87 = hamiltonianCycle23.findHamiltonianCycle(intArray83);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray83);
        boolean boolean90 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean92 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3629");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass87 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3630");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound(1);
        boolean boolean24 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) 'a');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3631");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        boolean boolean27 = hamiltonianCycle13.isPresent((int) (byte) 0);
        boolean boolean29 = hamiltonianCycle13.isPathFound(1);
        boolean boolean31 = hamiltonianCycle13.isPresent(100);
        boolean boolean33 = hamiltonianCycle13.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent(0);
        int[] intArray49 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray54 = new int[][] { intArray49, intArray53 };
        int[] intArray55 = hamiltonianCycle35.findHamiltonianCycle(intArray54);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle35.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray63);
        int[] intArray67 = hamiltonianCycle13.findHamiltonianCycle(intArray63);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray63);
        java.lang.Class<?> wildcardClass69 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test3632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3632");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3633");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray68 = new int[][] { intArray63, intArray67 };
        int[] intArray69 = hamiltonianCycle49.findHamiltonianCycle(intArray68);
        int[] intArray70 = hamiltonianCycle38.findHamiltonianCycle(intArray68);
        int[] intArray71 = hamiltonianCycle23.findHamiltonianCycle(intArray68);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray68);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean76 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test3634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3634");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test3635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3635");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test3636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3636");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle37.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean98 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test3637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3637");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        boolean boolean63 = hamiltonianCycle13.isPresent((int) (short) 10);
        boolean boolean65 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle13.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test3638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3638");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent(0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3639");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle23.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        boolean boolean73 = hamiltonianCycle61.isPresent((int) '4');
        boolean boolean75 = hamiltonianCycle61.isPresent((int) (byte) 0);
        boolean boolean77 = hamiltonianCycle61.isPathFound(1);
        boolean boolean79 = hamiltonianCycle61.isPresent((int) '#');
        boolean boolean81 = hamiltonianCycle61.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        boolean boolean94 = hamiltonianCycle0.isPathFound(0);
        boolean boolean96 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test3640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3640");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass87 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3641");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3642");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test3643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3643");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test3644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3644");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent(0);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray65 = new int[][] { intArray60, intArray64 };
        int[] intArray66 = hamiltonianCycle46.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle35.findHamiltonianCycle(intArray65);
        boolean boolean69 = hamiltonianCycle35.isPathFound((int) (byte) 0);
        boolean boolean71 = hamiltonianCycle35.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle35.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        boolean boolean84 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean88 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test3645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3645");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test3646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3646");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean68 = hamiltonianCycle0.isPresent(0);
        boolean boolean70 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass71 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test3647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3647");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test3648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3648");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray36 = new int[][] { intArray31, intArray35 };
        int[] intArray37 = hamiltonianCycle17.findHamiltonianCycle(intArray36);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle17.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle17.isPresent((int) ' ');
        boolean boolean51 = hamiltonianCycle17.isPresent((int) (short) 10);
        boolean boolean53 = hamiltonianCycle17.isPathFound(0);
        boolean boolean55 = hamiltonianCycle17.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        boolean boolean68 = hamiltonianCycle56.isPresent((int) (short) 10);
        int[] intArray74 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray80 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray86 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray92 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray93 = new int[][] { intArray74, intArray80, intArray86, intArray92 };
        int[] intArray94 = hamiltonianCycle56.findHamiltonianCycle(intArray93);
        int[] intArray95 = hamiltonianCycle17.findHamiltonianCycle(intArray93);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
        boolean boolean98 = hamiltonianCycle0.isPresent((-1));
        java.lang.Class<?> wildcardClass99 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3649");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean78 = hamiltonianCycle0.isPresent(100);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test3650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3650");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean38 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test3651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3651");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test3652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3652");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent((int) (byte) 10);
        boolean boolean37 = hamiltonianCycle25.isPresent((-1));
        boolean boolean39 = hamiltonianCycle25.isPresent((int) (byte) 1);
        boolean boolean41 = hamiltonianCycle25.isPathFound((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPresent(100);
        boolean boolean56 = hamiltonianCycle42.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        boolean boolean69 = hamiltonianCycle57.isPresent(100);
        boolean boolean71 = hamiltonianCycle57.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent(0);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray91 = new int[][] { intArray86, intArray90 };
        int[] intArray92 = hamiltonianCycle72.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle57.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle42.findHamiltonianCycle(intArray91);
        int[] intArray95 = hamiltonianCycle25.findHamiltonianCycle(intArray91);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
    }

    @Test
    public void test3653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3653");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle60.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        java.lang.Class<?> wildcardClass95 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test3654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3654");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) (short) 10);
        int[] intArray21 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray27 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray33 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray39 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray40 = new int[][] { intArray21, intArray27, intArray33, intArray39 };
        int[] intArray41 = hamiltonianCycle3.findHamiltonianCycle(intArray40);
        int[] intArray42 = hamiltonianCycle0.findHamiltonianCycle(intArray40);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[][] intArray61 = new int[][] { intArray57, intArray60 };
        int[] intArray62 = hamiltonianCycle54.findHamiltonianCycle(intArray61);
        boolean boolean64 = hamiltonianCycle54.isPresent(0);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray73 = new int[][] { intArray68, intArray72 };
        int[] intArray74 = hamiltonianCycle54.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle43.findHamiltonianCycle(intArray73);
        boolean boolean77 = hamiltonianCycle43.isPathFound(0);
        boolean boolean79 = hamiltonianCycle43.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle80 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[][] intArray87 = new int[][] { intArray83, intArray86 };
        int[] intArray88 = hamiltonianCycle80.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle43.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        boolean boolean92 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test3655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3655");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean78 = hamiltonianCycle0.isPresent(100);
        java.lang.Class<?> wildcardClass79 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test3656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3656");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        boolean boolean35 = hamiltonianCycle21.isPresent((int) (short) 1);
        boolean boolean37 = hamiltonianCycle21.isPresent((int) (byte) 0);
        boolean boolean39 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean41 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean43 = hamiltonianCycle21.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean55 = hamiltonianCycle53.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle67 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[][] intArray74 = new int[][] { intArray70, intArray73 };
        int[] intArray75 = hamiltonianCycle67.findHamiltonianCycle(intArray74);
        boolean boolean77 = hamiltonianCycle67.isPresent(0);
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray86 = new int[][] { intArray81, intArray85 };
        int[] intArray87 = hamiltonianCycle67.findHamiltonianCycle(intArray86);
        int[] intArray88 = hamiltonianCycle56.findHamiltonianCycle(intArray86);
        int[] intArray89 = hamiltonianCycle53.findHamiltonianCycle(intArray86);
        int[] intArray90 = hamiltonianCycle44.findHamiltonianCycle(intArray86);
        int[] intArray91 = hamiltonianCycle21.findHamiltonianCycle(intArray86);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray86);
        java.lang.Class<?> wildcardClass93 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test3657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3657");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean16 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass17 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3658");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPathFound(1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test3659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3659");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        boolean boolean74 = hamiltonianCycle0.isPathFound(1);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean78 = hamiltonianCycle0.isPathFound(0);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test3660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3660");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test3661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3661");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        boolean boolean27 = hamiltonianCycle15.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent((int) (byte) 10);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        boolean boolean51 = hamiltonianCycle41.isPresent(0);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray60 = new int[][] { intArray55, intArray59 };
        int[] intArray61 = hamiltonianCycle41.findHamiltonianCycle(intArray60);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        int[] intArray71 = hamiltonianCycle41.findHamiltonianCycle(intArray69);
        int[] intArray72 = hamiltonianCycle28.findHamiltonianCycle(intArray69);
        int[] intArray73 = hamiltonianCycle15.findHamiltonianCycle(intArray69);
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray69);
        boolean boolean76 = hamiltonianCycle0.isPathFound(1);
        boolean boolean78 = hamiltonianCycle0.isPresent(100);
        java.lang.Class<?> wildcardClass79 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test3662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3662");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 0);
        int[][] intArray45 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test3663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3663");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle13.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean88 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass89 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test3664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3664");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((-1));
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        boolean boolean50 = hamiltonianCycle38.isPresent(100);
        boolean boolean52 = hamiltonianCycle38.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        boolean boolean65 = hamiltonianCycle53.isPresent(100);
        boolean boolean67 = hamiltonianCycle53.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle53.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle38.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle23.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean96 = hamiltonianCycle0.isPresent(100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test3665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3665");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test3666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3666");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean52 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test3667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3667");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3668");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass17 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test3669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3669");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) '4');
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 0);
        boolean boolean35 = hamiltonianCycle19.isPathFound(1);
        boolean boolean37 = hamiltonianCycle19.isPathFound(0);
        boolean boolean39 = hamiltonianCycle19.isPresent((int) (byte) 1);
        boolean boolean41 = hamiltonianCycle19.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPresent(100);
        boolean boolean56 = hamiltonianCycle42.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle57.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle42.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle19.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        java.lang.Class<?> wildcardClass93 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test3670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3670");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test3671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3671");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean68 = hamiltonianCycle0.isPresent(0);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test3672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3672");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle23.isPathFound((int) (short) 0);
        boolean boolean47 = hamiltonianCycle23.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent(0);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray68 = new int[][] { intArray63, intArray67 };
        int[] intArray69 = hamiltonianCycle49.findHamiltonianCycle(intArray68);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle49.findHamiltonianCycle(intArray77);
        int[] intArray80 = hamiltonianCycle48.findHamiltonianCycle(intArray77);
        int[] intArray81 = hamiltonianCycle23.findHamiltonianCycle(intArray77);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray77);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test3673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3673");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray46);
        boolean boolean50 = hamiltonianCycle0.isPresent(10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean54 = hamiltonianCycle0.isPresent(100);
        boolean boolean56 = hamiltonianCycle0.isPathFound(0);
        boolean boolean58 = hamiltonianCycle0.isPresent(100);
        boolean boolean60 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test3674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3674");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test3675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3675");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent(10);
        boolean boolean88 = hamiltonianCycle0.isPresent(100);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3676");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(100);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        boolean boolean51 = hamiltonianCycle41.isPresent((int) (byte) 10);
        boolean boolean53 = hamiltonianCycle41.isPresent((int) '4');
        boolean boolean55 = hamiltonianCycle41.isPresent((int) (byte) 0);
        boolean boolean57 = hamiltonianCycle41.isPathFound(1);
        boolean boolean59 = hamiltonianCycle41.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray79 = new int[][] { intArray74, intArray78 };
        int[] intArray80 = hamiltonianCycle60.findHamiltonianCycle(intArray79);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle81 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray84 = new int[] { (short) -1, (short) 0 };
        int[] intArray87 = new int[] { (short) -1, (short) 0 };
        int[][] intArray88 = new int[][] { intArray84, intArray87 };
        int[] intArray89 = hamiltonianCycle81.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle60.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle41.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
    }

    @Test
    public void test3677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3677");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean44 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test3678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3678");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent(10);
        boolean boolean88 = hamiltonianCycle0.isPresent(100);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3679");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        boolean boolean27 = hamiltonianCycle15.isPresent(100);
        boolean boolean29 = hamiltonianCycle15.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle15.findHamiltonianCycle(intArray49);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray49);
        boolean boolean54 = hamiltonianCycle0.isPresent(0);
        int[][] intArray55 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray56 = hamiltonianCycle0.findHamiltonianCycle(intArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test3680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3680");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean40 = hamiltonianCycle0.isPresent(1);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test3681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3681");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        boolean boolean20 = hamiltonianCycle0.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent((int) (short) 10);
        int[] intArray39 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray45 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray51 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray57 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray58 = new int[][] { intArray39, intArray45, intArray51, intArray57 };
        int[] intArray59 = hamiltonianCycle21.findHamiltonianCycle(intArray58);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        int[] intArray69 = hamiltonianCycle21.findHamiltonianCycle(intArray67);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle21.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
    }

    @Test
    public void test3682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3682");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3683");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        boolean boolean27 = hamiltonianCycle15.isPresent((int) '4');
        boolean boolean29 = hamiltonianCycle15.isPresent((int) (short) 100);
        boolean boolean31 = hamiltonianCycle15.isPresent((int) (byte) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        boolean boolean44 = hamiltonianCycle32.isPathFound(0);
        boolean boolean46 = hamiltonianCycle32.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray66 = new int[][] { intArray61, intArray65 };
        int[] intArray67 = hamiltonianCycle47.findHamiltonianCycle(intArray66);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        int[] intArray77 = hamiltonianCycle47.findHamiltonianCycle(intArray75);
        int[] intArray78 = hamiltonianCycle32.findHamiltonianCycle(intArray75);
        int[] intArray79 = hamiltonianCycle15.findHamiltonianCycle(intArray75);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray75);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
    }

    @Test
    public void test3684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3684");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) '4');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test3685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3685");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPresent(100);
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) 0);
        boolean boolean33 = hamiltonianCycle17.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent(0);
        boolean boolean46 = hamiltonianCycle34.isPresent(100);
        boolean boolean48 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray79 = new int[][] { intArray74, intArray78 };
        int[] intArray80 = hamiltonianCycle60.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle49.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle34.findHamiltonianCycle(intArray79);
        int[] intArray83 = hamiltonianCycle17.findHamiltonianCycle(intArray79);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
    }

    @Test
    public void test3686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3686");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean20 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test3687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3687");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass29 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test3688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3688");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle6 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[] intArray12 = new int[] { (short) -1, (short) 0 };
        int[][] intArray13 = new int[][] { intArray9, intArray12 };
        int[] intArray14 = hamiltonianCycle6.findHamiltonianCycle(intArray13);
        boolean boolean16 = hamiltonianCycle6.isPresent(0);
        int[] intArray20 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray25 = new int[][] { intArray20, intArray24 };
        int[] intArray26 = hamiltonianCycle6.findHamiltonianCycle(intArray25);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        int[] intArray36 = hamiltonianCycle6.findHamiltonianCycle(intArray34);
        int[] intArray37 = hamiltonianCycle5.findHamiltonianCycle(intArray34);
        boolean boolean39 = hamiltonianCycle5.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle40.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle40.isPathFound((int) (byte) 0);
        boolean boolean76 = hamiltonianCycle40.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle77 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[][] intArray84 = new int[][] { intArray80, intArray83 };
        int[] intArray85 = hamiltonianCycle77.findHamiltonianCycle(intArray84);
        int[] intArray86 = hamiltonianCycle40.findHamiltonianCycle(intArray84);
        int[] intArray87 = hamiltonianCycle5.findHamiltonianCycle(intArray84);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray84);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test3689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3689");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent(0);
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test3690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3690");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test3691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3691");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass15 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3692");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean26 = hamiltonianCycle0.isPresent(1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) (byte) 100);
        java.lang.Class<?> wildcardClass31 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test3693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3693");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3694");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent(1);
        boolean boolean26 = hamiltonianCycle0.isPresent((-1));
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean30 = hamiltonianCycle0.isPresent(0);
        boolean boolean32 = hamiltonianCycle0.isPresent(0);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test3695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3695");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        boolean boolean41 = hamiltonianCycle19.isPresent((int) (byte) 1);
        boolean boolean43 = hamiltonianCycle19.isPresent((int) (short) 1);
        boolean boolean45 = hamiltonianCycle19.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        boolean boolean80 = hamiltonianCycle46.isPathFound(0);
        boolean boolean82 = hamiltonianCycle46.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle83 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[] intArray89 = new int[] { (short) -1, (short) 0 };
        int[][] intArray90 = new int[][] { intArray86, intArray89 };
        int[] intArray91 = hamiltonianCycle83.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle46.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle19.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        java.lang.Class<?> wildcardClass95 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test3696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3696");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        boolean boolean40 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test3697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3697");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean48 = hamiltonianCycle46.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray79 = new int[][] { intArray74, intArray78 };
        int[] intArray80 = hamiltonianCycle60.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle49.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle46.findHamiltonianCycle(intArray79);
        int[] intArray83 = hamiltonianCycle37.findHamiltonianCycle(intArray79);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean88 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test3698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3698");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test3699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3699");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean26 = hamiltonianCycle0.isPathFound(0);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean30 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test3700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3700");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent(0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3701");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        boolean boolean27 = hamiltonianCycle15.isPresent(100);
        boolean boolean29 = hamiltonianCycle15.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle15.findHamiltonianCycle(intArray49);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray49);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test3702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3702");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean21 = hamiltonianCycle19.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        boolean boolean32 = hamiltonianCycle22.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[][] intArray40 = new int[][] { intArray36, intArray39 };
        int[] intArray41 = hamiltonianCycle33.findHamiltonianCycle(intArray40);
        boolean boolean43 = hamiltonianCycle33.isPresent(0);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray52 = new int[][] { intArray47, intArray51 };
        int[] intArray53 = hamiltonianCycle33.findHamiltonianCycle(intArray52);
        int[] intArray54 = hamiltonianCycle22.findHamiltonianCycle(intArray52);
        boolean boolean56 = hamiltonianCycle22.isPathFound(0);
        boolean boolean58 = hamiltonianCycle22.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        int[] intArray68 = hamiltonianCycle22.findHamiltonianCycle(intArray66);
        int[] intArray69 = hamiltonianCycle19.findHamiltonianCycle(intArray66);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle19.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test3703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3703");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean90 = hamiltonianCycle0.isPresent(100);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3704");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) '4');
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 0);
        boolean boolean35 = hamiltonianCycle19.isPathFound(1);
        boolean boolean37 = hamiltonianCycle19.isPathFound(0);
        boolean boolean39 = hamiltonianCycle19.isPresent((int) (byte) 1);
        boolean boolean41 = hamiltonianCycle19.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPresent(100);
        boolean boolean56 = hamiltonianCycle42.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle57.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle42.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle19.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        java.lang.Class<?> wildcardClass93 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test3705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3705");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) 0);
        int[][] intArray57 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3706");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean68 = hamiltonianCycle0.isPathFound(1);
        java.lang.Class<?> wildcardClass69 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test3707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3707");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean72 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test3708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3708");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean49 = hamiltonianCycle47.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 100);
        int[][] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3709");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test3710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3710");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean58 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test3711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3711");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass49 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test3712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3712");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean78 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass79 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test3713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3713");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        boolean boolean37 = hamiltonianCycle25.isPresent(100);
        boolean boolean39 = hamiltonianCycle25.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        boolean boolean52 = hamiltonianCycle40.isPresent(100);
        boolean boolean54 = hamiltonianCycle40.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        int[] intArray76 = hamiltonianCycle40.findHamiltonianCycle(intArray74);
        int[] intArray77 = hamiltonianCycle25.findHamiltonianCycle(intArray74);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray74);
        java.lang.Class<?> wildcardClass79 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test3714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3714");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean28 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3715");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((-1));
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        boolean boolean44 = hamiltonianCycle32.isPresent(100);
        boolean boolean46 = hamiltonianCycle32.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        boolean boolean59 = hamiltonianCycle47.isPresent(100);
        boolean boolean61 = hamiltonianCycle47.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent(0);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray81 = new int[][] { intArray76, intArray80 };
        int[] intArray82 = hamiltonianCycle62.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle32.findHamiltonianCycle(intArray81);
        int[] intArray85 = hamiltonianCycle17.findHamiltonianCycle(intArray81);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test3716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3716");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent(10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean33 = hamiltonianCycle21.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        boolean boolean46 = hamiltonianCycle34.isPresent((int) '4');
        boolean boolean48 = hamiltonianCycle34.isPresent((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle34.isPathFound(1);
        boolean boolean52 = hamiltonianCycle34.isPresent(100);
        boolean boolean54 = hamiltonianCycle34.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray75 = new int[][] { intArray70, intArray74 };
        int[] intArray76 = hamiltonianCycle56.findHamiltonianCycle(intArray75);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle77 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[][] intArray84 = new int[][] { intArray80, intArray83 };
        int[] intArray85 = hamiltonianCycle77.findHamiltonianCycle(intArray84);
        int[] intArray86 = hamiltonianCycle56.findHamiltonianCycle(intArray84);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray84);
        int[] intArray88 = hamiltonianCycle34.findHamiltonianCycle(intArray84);
        int[] intArray89 = hamiltonianCycle21.findHamiltonianCycle(intArray84);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray84);
        boolean boolean92 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3717");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3718");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPathFound(0);
        boolean boolean54 = hamiltonianCycle0.isPathFound(1);
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test3719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3719");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean36 = hamiltonianCycle0.isPresent(10);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 0);
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test3720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3720");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray58 = new int[][] { intArray53, intArray57 };
        int[] intArray59 = hamiltonianCycle39.findHamiltonianCycle(intArray58);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray58);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test3721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3721");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray34);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test3722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3722");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray46);
        boolean boolean50 = hamiltonianCycle0.isPresent(10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test3723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3723");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test3724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3724");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean6 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean8 = hamiltonianCycle0.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray12 = new int[] { (short) -1, (short) 0 };
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[][] intArray16 = new int[][] { intArray12, intArray15 };
        int[] intArray17 = hamiltonianCycle9.findHamiltonianCycle(intArray16);
        boolean boolean19 = hamiltonianCycle9.isPresent((int) (byte) 10);
        boolean boolean21 = hamiltonianCycle9.isPresent((int) '4');
        boolean boolean23 = hamiltonianCycle9.isPresent((int) (byte) 0);
        boolean boolean25 = hamiltonianCycle9.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent((int) (byte) 10);
        boolean boolean38 = hamiltonianCycle26.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        boolean boolean51 = hamiltonianCycle39.isPresent(100);
        boolean boolean53 = hamiltonianCycle39.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[][] intArray61 = new int[][] { intArray57, intArray60 };
        int[] intArray62 = hamiltonianCycle54.findHamiltonianCycle(intArray61);
        boolean boolean64 = hamiltonianCycle54.isPresent(0);
        boolean boolean66 = hamiltonianCycle54.isPresent(100);
        boolean boolean68 = hamiltonianCycle54.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle54.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle39.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle26.findHamiltonianCycle(intArray88);
        int[] intArray93 = hamiltonianCycle9.findHamiltonianCycle(intArray88);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean96 = hamiltonianCycle0.isPresent(100);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test3725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3725");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean58 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test3726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3726");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '4');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test3727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3727");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent((int) (byte) 10);
        boolean boolean47 = hamiltonianCycle35.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent((int) (byte) 10);
        boolean boolean60 = hamiltonianCycle48.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle48.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle35.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
    }

    @Test
    public void test3728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3728");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean16 = hamiltonianCycle14.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle14.findHamiltonianCycle(intArray47);
        int[] intArray51 = hamiltonianCycle5.findHamiltonianCycle(intArray47);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean56 = hamiltonianCycle0.isPathFound(1);
        java.lang.Class<?> wildcardClass57 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test3729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3729");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean33 = hamiltonianCycle21.isPresent((int) '4');
        boolean boolean35 = hamiltonianCycle21.isPresent((int) (byte) 0);
        boolean boolean37 = hamiltonianCycle21.isPathFound(1);
        boolean boolean39 = hamiltonianCycle21.isPresent(100);
        boolean boolean41 = hamiltonianCycle21.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent(0);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray62 = new int[][] { intArray57, intArray61 };
        int[] intArray63 = hamiltonianCycle43.findHamiltonianCycle(intArray62);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        int[] intArray73 = hamiltonianCycle43.findHamiltonianCycle(intArray71);
        int[] intArray74 = hamiltonianCycle42.findHamiltonianCycle(intArray71);
        int[] intArray75 = hamiltonianCycle21.findHamiltonianCycle(intArray71);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray71);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
    }

    @Test
    public void test3730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3730");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent(10);
        boolean boolean58 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test3731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3731");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        boolean boolean22 = hamiltonianCycle0.isPresent(1);
        boolean boolean24 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3732");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray12 = new int[] { (short) -1, (short) 0 };
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[][] intArray16 = new int[][] { intArray12, intArray15 };
        int[] intArray17 = hamiltonianCycle9.findHamiltonianCycle(intArray16);
        boolean boolean19 = hamiltonianCycle9.isPresent((int) (byte) 10);
        boolean boolean21 = hamiltonianCycle9.isPresent((int) '4');
        boolean boolean23 = hamiltonianCycle9.isPresent((int) (byte) 0);
        boolean boolean25 = hamiltonianCycle9.isPathFound(1);
        boolean boolean27 = hamiltonianCycle9.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        boolean boolean40 = hamiltonianCycle28.isPresent(100);
        boolean boolean42 = hamiltonianCycle28.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[][] intArray61 = new int[][] { intArray57, intArray60 };
        int[] intArray62 = hamiltonianCycle54.findHamiltonianCycle(intArray61);
        boolean boolean64 = hamiltonianCycle54.isPresent(0);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray73 = new int[][] { intArray68, intArray72 };
        int[] intArray74 = hamiltonianCycle54.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle43.findHamiltonianCycle(intArray73);
        boolean boolean77 = hamiltonianCycle43.isPathFound(0);
        boolean boolean79 = hamiltonianCycle43.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle80 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[][] intArray87 = new int[][] { intArray83, intArray86 };
        int[] intArray88 = hamiltonianCycle80.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle43.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle28.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle9.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean96 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean98 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test3733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3733");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass27 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test3734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3734");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean70 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test3735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3735");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPathFound(0);
        boolean boolean58 = hamiltonianCycle0.isPresent((-1));
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test3736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3736");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound(1);
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test3737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3737");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 1);
        java.lang.Class<?> wildcardClass23 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test3738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3738");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        boolean boolean44 = hamiltonianCycle32.isPresent(100);
        boolean boolean46 = hamiltonianCycle32.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        boolean boolean59 = hamiltonianCycle47.isPresent(100);
        boolean boolean61 = hamiltonianCycle47.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent(0);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray81 = new int[][] { intArray76, intArray80 };
        int[] intArray82 = hamiltonianCycle62.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle32.findHamiltonianCycle(intArray81);
        int[] intArray85 = hamiltonianCycle19.findHamiltonianCycle(intArray81);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
    }

    @Test
    public void test3739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3739");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound(1);
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test3740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3740");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean40 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean42 = hamiltonianCycle0.isPathFound(1);
        java.lang.Class<?> wildcardClass43 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test3741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3741");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle25.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent((int) (byte) 10);
        boolean boolean60 = hamiltonianCycle48.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle48.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle25.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
    }

    @Test
    public void test3742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3742");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3743");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        boolean boolean15 = hamiltonianCycle3.isPathFound(0);
        boolean boolean17 = hamiltonianCycle3.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle18 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[][] intArray25 = new int[][] { intArray21, intArray24 };
        int[] intArray26 = hamiltonianCycle18.findHamiltonianCycle(intArray25);
        boolean boolean28 = hamiltonianCycle18.isPresent(0);
        boolean boolean30 = hamiltonianCycle18.isPresent((int) (short) 10);
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray42 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray48 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray54 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray55 = new int[][] { intArray36, intArray42, intArray48, intArray54 };
        int[] intArray56 = hamiltonianCycle18.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle18.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle18.isPresent(10);
        boolean boolean70 = hamiltonianCycle18.isPresent((int) '#');
        boolean boolean72 = hamiltonianCycle18.isPresent((int) '4');
        boolean boolean74 = hamiltonianCycle18.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle75 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[][] intArray82 = new int[][] { intArray78, intArray81 };
        int[] intArray83 = hamiltonianCycle75.findHamiltonianCycle(intArray82);
        boolean boolean85 = hamiltonianCycle75.isPresent(0);
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray93 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray94 = new int[][] { intArray89, intArray93 };
        int[] intArray95 = hamiltonianCycle75.findHamiltonianCycle(intArray94);
        int[] intArray96 = hamiltonianCycle18.findHamiltonianCycle(intArray94);
        int[] intArray97 = hamiltonianCycle3.findHamiltonianCycle(intArray94);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray94);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
    }

    @Test
    public void test3744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3744");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        boolean boolean28 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle31 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean43 = hamiltonianCycle41.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        int[] intArray76 = hamiltonianCycle44.findHamiltonianCycle(intArray74);
        int[] intArray77 = hamiltonianCycle41.findHamiltonianCycle(intArray74);
        int[] intArray78 = hamiltonianCycle32.findHamiltonianCycle(intArray74);
        int[] intArray79 = hamiltonianCycle31.findHamiltonianCycle(intArray74);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray74);
        boolean boolean82 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass83 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test3745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3745");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test3746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3746");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean29 = hamiltonianCycle27.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        boolean boolean42 = hamiltonianCycle30.isPresent((int) (short) 10);
        int[] intArray48 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray54 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray60 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray66 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray67 = new int[][] { intArray48, intArray54, intArray60, intArray66 };
        int[] intArray68 = hamiltonianCycle30.findHamiltonianCycle(intArray67);
        int[] intArray69 = hamiltonianCycle27.findHamiltonianCycle(intArray67);
        int[] intArray70 = hamiltonianCycle0.findHamiltonianCycle(intArray67);
        boolean boolean72 = hamiltonianCycle0.isPathFound(0);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass75 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test3747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3747");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test3748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3748");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean56 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test3749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3749");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent((int) (byte) 10);
        boolean boolean37 = hamiltonianCycle25.isPresent((int) '4');
        boolean boolean39 = hamiltonianCycle25.isPresent((int) (byte) 0);
        boolean boolean41 = hamiltonianCycle25.isPathFound(1);
        boolean boolean43 = hamiltonianCycle25.isPathFound(0);
        boolean boolean45 = hamiltonianCycle25.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        int[] intArray55 = hamiltonianCycle25.findHamiltonianCycle(intArray53);
        int[] intArray56 = hamiltonianCycle0.findHamiltonianCycle(intArray53);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
    }

    @Test
    public void test3750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3750");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3751");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean74 = hamiltonianCycle0.isPathFound(0);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean78 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test3752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3752");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent(1);
        boolean boolean78 = hamiltonianCycle0.isPathFound(1);
        java.lang.Class<?> wildcardClass79 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test3753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3753");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        boolean boolean37 = hamiltonianCycle25.isPresent(100);
        boolean boolean39 = hamiltonianCycle25.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle25.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
    }

    @Test
    public void test3754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3754");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean82 = hamiltonianCycle0.isPresent(0);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean88 = hamiltonianCycle0.isPresent(100);
        boolean boolean90 = hamiltonianCycle0.isPresent(10);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3755");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        boolean boolean27 = hamiltonianCycle15.isPresent(100);
        boolean boolean29 = hamiltonianCycle15.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle15.findHamiltonianCycle(intArray49);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray49);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3756");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle37.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean98 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test3757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3757");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean72 = hamiltonianCycle0.isPresent(100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test3758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3758");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test3759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3759");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle51.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        boolean boolean84 = hamiltonianCycle0.isPathFound(0);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test3760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3760");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3761");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (byte) 0);
        boolean boolean39 = hamiltonianCycle23.isPathFound(1);
        boolean boolean41 = hamiltonianCycle23.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray61 = new int[][] { intArray56, intArray60 };
        int[] intArray62 = hamiltonianCycle42.findHamiltonianCycle(intArray61);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle63 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[][] intArray70 = new int[][] { intArray66, intArray69 };
        int[] intArray71 = hamiltonianCycle63.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle42.findHamiltonianCycle(intArray70);
        int[] intArray73 = hamiltonianCycle23.findHamiltonianCycle(intArray70);
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
    }

    @Test
    public void test3762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3762");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        boolean boolean35 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean37 = hamiltonianCycle21.isPresent((int) (short) 0);
        boolean boolean39 = hamiltonianCycle21.isPresent((int) (short) 1);
        boolean boolean41 = hamiltonianCycle21.isPresent((-1));
        boolean boolean43 = hamiltonianCycle21.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent(0);
        boolean boolean56 = hamiltonianCycle44.isPresent(100);
        boolean boolean58 = hamiltonianCycle44.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle44.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle21.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
    }

    @Test
    public void test3763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3763");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3764");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean16 = hamiltonianCycle14.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle14.findHamiltonianCycle(intArray47);
        int[] intArray51 = hamiltonianCycle5.findHamiltonianCycle(intArray47);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean56 = hamiltonianCycle0.isPathFound(0);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '4');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test3765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3765");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3766");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent(100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test3767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3767");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean26 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3768");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean35 = hamiltonianCycle33.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray66 = new int[][] { intArray61, intArray65 };
        int[] intArray67 = hamiltonianCycle47.findHamiltonianCycle(intArray66);
        int[] intArray68 = hamiltonianCycle36.findHamiltonianCycle(intArray66);
        int[] intArray69 = hamiltonianCycle33.findHamiltonianCycle(intArray66);
        int[] intArray70 = hamiltonianCycle0.findHamiltonianCycle(intArray66);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean74 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test3769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3769");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        boolean boolean25 = hamiltonianCycle13.isPresent(100);
        boolean boolean27 = hamiltonianCycle13.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray58 = new int[][] { intArray53, intArray57 };
        int[] intArray59 = hamiltonianCycle39.findHamiltonianCycle(intArray58);
        int[] intArray60 = hamiltonianCycle28.findHamiltonianCycle(intArray58);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray58);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray58);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (byte) 100);
        java.lang.Class<?> wildcardClass65 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test3770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3770");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) (short) 100);
        boolean boolean27 = hamiltonianCycle13.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent((int) (byte) 10);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        boolean boolean51 = hamiltonianCycle41.isPresent((int) (byte) 10);
        boolean boolean53 = hamiltonianCycle41.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[][] intArray61 = new int[][] { intArray57, intArray60 };
        int[] intArray62 = hamiltonianCycle54.findHamiltonianCycle(intArray61);
        boolean boolean64 = hamiltonianCycle54.isPresent(0);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray73 = new int[][] { intArray68, intArray72 };
        int[] intArray74 = hamiltonianCycle54.findHamiltonianCycle(intArray73);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle75 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[][] intArray82 = new int[][] { intArray78, intArray81 };
        int[] intArray83 = hamiltonianCycle75.findHamiltonianCycle(intArray82);
        int[] intArray84 = hamiltonianCycle54.findHamiltonianCycle(intArray82);
        int[] intArray85 = hamiltonianCycle41.findHamiltonianCycle(intArray82);
        int[] intArray86 = hamiltonianCycle28.findHamiltonianCycle(intArray82);
        int[] intArray87 = hamiltonianCycle13.findHamiltonianCycle(intArray82);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray82);
        boolean boolean90 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass91 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test3771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3771");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean23 = hamiltonianCycle21.isPresent((int) (short) -1);
        boolean boolean25 = hamiltonianCycle21.isPresent((int) (short) 0);
        boolean boolean27 = hamiltonianCycle21.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent((int) (byte) 10);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        int[] intArray50 = hamiltonianCycle28.findHamiltonianCycle(intArray48);
        int[] intArray51 = hamiltonianCycle21.findHamiltonianCycle(intArray48);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray48);
        boolean boolean54 = hamiltonianCycle0.isPathFound(1);
        boolean boolean56 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3772");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent(1);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3773");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean38 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test3774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3774");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(1);
        boolean boolean24 = hamiltonianCycle0.isPathFound(0);
        boolean boolean26 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3775");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean48 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test3776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3776");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean47 = hamiltonianCycle45.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent(0);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray78 = new int[][] { intArray73, intArray77 };
        int[] intArray79 = hamiltonianCycle59.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle48.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle45.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray83 = hamiltonianCycle21.findHamiltonianCycle(intArray78);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test3777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3777");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        boolean boolean61 = hamiltonianCycle27.isPathFound(0);
        boolean boolean63 = hamiltonianCycle27.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        int[] intArray73 = hamiltonianCycle27.findHamiltonianCycle(intArray71);
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray71);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean80 = hamiltonianCycle0.isPresent(0);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test3778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3778");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean16 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean18 = hamiltonianCycle0.isPresent(1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3779");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean26 = hamiltonianCycle0.isPresent(1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean32 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test3780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3780");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean39 = hamiltonianCycle23.isPresent((int) (short) 0);
        boolean boolean41 = hamiltonianCycle23.isPresent((int) (short) 1);
        boolean boolean43 = hamiltonianCycle23.isPresent((-1));
        boolean boolean45 = hamiltonianCycle23.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent(0);
        boolean boolean58 = hamiltonianCycle46.isPresent(100);
        boolean boolean60 = hamiltonianCycle46.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent(0);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray91 = new int[][] { intArray86, intArray90 };
        int[] intArray92 = hamiltonianCycle72.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle61.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle46.findHamiltonianCycle(intArray91);
        int[] intArray95 = hamiltonianCycle23.findHamiltonianCycle(intArray91);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        java.lang.Class<?> wildcardClass97 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3781");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3782");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPathFound(1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3783");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test3784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3784");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray46);
        boolean boolean50 = hamiltonianCycle0.isPresent(10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean56 = hamiltonianCycle0.isPresent(1);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) '4');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test3785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3785");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass53 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test3786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3786");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean48 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test3787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3787");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean48 = hamiltonianCycle46.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        boolean boolean59 = hamiltonianCycle49.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray79 = new int[][] { intArray74, intArray78 };
        int[] intArray80 = hamiltonianCycle60.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle49.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle46.findHamiltonianCycle(intArray79);
        int[] intArray83 = hamiltonianCycle37.findHamiltonianCycle(intArray79);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        boolean boolean86 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test3788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3788");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent(100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3789");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean66 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test3790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3790");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean72 = hamiltonianCycle0.isPresent(100);
        java.lang.Class<?> wildcardClass73 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test3791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3791");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean28 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3792");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) (short) 100);
        boolean boolean27 = hamiltonianCycle13.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent((int) (byte) 10);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        boolean boolean51 = hamiltonianCycle41.isPresent((int) (byte) 10);
        boolean boolean53 = hamiltonianCycle41.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[][] intArray61 = new int[][] { intArray57, intArray60 };
        int[] intArray62 = hamiltonianCycle54.findHamiltonianCycle(intArray61);
        boolean boolean64 = hamiltonianCycle54.isPresent(0);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray73 = new int[][] { intArray68, intArray72 };
        int[] intArray74 = hamiltonianCycle54.findHamiltonianCycle(intArray73);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle75 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[][] intArray82 = new int[][] { intArray78, intArray81 };
        int[] intArray83 = hamiltonianCycle75.findHamiltonianCycle(intArray82);
        int[] intArray84 = hamiltonianCycle54.findHamiltonianCycle(intArray82);
        int[] intArray85 = hamiltonianCycle41.findHamiltonianCycle(intArray82);
        int[] intArray86 = hamiltonianCycle28.findHamiltonianCycle(intArray82);
        int[] intArray87 = hamiltonianCycle13.findHamiltonianCycle(intArray82);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray82);
        boolean boolean90 = hamiltonianCycle0.isPresent((-1));
        boolean boolean92 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3793");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[][] intArray40 = new int[][] { intArray36, intArray39 };
        int[] intArray41 = hamiltonianCycle33.findHamiltonianCycle(intArray40);
        boolean boolean43 = hamiltonianCycle33.isPresent(0);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray52 = new int[][] { intArray47, intArray51 };
        int[] intArray53 = hamiltonianCycle33.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle33.isPathFound((int) (short) 0);
        boolean boolean57 = hamiltonianCycle33.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent(0);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray78 = new int[][] { intArray73, intArray77 };
        int[] intArray79 = hamiltonianCycle59.findHamiltonianCycle(intArray78);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle80 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[][] intArray87 = new int[][] { intArray83, intArray86 };
        int[] intArray88 = hamiltonianCycle80.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle59.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle33.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) '4');
        java.lang.Class<?> wildcardClass95 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test3794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3794");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        boolean boolean28 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3795");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean72 = hamiltonianCycle0.isPresent(100);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test3796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3796");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        boolean boolean35 = hamiltonianCycle21.isPresent((int) (short) 100);
        boolean boolean37 = hamiltonianCycle21.isPresent((int) ' ');
        boolean boolean39 = hamiltonianCycle21.isPresent((int) 'a');
        boolean boolean41 = hamiltonianCycle21.isPresent((int) (short) -1);
        boolean boolean43 = hamiltonianCycle21.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent((int) (byte) 10);
        boolean boolean56 = hamiltonianCycle44.isPresent((int) '4');
        boolean boolean58 = hamiltonianCycle44.isPresent((int) (byte) 0);
        boolean boolean60 = hamiltonianCycle44.isPathFound(1);
        boolean boolean62 = hamiltonianCycle44.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle63 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[][] intArray70 = new int[][] { intArray66, intArray69 };
        int[] intArray71 = hamiltonianCycle63.findHamiltonianCycle(intArray70);
        boolean boolean73 = hamiltonianCycle63.isPresent(0);
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray82 = new int[][] { intArray77, intArray81 };
        int[] intArray83 = hamiltonianCycle63.findHamiltonianCycle(intArray82);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle84 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray87 = new int[] { (short) -1, (short) 0 };
        int[] intArray90 = new int[] { (short) -1, (short) 0 };
        int[][] intArray91 = new int[][] { intArray87, intArray90 };
        int[] intArray92 = hamiltonianCycle84.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle63.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle44.findHamiltonianCycle(intArray91);
        int[] intArray95 = hamiltonianCycle21.findHamiltonianCycle(intArray91);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
    }

    @Test
    public void test3797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3797");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        boolean boolean61 = hamiltonianCycle27.isPathFound(0);
        boolean boolean63 = hamiltonianCycle27.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        int[] intArray73 = hamiltonianCycle27.findHamiltonianCycle(intArray71);
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray71);
        boolean boolean76 = hamiltonianCycle0.isPathFound(1);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test3798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3798");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test3799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3799");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass53 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test3800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3800");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        boolean boolean27 = hamiltonianCycle15.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent((int) (byte) 10);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        boolean boolean51 = hamiltonianCycle41.isPresent(0);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray60 = new int[][] { intArray55, intArray59 };
        int[] intArray61 = hamiltonianCycle41.findHamiltonianCycle(intArray60);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        int[] intArray71 = hamiltonianCycle41.findHamiltonianCycle(intArray69);
        int[] intArray72 = hamiltonianCycle28.findHamiltonianCycle(intArray69);
        int[] intArray73 = hamiltonianCycle15.findHamiltonianCycle(intArray69);
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray69);
        boolean boolean76 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test3801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3801");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean44 = hamiltonianCycle0.isPresent(1);
        boolean boolean46 = hamiltonianCycle0.isPathFound((int) (short) 1);
        java.lang.Class<?> wildcardClass47 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test3802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3802");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean64 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test3803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3803");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) ' ');
        java.lang.Class<?> wildcardClass45 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test3804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3804");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        boolean boolean69 = hamiltonianCycle57.isPresent(100);
        boolean boolean71 = hamiltonianCycle57.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent(0);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray91 = new int[][] { intArray86, intArray90 };
        int[] intArray92 = hamiltonianCycle72.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle57.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        java.lang.Class<?> wildcardClass95 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test3805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3805");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        int[] intArray59 = new int[] { (short) 1, (short) 0, 100, (byte) 0 };
        int[][] intArray60 = new int[][] { intArray59 };
        int[] intArray61 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle0.isPresent((-1));
        boolean boolean65 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 0, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test3806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3806");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test3807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3807");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass57 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test3808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3808");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        boolean boolean27 = hamiltonianCycle15.isPresent((int) '4');
        boolean boolean29 = hamiltonianCycle15.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        boolean boolean42 = hamiltonianCycle30.isPathFound(0);
        boolean boolean44 = hamiltonianCycle30.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle45.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle30.findHamiltonianCycle(intArray73);
        int[] intArray77 = hamiltonianCycle15.findHamiltonianCycle(intArray73);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        java.lang.Class<?> wildcardClass79 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test3809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3809");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        boolean boolean27 = hamiltonianCycle15.isPresent(100);
        boolean boolean29 = hamiltonianCycle15.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle15.findHamiltonianCycle(intArray49);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray49);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean56 = hamiltonianCycle0.isPresent((-1));
        java.lang.Class<?> wildcardClass57 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test3810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3810");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3811");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean46 = hamiltonianCycle0.isPresent(100);
        boolean boolean48 = hamiltonianCycle0.isPresent((-1));
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test3812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3812");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean28 = hamiltonianCycle0.isPathFound(0);
        boolean boolean30 = hamiltonianCycle0.isPresent(10);
        boolean boolean32 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        java.lang.Class<?> wildcardClass33 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test3813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3813");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test3814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3814");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3815");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test3816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3816");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean42 = hamiltonianCycle0.isPathFound((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test3817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3817");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent(10);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean28 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean30 = hamiltonianCycle0.isPresent((-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test3818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3818");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3819");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3820");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle15.findHamiltonianCycle(intArray43);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray43);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) '4');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test3821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3821");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean27 = hamiltonianCycle25.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) (short) 10);
        int[] intArray46 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray52 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray58 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray64 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray65 = new int[][] { intArray46, intArray52, intArray58, intArray64 };
        int[] intArray66 = hamiltonianCycle28.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle25.findHamiltonianCycle(intArray65);
        boolean boolean69 = hamiltonianCycle25.isPresent(0);
        boolean boolean71 = hamiltonianCycle25.isPathFound((int) (byte) 0);
        boolean boolean73 = hamiltonianCycle25.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle74 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[][] intArray81 = new int[][] { intArray77, intArray80 };
        int[] intArray82 = hamiltonianCycle74.findHamiltonianCycle(intArray81);
        boolean boolean84 = hamiltonianCycle74.isPresent(0);
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray92 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray93 = new int[][] { intArray88, intArray92 };
        int[] intArray94 = hamiltonianCycle74.findHamiltonianCycle(intArray93);
        int[] intArray95 = hamiltonianCycle25.findHamiltonianCycle(intArray93);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
        java.lang.Class<?> wildcardClass97 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test3822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3822");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean55 = hamiltonianCycle53.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean58 = hamiltonianCycle56.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle56.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle53.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean98 = hamiltonianCycle0.isPathFound((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test3823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3823");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        boolean boolean27 = hamiltonianCycle13.isPresent((int) (byte) 0);
        boolean boolean29 = hamiltonianCycle13.isPathFound(1);
        boolean boolean31 = hamiltonianCycle13.isPathFound(0);
        boolean boolean33 = hamiltonianCycle13.isPresent((int) (byte) 1);
        boolean boolean35 = hamiltonianCycle13.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        boolean boolean48 = hamiltonianCycle36.isPresent(100);
        boolean boolean50 = hamiltonianCycle36.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent(0);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray81 = new int[][] { intArray76, intArray80 };
        int[] intArray82 = hamiltonianCycle62.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle51.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle36.findHamiltonianCycle(intArray81);
        int[] intArray85 = hamiltonianCycle13.findHamiltonianCycle(intArray81);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        java.lang.Class<?> wildcardClass87 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3824");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        boolean boolean71 = hamiltonianCycle59.isPresent((int) '4');
        boolean boolean73 = hamiltonianCycle59.isPresent((int) (byte) 0);
        boolean boolean75 = hamiltonianCycle59.isPathFound(1);
        boolean boolean77 = hamiltonianCycle59.isPresent((int) '#');
        boolean boolean79 = hamiltonianCycle59.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle80 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[][] intArray87 = new int[][] { intArray83, intArray86 };
        int[] intArray88 = hamiltonianCycle80.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle59.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        java.lang.Class<?> wildcardClass91 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test3825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3825");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound(0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (short) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test3826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3826");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(100);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent(0);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test3827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3827");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean28 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle29 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[][] intArray36 = new int[][] { intArray32, intArray35 };
        int[] intArray37 = hamiltonianCycle29.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle29.isPresent(0);
        boolean boolean41 = hamiltonianCycle29.isPresent((int) (short) 10);
        int[] intArray47 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray53 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray59 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray65 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray66 = new int[][] { intArray47, intArray53, intArray59, intArray65 };
        int[] intArray67 = hamiltonianCycle29.findHamiltonianCycle(intArray66);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        int[] intArray77 = hamiltonianCycle29.findHamiltonianCycle(intArray75);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray75);
        boolean boolean80 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test3828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3828");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test3829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3829");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) '4');
        boolean boolean17 = hamiltonianCycle3.isPresent((int) (byte) 0);
        boolean boolean19 = hamiltonianCycle3.isPathFound(1);
        boolean boolean21 = hamiltonianCycle3.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        boolean boolean32 = hamiltonianCycle22.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[][] intArray40 = new int[][] { intArray36, intArray39 };
        int[] intArray41 = hamiltonianCycle33.findHamiltonianCycle(intArray40);
        boolean boolean43 = hamiltonianCycle33.isPresent(0);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray52 = new int[][] { intArray47, intArray51 };
        int[] intArray53 = hamiltonianCycle33.findHamiltonianCycle(intArray52);
        int[] intArray54 = hamiltonianCycle22.findHamiltonianCycle(intArray52);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean57 = hamiltonianCycle55.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle55.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle22.findHamiltonianCycle(intArray88);
        int[] intArray93 = hamiltonianCycle3.findHamiltonianCycle(intArray88);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test3830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3830");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean68 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test3831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3831");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean6 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean8 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3832");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3833");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3834");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        boolean boolean41 = hamiltonianCycle19.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPresent(100);
        boolean boolean56 = hamiltonianCycle42.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle42.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle19.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
    }

    @Test
    public void test3835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3835");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle15.findHamiltonianCycle(intArray43);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray43);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test3836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3836");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean6 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean8 = hamiltonianCycle0.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray12 = new int[] { (short) -1, (short) 0 };
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[][] intArray16 = new int[][] { intArray12, intArray15 };
        int[] intArray17 = hamiltonianCycle9.findHamiltonianCycle(intArray16);
        boolean boolean19 = hamiltonianCycle9.isPresent((int) (byte) 10);
        boolean boolean21 = hamiltonianCycle9.isPresent((int) '4');
        boolean boolean23 = hamiltonianCycle9.isPresent((int) (byte) 0);
        boolean boolean25 = hamiltonianCycle9.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent((int) (byte) 10);
        boolean boolean38 = hamiltonianCycle26.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        boolean boolean51 = hamiltonianCycle39.isPresent(100);
        boolean boolean53 = hamiltonianCycle39.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[][] intArray61 = new int[][] { intArray57, intArray60 };
        int[] intArray62 = hamiltonianCycle54.findHamiltonianCycle(intArray61);
        boolean boolean64 = hamiltonianCycle54.isPresent(0);
        boolean boolean66 = hamiltonianCycle54.isPresent(100);
        boolean boolean68 = hamiltonianCycle54.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle54.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle39.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle26.findHamiltonianCycle(intArray88);
        int[] intArray93 = hamiltonianCycle9.findHamiltonianCycle(intArray88);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test3837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3837");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean28 = hamiltonianCycle0.isPathFound(0);
        boolean boolean30 = hamiltonianCycle0.isPresent(1);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test3838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3838");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound(0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean70 = hamiltonianCycle0.isPathFound(0);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test3839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3839");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        boolean boolean64 = hamiltonianCycle0.isPathFound(0);
        boolean boolean66 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test3840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3840");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(0);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3841");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test3842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3842");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass61 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test3843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3843");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        boolean boolean35 = hamiltonianCycle21.isPresent((int) (short) 0);
        boolean boolean37 = hamiltonianCycle21.isPresent((int) (short) 100);
        boolean boolean39 = hamiltonianCycle21.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle40.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle40.isPathFound(0);
        boolean boolean76 = hamiltonianCycle40.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle77 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[][] intArray84 = new int[][] { intArray80, intArray83 };
        int[] intArray85 = hamiltonianCycle77.findHamiltonianCycle(intArray84);
        int[] intArray86 = hamiltonianCycle40.findHamiltonianCycle(intArray84);
        int[] intArray87 = hamiltonianCycle21.findHamiltonianCycle(intArray84);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray84);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3844");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3845");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test3846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3846");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass55 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test3847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3847");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray49);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
    }

    @Test
    public void test3848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3848");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (byte) 0);
        java.lang.Class<?> wildcardClass33 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test3849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3849");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean78 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test3850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3850");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean46 = hamiltonianCycle0.isPresent(10);
        boolean boolean48 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test3851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3851");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean20 = hamiltonianCycle0.isPresent(100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test3852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3852");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass23 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test3853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3853");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3854");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test3855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3855");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3856");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass41 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test3857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3857");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test3858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3858");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        boolean boolean27 = hamiltonianCycle15.isPresent(100);
        boolean boolean29 = hamiltonianCycle15.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle15.findHamiltonianCycle(intArray49);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray49);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test3859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3859");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        boolean boolean27 = hamiltonianCycle15.isPresent((int) '4');
        boolean boolean29 = hamiltonianCycle15.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean32 = hamiltonianCycle30.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean35 = hamiltonianCycle33.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray66 = new int[][] { intArray61, intArray65 };
        int[] intArray67 = hamiltonianCycle47.findHamiltonianCycle(intArray66);
        int[] intArray68 = hamiltonianCycle36.findHamiltonianCycle(intArray66);
        int[] intArray69 = hamiltonianCycle33.findHamiltonianCycle(intArray66);
        int[] intArray70 = hamiltonianCycle30.findHamiltonianCycle(intArray66);
        int[] intArray71 = hamiltonianCycle15.findHamiltonianCycle(intArray66);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray66);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test3860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3860");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean40 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean42 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test3861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3861");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPathFound(0);
        boolean boolean31 = hamiltonianCycle17.isPathFound(1);
        boolean boolean33 = hamiltonianCycle17.isPresent((-1));
        boolean boolean35 = hamiltonianCycle17.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray66 = new int[][] { intArray61, intArray65 };
        int[] intArray67 = hamiltonianCycle47.findHamiltonianCycle(intArray66);
        int[] intArray68 = hamiltonianCycle36.findHamiltonianCycle(intArray66);
        boolean boolean70 = hamiltonianCycle36.isPathFound(0);
        boolean boolean72 = hamiltonianCycle36.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle73 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[][] intArray80 = new int[][] { intArray76, intArray79 };
        int[] intArray81 = hamiltonianCycle73.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle36.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle17.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test3862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3862");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        boolean boolean25 = hamiltonianCycle13.isPresent(100);
        boolean boolean27 = hamiltonianCycle13.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        boolean boolean40 = hamiltonianCycle28.isPresent(100);
        boolean boolean42 = hamiltonianCycle28.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent(0);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray62 = new int[][] { intArray57, intArray61 };
        int[] intArray63 = hamiltonianCycle43.findHamiltonianCycle(intArray62);
        int[] intArray64 = hamiltonianCycle28.findHamiltonianCycle(intArray62);
        int[] intArray65 = hamiltonianCycle13.findHamiltonianCycle(intArray62);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray62);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
    }

    @Test
    public void test3863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3863");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean16 = hamiltonianCycle14.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle14.findHamiltonianCycle(intArray47);
        int[] intArray51 = hamiltonianCycle5.findHamiltonianCycle(intArray47);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean54 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        boolean boolean67 = hamiltonianCycle55.isPresent(100);
        boolean boolean69 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle55.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        java.lang.Class<?> wildcardClass93 = intArray92.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test3864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3864");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle29 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[][] intArray36 = new int[][] { intArray32, intArray35 };
        int[] intArray37 = hamiltonianCycle29.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle29.isPresent((int) (byte) 10);
        boolean boolean41 = hamiltonianCycle29.isPresent((int) '4');
        boolean boolean43 = hamiltonianCycle29.isPresent((int) (byte) 0);
        boolean boolean45 = hamiltonianCycle29.isPathFound(1);
        boolean boolean47 = hamiltonianCycle29.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent(0);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray67 = new int[][] { intArray62, intArray66 };
        int[] intArray68 = hamiltonianCycle48.findHamiltonianCycle(intArray67);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle48.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle29.findHamiltonianCycle(intArray76);
        boolean boolean81 = hamiltonianCycle29.isPresent((int) ' ');
        boolean boolean83 = hamiltonianCycle29.isPresent(100);
        boolean boolean85 = hamiltonianCycle29.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle86 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray89 = new int[] { (short) -1, (short) 0 };
        int[] intArray92 = new int[] { (short) -1, (short) 0 };
        int[][] intArray93 = new int[][] { intArray89, intArray92 };
        int[] intArray94 = hamiltonianCycle86.findHamiltonianCycle(intArray93);
        int[] intArray95 = hamiltonianCycle29.findHamiltonianCycle(intArray93);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
        boolean boolean98 = hamiltonianCycle0.isPresent((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test3865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3865");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean19 = hamiltonianCycle17.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle20 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[][] intArray27 = new int[][] { intArray23, intArray26 };
        int[] intArray28 = hamiltonianCycle20.findHamiltonianCycle(intArray27);
        boolean boolean30 = hamiltonianCycle20.isPresent(0);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray39 = new int[][] { intArray34, intArray38 };
        int[] intArray40 = hamiltonianCycle20.findHamiltonianCycle(intArray39);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        int[] intArray50 = hamiltonianCycle20.findHamiltonianCycle(intArray48);
        boolean boolean52 = hamiltonianCycle20.isPresent((int) ' ');
        boolean boolean54 = hamiltonianCycle20.isPresent((int) (short) 10);
        boolean boolean56 = hamiltonianCycle20.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent((int) (byte) 10);
        boolean boolean69 = hamiltonianCycle57.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle57.findHamiltonianCycle(intArray77);
        int[] intArray80 = hamiltonianCycle20.findHamiltonianCycle(intArray77);
        int[] intArray81 = hamiltonianCycle17.findHamiltonianCycle(intArray77);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray77);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean86 = hamiltonianCycle0.isPresent(1);
        boolean boolean88 = hamiltonianCycle0.isPresent(0);
        boolean boolean90 = hamiltonianCycle0.isPresent(100);
        boolean boolean92 = hamiltonianCycle0.isPathFound(0);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass95 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test3866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3866");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle13.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test3867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3867");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean56 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test3868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3868");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent(1);
        boolean boolean26 = hamiltonianCycle0.isPresent((-1));
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean30 = hamiltonianCycle0.isPresent(0);
        boolean boolean32 = hamiltonianCycle0.isPresent(0);
        int[][] intArray33 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray34 = hamiltonianCycle0.findHamiltonianCycle(intArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test3869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3869");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle13.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean84 = hamiltonianCycle0.isPathFound(0);
        boolean boolean86 = hamiltonianCycle0.isPathFound(0);
        boolean boolean88 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass89 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test3870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3870");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle1.isPathFound((int) (short) 0);
        boolean boolean25 = hamiltonianCycle1.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent(0);
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray46 = new int[][] { intArray41, intArray45 };
        int[] intArray47 = hamiltonianCycle27.findHamiltonianCycle(intArray46);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        int[] intArray57 = hamiltonianCycle27.findHamiltonianCycle(intArray55);
        int[] intArray58 = hamiltonianCycle26.findHamiltonianCycle(intArray55);
        int[] intArray59 = hamiltonianCycle1.findHamiltonianCycle(intArray55);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray55);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test3871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3871");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test3872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3872");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3873");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3874");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean72 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test3875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3875");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean28 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass29 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test3876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3876");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test3877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3877");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test3878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3878");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        boolean boolean15 = hamiltonianCycle5.isPresent(0);
        boolean boolean17 = hamiltonianCycle5.isPresent((int) '4');
        boolean boolean19 = hamiltonianCycle5.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle20 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[][] intArray27 = new int[][] { intArray23, intArray26 };
        int[] intArray28 = hamiltonianCycle20.findHamiltonianCycle(intArray27);
        boolean boolean30 = hamiltonianCycle20.isPresent(0);
        boolean boolean32 = hamiltonianCycle20.isPathFound(0);
        boolean boolean34 = hamiltonianCycle20.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent(0);
        int[] intArray49 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray54 = new int[][] { intArray49, intArray53 };
        int[] intArray55 = hamiltonianCycle35.findHamiltonianCycle(intArray54);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle35.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle20.findHamiltonianCycle(intArray63);
        int[] intArray67 = hamiltonianCycle5.findHamiltonianCycle(intArray63);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray63);
        boolean boolean70 = hamiltonianCycle0.isPathFound(1);
        boolean boolean72 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean74 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass75 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test3879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3879");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3880");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean72 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test3881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3881");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean49 = hamiltonianCycle47.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean88 = hamiltonianCycle0.isPathFound(1);
        boolean boolean90 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean92 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (byte) -1);
        java.lang.Class<?> wildcardClass95 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test3882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3882");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray74);
        java.lang.Class<?> wildcardClass77 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test3883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3883");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3884");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3885");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        boolean boolean51 = hamiltonianCycle41.isPresent(0);
        boolean boolean53 = hamiltonianCycle41.isPresent(100);
        boolean boolean55 = hamiltonianCycle41.isPresent((int) (short) 1);
        boolean boolean57 = hamiltonianCycle41.isPresent((int) (byte) 0);
        boolean boolean59 = hamiltonianCycle41.isPresent((int) (byte) 10);
        boolean boolean61 = hamiltonianCycle41.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent((int) (byte) 10);
        boolean boolean74 = hamiltonianCycle62.isPresent((int) '4');
        boolean boolean76 = hamiltonianCycle62.isPresent((int) (byte) 0);
        boolean boolean78 = hamiltonianCycle62.isPathFound(1);
        boolean boolean80 = hamiltonianCycle62.isPresent((int) '#');
        boolean boolean82 = hamiltonianCycle62.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle83 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[] intArray89 = new int[] { (short) -1, (short) 0 };
        int[][] intArray90 = new int[][] { intArray86, intArray89 };
        int[] intArray91 = hamiltonianCycle83.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle62.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle41.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
    }

    @Test
    public void test3886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3886");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean41 = hamiltonianCycle39.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPresent((int) (short) 10);
        int[] intArray60 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray66 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray72 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray78 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray79 = new int[][] { intArray60, intArray66, intArray72, intArray78 };
        int[] intArray80 = hamiltonianCycle42.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle39.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        boolean boolean84 = hamiltonianCycle0.isPresent(10);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test3887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3887");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((-1));
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3888");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test3889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3889");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass53 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test3890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3890");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean78 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) '4');
        java.lang.Class<?> wildcardClass83 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test3891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3891");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        boolean boolean56 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent((int) (byte) 10);
        boolean boolean69 = hamiltonianCycle57.isPresent((int) '4');
        boolean boolean71 = hamiltonianCycle57.isPresent((int) (byte) 0);
        boolean boolean73 = hamiltonianCycle57.isPathFound(1);
        boolean boolean75 = hamiltonianCycle57.isPresent((int) '#');
        boolean boolean77 = hamiltonianCycle57.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle78 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[] intArray84 = new int[] { (short) -1, (short) 0 };
        int[][] intArray85 = new int[][] { intArray81, intArray84 };
        int[] intArray86 = hamiltonianCycle78.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle57.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean90 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3892");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle37.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPathFound(0);
        boolean boolean96 = hamiltonianCycle0.isPresent(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test3893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3893");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean23 = hamiltonianCycle21.isPresent((int) (short) -1);
        boolean boolean25 = hamiltonianCycle21.isPresent((int) (short) 0);
        boolean boolean27 = hamiltonianCycle21.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent((int) (byte) 10);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        int[] intArray50 = hamiltonianCycle28.findHamiltonianCycle(intArray48);
        int[] intArray51 = hamiltonianCycle21.findHamiltonianCycle(intArray48);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray48);
        boolean boolean54 = hamiltonianCycle0.isPresent(10);
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3894");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(100);
        java.lang.Class<?> wildcardClass11 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test3895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3895");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        boolean boolean35 = hamiltonianCycle21.isPresent((int) (short) 1);
        boolean boolean37 = hamiltonianCycle21.isPresent((int) (byte) 0);
        boolean boolean39 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean41 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean43 = hamiltonianCycle21.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean55 = hamiltonianCycle53.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle67 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[][] intArray74 = new int[][] { intArray70, intArray73 };
        int[] intArray75 = hamiltonianCycle67.findHamiltonianCycle(intArray74);
        boolean boolean77 = hamiltonianCycle67.isPresent(0);
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray86 = new int[][] { intArray81, intArray85 };
        int[] intArray87 = hamiltonianCycle67.findHamiltonianCycle(intArray86);
        int[] intArray88 = hamiltonianCycle56.findHamiltonianCycle(intArray86);
        int[] intArray89 = hamiltonianCycle53.findHamiltonianCycle(intArray86);
        int[] intArray90 = hamiltonianCycle44.findHamiltonianCycle(intArray86);
        int[] intArray91 = hamiltonianCycle21.findHamiltonianCycle(intArray86);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray86);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
    }

    @Test
    public void test3896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3896");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        boolean boolean44 = hamiltonianCycle32.isPresent(100);
        boolean boolean46 = hamiltonianCycle32.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        boolean boolean59 = hamiltonianCycle47.isPresent(100);
        boolean boolean61 = hamiltonianCycle47.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent(0);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray81 = new int[][] { intArray76, intArray80 };
        int[] intArray82 = hamiltonianCycle62.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle32.findHamiltonianCycle(intArray81);
        int[] intArray85 = hamiltonianCycle19.findHamiltonianCycle(intArray81);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        java.lang.Class<?> wildcardClass87 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3897");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3898");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle37.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        java.lang.Class<?> wildcardClass93 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test3899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3899");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test3900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3900");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean28 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle29 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[][] intArray36 = new int[][] { intArray32, intArray35 };
        int[] intArray37 = hamiltonianCycle29.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle29.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray59 = new int[][] { intArray54, intArray58 };
        int[] intArray60 = hamiltonianCycle40.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle29.findHamiltonianCycle(intArray59);
        boolean boolean63 = hamiltonianCycle29.isPathFound(0);
        boolean boolean65 = hamiltonianCycle29.isPresent((int) (short) 1);
        boolean boolean67 = hamiltonianCycle29.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle29.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
    }

    @Test
    public void test3901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3901");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(0);
        boolean boolean36 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        boolean boolean51 = hamiltonianCycle39.isPathFound(0);
        boolean boolean53 = hamiltonianCycle39.isPathFound(1);
        boolean boolean55 = hamiltonianCycle39.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray75 = new int[][] { intArray70, intArray74 };
        int[] intArray76 = hamiltonianCycle56.findHamiltonianCycle(intArray75);
        int[] intArray77 = hamiltonianCycle39.findHamiltonianCycle(intArray75);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray75);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
    }

    @Test
    public void test3902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3902");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean30 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass31 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test3903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3903");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass75 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test3904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3904");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean29 = hamiltonianCycle27.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        boolean boolean42 = hamiltonianCycle30.isPresent((int) (short) 10);
        int[] intArray48 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray54 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray60 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray66 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray67 = new int[][] { intArray48, intArray54, intArray60, intArray66 };
        int[] intArray68 = hamiltonianCycle30.findHamiltonianCycle(intArray67);
        int[] intArray69 = hamiltonianCycle27.findHamiltonianCycle(intArray67);
        int[] intArray70 = hamiltonianCycle0.findHamiltonianCycle(intArray67);
        boolean boolean72 = hamiltonianCycle0.isPathFound(0);
        boolean boolean74 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test3905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3905");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test3906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3906");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean27 = hamiltonianCycle25.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) (short) 10);
        int[] intArray46 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray52 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray58 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray64 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray65 = new int[][] { intArray46, intArray52, intArray58, intArray64 };
        int[] intArray66 = hamiltonianCycle28.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle25.findHamiltonianCycle(intArray65);
        boolean boolean69 = hamiltonianCycle25.isPresent(0);
        boolean boolean71 = hamiltonianCycle25.isPathFound((int) (byte) 0);
        boolean boolean73 = hamiltonianCycle25.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle74 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[][] intArray81 = new int[][] { intArray77, intArray80 };
        int[] intArray82 = hamiltonianCycle74.findHamiltonianCycle(intArray81);
        boolean boolean84 = hamiltonianCycle74.isPresent(0);
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray92 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray93 = new int[][] { intArray88, intArray92 };
        int[] intArray94 = hamiltonianCycle74.findHamiltonianCycle(intArray93);
        int[] intArray95 = hamiltonianCycle25.findHamiltonianCycle(intArray93);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
        boolean boolean98 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test3907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3907");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean54 = hamiltonianCycle0.isPresent(10);
        boolean boolean56 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3908");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test3909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3909");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((-1));
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3910");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) '4');
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 0);
        boolean boolean35 = hamiltonianCycle19.isPathFound(1);
        boolean boolean37 = hamiltonianCycle19.isPresent(100);
        boolean boolean39 = hamiltonianCycle19.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        boolean boolean51 = hamiltonianCycle41.isPresent(0);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray60 = new int[][] { intArray55, intArray59 };
        int[] intArray61 = hamiltonianCycle41.findHamiltonianCycle(intArray60);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle73 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[][] intArray80 = new int[][] { intArray76, intArray79 };
        int[] intArray81 = hamiltonianCycle73.findHamiltonianCycle(intArray80);
        boolean boolean83 = hamiltonianCycle73.isPresent(0);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray91 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray92 = new int[][] { intArray87, intArray91 };
        int[] intArray93 = hamiltonianCycle73.findHamiltonianCycle(intArray92);
        int[] intArray94 = hamiltonianCycle62.findHamiltonianCycle(intArray92);
        int[] intArray95 = hamiltonianCycle41.findHamiltonianCycle(intArray92);
        int[] intArray96 = hamiltonianCycle40.findHamiltonianCycle(intArray92);
        int[] intArray97 = hamiltonianCycle19.findHamiltonianCycle(intArray92);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray92);
        java.lang.Class<?> wildcardClass99 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3911");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean72 = hamiltonianCycle0.isPresent(100);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean76 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass77 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test3912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3912");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 0);
        int[][] intArray19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3913");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test3914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3914");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test3915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3915");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test3916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3916");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound(1);
        boolean boolean24 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass25 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test3917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3917");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent(0);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray33 = new int[][] { intArray28, intArray32 };
        int[] intArray34 = hamiltonianCycle14.findHamiltonianCycle(intArray33);
        int[] intArray35 = hamiltonianCycle3.findHamiltonianCycle(intArray33);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray33);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test3918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3918");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((-1));
        boolean boolean31 = hamiltonianCycle17.isPresent((int) '#');
        boolean boolean33 = hamiltonianCycle17.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean36 = hamiltonianCycle34.isPresent((int) (short) -1);
        boolean boolean38 = hamiltonianCycle34.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean50 = hamiltonianCycle48.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent(0);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray81 = new int[][] { intArray76, intArray80 };
        int[] intArray82 = hamiltonianCycle62.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle51.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle48.findHamiltonianCycle(intArray81);
        int[] intArray85 = hamiltonianCycle39.findHamiltonianCycle(intArray81);
        int[] intArray86 = hamiltonianCycle34.findHamiltonianCycle(intArray81);
        int[] intArray87 = hamiltonianCycle17.findHamiltonianCycle(intArray81);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
    }

    @Test
    public void test3919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3919");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean78 = hamiltonianCycle0.isPresent(1);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test3920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3920");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3921");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent(100);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test3922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3922");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((-1));
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        java.lang.Class<?> wildcardClass25 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test3923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3923");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle2 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray5 = new int[] { (short) -1, (short) 0 };
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[][] intArray9 = new int[][] { intArray5, intArray8 };
        int[] intArray10 = hamiltonianCycle2.findHamiltonianCycle(intArray9);
        boolean boolean12 = hamiltonianCycle2.isPresent(0);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray20 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray21 = new int[][] { intArray16, intArray20 };
        int[] intArray22 = hamiltonianCycle2.findHamiltonianCycle(intArray21);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle2.findHamiltonianCycle(intArray30);
        int[] intArray33 = hamiltonianCycle1.findHamiltonianCycle(intArray30);
        int[] intArray34 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean40 = hamiltonianCycle0.isPresent(0);
        boolean boolean42 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test3924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3924");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray21 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray22 = new int[][] { intArray17, intArray21 };
        int[] intArray23 = hamiltonianCycle3.findHamiltonianCycle(intArray22);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        int[] intArray33 = hamiltonianCycle3.findHamiltonianCycle(intArray31);
        boolean boolean35 = hamiltonianCycle3.isPresent((int) ' ');
        boolean boolean37 = hamiltonianCycle3.isPresent((int) (short) 10);
        boolean boolean39 = hamiltonianCycle3.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle40.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        int[] intArray62 = hamiltonianCycle40.findHamiltonianCycle(intArray60);
        int[] intArray63 = hamiltonianCycle3.findHamiltonianCycle(intArray60);
        int[] intArray64 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean68 = hamiltonianCycle0.isPresent(10);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) (byte) 0);
        java.lang.Class<?> wildcardClass71 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test3925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3925");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (byte) -1);
        java.lang.Class<?> wildcardClass27 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test3926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3926");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean24 = hamiltonianCycle0.isPathFound((int) (short) 0);
        int[][] intArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = hamiltonianCycle0.findHamiltonianCycle(intArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3927");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        boolean boolean27 = hamiltonianCycle15.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean41 = hamiltonianCycle39.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray72 = new int[][] { intArray67, intArray71 };
        int[] intArray73 = hamiltonianCycle53.findHamiltonianCycle(intArray72);
        int[] intArray74 = hamiltonianCycle42.findHamiltonianCycle(intArray72);
        int[] intArray75 = hamiltonianCycle39.findHamiltonianCycle(intArray72);
        int[] intArray76 = hamiltonianCycle28.findHamiltonianCycle(intArray72);
        boolean boolean78 = hamiltonianCycle28.isPresent((int) (short) 10);
        boolean boolean80 = hamiltonianCycle28.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle81 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray84 = new int[] { (short) -1, (short) 0 };
        int[] intArray87 = new int[] { (short) -1, (short) 0 };
        int[][] intArray88 = new int[][] { intArray84, intArray87 };
        int[] intArray89 = hamiltonianCycle81.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle28.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle15.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test3928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3928");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPathFound(0);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test3929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3929");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        boolean boolean65 = hamiltonianCycle53.isPresent(100);
        boolean boolean67 = hamiltonianCycle53.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle53.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test3930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3930");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (short) 1);
        java.lang.Class<?> wildcardClass49 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test3931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3931");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test3932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3932");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean28 = hamiltonianCycle26.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle29 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[][] intArray36 = new int[][] { intArray32, intArray35 };
        int[] intArray37 = hamiltonianCycle29.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle29.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray59 = new int[][] { intArray54, intArray58 };
        int[] intArray60 = hamiltonianCycle40.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle29.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle26.findHamiltonianCycle(intArray59);
        int[] intArray63 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        boolean boolean65 = hamiltonianCycle15.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle15.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3933");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean22 = hamiltonianCycle0.isPathFound(0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3934");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean68 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test3935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3935");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent((int) (byte) 10);
        boolean boolean49 = hamiltonianCycle37.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle37.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray57);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass65 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test3936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3936");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        boolean boolean40 = hamiltonianCycle0.isPresent((-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test3937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3937");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle51.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        boolean boolean84 = hamiltonianCycle0.isPathFound(0);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass87 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test3938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3938");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean28 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3939");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean22 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3940");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3941");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass27 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test3942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3942");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound(1);
        boolean boolean24 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean26 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3943");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3944");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent(10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean33 = hamiltonianCycle21.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        boolean boolean46 = hamiltonianCycle34.isPresent((int) '4');
        boolean boolean48 = hamiltonianCycle34.isPresent((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle34.isPathFound(1);
        boolean boolean52 = hamiltonianCycle34.isPresent(100);
        boolean boolean54 = hamiltonianCycle34.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray75 = new int[][] { intArray70, intArray74 };
        int[] intArray76 = hamiltonianCycle56.findHamiltonianCycle(intArray75);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle77 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[][] intArray84 = new int[][] { intArray80, intArray83 };
        int[] intArray85 = hamiltonianCycle77.findHamiltonianCycle(intArray84);
        int[] intArray86 = hamiltonianCycle56.findHamiltonianCycle(intArray84);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray84);
        int[] intArray88 = hamiltonianCycle34.findHamiltonianCycle(intArray84);
        int[] intArray89 = hamiltonianCycle21.findHamiltonianCycle(intArray84);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray84);
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test3945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3945");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean30 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test3946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3946");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(0);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass29 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test3947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3947");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test3948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3948");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        boolean boolean25 = hamiltonianCycle13.isPresent(100);
        boolean boolean27 = hamiltonianCycle13.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        boolean boolean49 = hamiltonianCycle39.isPresent(0);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray58 = new int[][] { intArray53, intArray57 };
        int[] intArray59 = hamiltonianCycle39.findHamiltonianCycle(intArray58);
        int[] intArray60 = hamiltonianCycle28.findHamiltonianCycle(intArray58);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray58);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray58);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test3949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3949");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean28 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle29 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[][] intArray36 = new int[][] { intArray32, intArray35 };
        int[] intArray37 = hamiltonianCycle29.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle29.isPresent(0);
        boolean boolean41 = hamiltonianCycle29.isPresent((int) (short) 10);
        int[] intArray47 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray53 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray59 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray65 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray66 = new int[][] { intArray47, intArray53, intArray59, intArray65 };
        int[] intArray67 = hamiltonianCycle29.findHamiltonianCycle(intArray66);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        int[] intArray77 = hamiltonianCycle29.findHamiltonianCycle(intArray75);
        int[] intArray78 = hamiltonianCycle0.findHamiltonianCycle(intArray75);
        boolean boolean80 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass81 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test3950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3950");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) '4');
        boolean boolean33 = hamiltonianCycle19.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean45 = hamiltonianCycle43.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle43.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray76);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray76);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test3951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3951");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean51 = hamiltonianCycle49.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean54 = hamiltonianCycle52.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle52.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle49.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean94 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (short) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test3952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3952");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        boolean boolean42 = hamiltonianCycle30.isPresent(100);
        boolean boolean44 = hamiltonianCycle30.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        boolean boolean57 = hamiltonianCycle45.isPresent(100);
        boolean boolean59 = hamiltonianCycle45.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray79 = new int[][] { intArray74, intArray78 };
        int[] intArray80 = hamiltonianCycle60.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle45.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle30.findHamiltonianCycle(intArray79);
        int[] intArray83 = hamiltonianCycle17.findHamiltonianCycle(intArray79);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test3953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3953");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean78 = hamiltonianCycle0.isPresent((-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test3954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3954");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3955");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        boolean boolean27 = hamiltonianCycle15.isPresent(100);
        boolean boolean29 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        boolean boolean42 = hamiltonianCycle30.isPresent(100);
        boolean boolean44 = hamiltonianCycle30.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle30.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle15.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test3956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3956");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test3957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3957");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray51 = new int[][] { intArray46, intArray50 };
        int[] intArray52 = hamiltonianCycle32.findHamiltonianCycle(intArray51);
        int[] intArray53 = hamiltonianCycle21.findHamiltonianCycle(intArray51);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean56 = hamiltonianCycle54.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle57.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle54.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle21.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        java.lang.Class<?> wildcardClass93 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test3958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3958");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(1);
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3959");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3960");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray34);
        java.lang.Class<?> wildcardClass37 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test3961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3961");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle20 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray40 = new int[][] { intArray35, intArray39 };
        int[] intArray41 = hamiltonianCycle21.findHamiltonianCycle(intArray40);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle21.findHamiltonianCycle(intArray49);
        int[] intArray52 = hamiltonianCycle20.findHamiltonianCycle(intArray49);
        int[] intArray53 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        int[] intArray54 = hamiltonianCycle0.findHamiltonianCycle(intArray49);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test3962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3962");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(1);
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean22 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean25 = hamiltonianCycle23.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        boolean boolean38 = hamiltonianCycle26.isPresent((int) (short) 10);
        int[] intArray44 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray50 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray56 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray62 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray63 = new int[][] { intArray44, intArray50, intArray56, intArray62 };
        int[] intArray64 = hamiltonianCycle26.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle23.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray63);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1, -1, -1]");
    }

    @Test
    public void test3963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3963");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean60 = hamiltonianCycle0.isPresent(100);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test3964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3964");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test3965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3965");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test3966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3966");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3967");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test3968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3968");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean38 = hamiltonianCycle0.isPresent(100);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean42 = hamiltonianCycle0.isPathFound(0);
        boolean boolean44 = hamiltonianCycle0.isPresent(10);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test3969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3969");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean42 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test3970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3970");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean32 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent((int) (byte) 10);
        boolean boolean47 = hamiltonianCycle35.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent((int) (byte) 10);
        boolean boolean60 = hamiltonianCycle48.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle48.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle35.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        boolean boolean96 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test3971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3971");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test3972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3972");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) '4');
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 0);
        boolean boolean35 = hamiltonianCycle19.isPathFound(1);
        boolean boolean37 = hamiltonianCycle19.isPresent((int) '#');
        boolean boolean39 = hamiltonianCycle19.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean42 = hamiltonianCycle40.isPresent((int) (short) -1);
        boolean boolean44 = hamiltonianCycle40.isPresent((int) (short) 0);
        boolean boolean46 = hamiltonianCycle40.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent((int) (byte) 10);
        boolean boolean59 = hamiltonianCycle47.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        int[] intArray69 = hamiltonianCycle47.findHamiltonianCycle(intArray67);
        int[] intArray70 = hamiltonianCycle40.findHamiltonianCycle(intArray67);
        int[] intArray71 = hamiltonianCycle19.findHamiltonianCycle(intArray67);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray67);
        java.lang.Class<?> wildcardClass73 = intArray72.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test3973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3973");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test3974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3974");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) (short) 10);
        int[] intArray21 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray27 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray33 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray39 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray40 = new int[][] { intArray21, intArray27, intArray33, intArray39 };
        int[] intArray41 = hamiltonianCycle3.findHamiltonianCycle(intArray40);
        int[] intArray42 = hamiltonianCycle0.findHamiltonianCycle(intArray40);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[][] intArray61 = new int[][] { intArray57, intArray60 };
        int[] intArray62 = hamiltonianCycle54.findHamiltonianCycle(intArray61);
        boolean boolean64 = hamiltonianCycle54.isPresent(0);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray73 = new int[][] { intArray68, intArray72 };
        int[] intArray74 = hamiltonianCycle54.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle43.findHamiltonianCycle(intArray73);
        boolean boolean77 = hamiltonianCycle43.isPathFound(0);
        boolean boolean79 = hamiltonianCycle43.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle80 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[][] intArray87 = new int[][] { intArray83, intArray86 };
        int[] intArray88 = hamiltonianCycle80.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle43.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        java.lang.Class<?> wildcardClass91 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test3975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3975");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        int[] intArray59 = new int[] { (short) 1, (short) 0, 100, (byte) 0 };
        int[][] intArray60 = new int[][] { intArray59 };
        int[] intArray61 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        boolean boolean74 = hamiltonianCycle64.isPresent(0);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray83 = new int[][] { intArray78, intArray82 };
        int[] intArray84 = hamiltonianCycle64.findHamiltonianCycle(intArray83);
        int[] intArray85 = hamiltonianCycle0.findHamiltonianCycle(intArray83);
        java.lang.Class<?> wildcardClass86 = intArray83.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 0, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test3976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3976");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean56 = hamiltonianCycle0.isPresent(100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3977");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent(100);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle29 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[][] intArray36 = new int[][] { intArray32, intArray35 };
        int[] intArray37 = hamiltonianCycle29.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle29.isPresent((int) (byte) 10);
        boolean boolean41 = hamiltonianCycle29.isPresent((int) '4');
        boolean boolean43 = hamiltonianCycle29.isPresent((int) (byte) 0);
        boolean boolean45 = hamiltonianCycle29.isPathFound(1);
        boolean boolean47 = hamiltonianCycle29.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent(0);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray67 = new int[][] { intArray62, intArray66 };
        int[] intArray68 = hamiltonianCycle48.findHamiltonianCycle(intArray67);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle48.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle29.findHamiltonianCycle(intArray76);
        boolean boolean81 = hamiltonianCycle29.isPresent((int) ' ');
        boolean boolean83 = hamiltonianCycle29.isPresent(100);
        boolean boolean85 = hamiltonianCycle29.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle86 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray89 = new int[] { (short) -1, (short) 0 };
        int[] intArray92 = new int[] { (short) -1, (short) 0 };
        int[][] intArray93 = new int[][] { intArray89, intArray92 };
        int[] intArray94 = hamiltonianCycle86.findHamiltonianCycle(intArray93);
        int[] intArray95 = hamiltonianCycle29.findHamiltonianCycle(intArray93);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray93);
        boolean boolean98 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test3978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3978");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3979");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test3980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3980");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '4');
        java.lang.Class<?> wildcardClass67 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test3981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3981");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean46 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 100);
        java.lang.Class<?> wildcardClass49 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test3982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3982");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean49 = hamiltonianCycle47.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        boolean boolean86 = hamiltonianCycle0.isPresent(1);
        boolean boolean88 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test3983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3983");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean78 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        java.lang.Class<?> wildcardClass79 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test3984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3984");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle37.findHamiltonianCycle(intArray65);
        boolean boolean69 = hamiltonianCycle37.isPresent((int) ' ');
        boolean boolean71 = hamiltonianCycle37.isPresent((int) (short) 10);
        boolean boolean73 = hamiltonianCycle37.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle74 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[][] intArray81 = new int[][] { intArray77, intArray80 };
        int[] intArray82 = hamiltonianCycle74.findHamiltonianCycle(intArray81);
        boolean boolean84 = hamiltonianCycle74.isPresent((int) (byte) 10);
        boolean boolean86 = hamiltonianCycle74.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle87 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray90 = new int[] { (short) -1, (short) 0 };
        int[] intArray93 = new int[] { (short) -1, (short) 0 };
        int[][] intArray94 = new int[][] { intArray90, intArray93 };
        int[] intArray95 = hamiltonianCycle87.findHamiltonianCycle(intArray94);
        int[] intArray96 = hamiltonianCycle74.findHamiltonianCycle(intArray94);
        int[] intArray97 = hamiltonianCycle37.findHamiltonianCycle(intArray94);
        int[] intArray98 = hamiltonianCycle0.findHamiltonianCycle(intArray94);
        java.lang.Class<?> wildcardClass99 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3985");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray46);
        boolean boolean50 = hamiltonianCycle0.isPresent(10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3986");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) '4');
        boolean boolean33 = hamiltonianCycle19.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean45 = hamiltonianCycle43.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle43.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray76);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray76);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass85 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test3987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3987");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle10 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean12 = hamiltonianCycle10.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        int[] intArray46 = hamiltonianCycle10.findHamiltonianCycle(intArray43);
        int[] intArray47 = hamiltonianCycle1.findHamiltonianCycle(intArray43);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray43);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass51 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test3988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3988");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test3989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3989");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean62 = hamiltonianCycle0.isPresent(10);
        boolean boolean64 = hamiltonianCycle0.isPathFound(0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test3990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3990");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        boolean boolean71 = hamiltonianCycle59.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle59.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        java.lang.Class<?> wildcardClass83 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test3991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3991");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent(1);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test3992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3992");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean25 = hamiltonianCycle23.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        boolean boolean38 = hamiltonianCycle26.isPresent((int) (short) 10);
        int[] intArray44 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray50 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray56 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray62 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray63 = new int[][] { intArray44, intArray50, intArray56, intArray62 };
        int[] intArray64 = hamiltonianCycle26.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle23.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray63);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1, -1, -1]");
    }

    @Test
    public void test3993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3993");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent(1);
        boolean boolean78 = hamiltonianCycle0.isPresent(0);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (byte) -1);
        java.lang.Class<?> wildcardClass81 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test3994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3994");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((int) '4');
        boolean boolean31 = hamiltonianCycle17.isPresent((int) (byte) 0);
        boolean boolean33 = hamiltonianCycle17.isPathFound(1);
        boolean boolean35 = hamiltonianCycle17.isPathFound(0);
        boolean boolean37 = hamiltonianCycle17.isPresent((int) (byte) 1);
        boolean boolean39 = hamiltonianCycle17.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        boolean boolean52 = hamiltonianCycle40.isPresent(100);
        boolean boolean54 = hamiltonianCycle40.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle40.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle17.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        java.lang.Class<?> wildcardClass91 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test3995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3995");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test3996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3996");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3997");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test3998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3998");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle13.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test3999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3999");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test4000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test4000");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }
}


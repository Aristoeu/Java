package graphs;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest9 {

    public static boolean debug = false;

    @Test
    public void test4501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4501");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        boolean boolean27 = hamiltonianCycle15.isPresent((int) '4');
        boolean boolean29 = hamiltonianCycle15.isPresent((int) (short) 100);
        boolean boolean31 = hamiltonianCycle15.isPresent((int) (byte) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        boolean boolean44 = hamiltonianCycle32.isPathFound(0);
        boolean boolean46 = hamiltonianCycle32.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray66 = new int[][] { intArray61, intArray65 };
        int[] intArray67 = hamiltonianCycle47.findHamiltonianCycle(intArray66);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        int[] intArray77 = hamiltonianCycle47.findHamiltonianCycle(intArray75);
        int[] intArray78 = hamiltonianCycle32.findHamiltonianCycle(intArray75);
        int[] intArray79 = hamiltonianCycle15.findHamiltonianCycle(intArray75);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray75);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
    }

    @Test
    public void test4502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4502");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass39 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test4503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4503");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean58 = hamiltonianCycle0.isPresent(10);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test4504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4504");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(0);
        boolean boolean36 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 10);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test4505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4505");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean38 = hamiltonianCycle0.isPresent(1);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test4506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4506");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean68 = hamiltonianCycle0.isPresent(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test4507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4507");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent((int) (byte) 10);
        boolean boolean42 = hamiltonianCycle30.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent(0);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray62 = new int[][] { intArray57, intArray61 };
        int[] intArray63 = hamiltonianCycle43.findHamiltonianCycle(intArray62);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        int[] intArray73 = hamiltonianCycle43.findHamiltonianCycle(intArray71);
        int[] intArray74 = hamiltonianCycle30.findHamiltonianCycle(intArray71);
        int[] intArray75 = hamiltonianCycle17.findHamiltonianCycle(intArray71);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray71);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test4508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4508");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test4509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4509");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray51 = new int[][] { intArray46, intArray50 };
        int[] intArray52 = hamiltonianCycle32.findHamiltonianCycle(intArray51);
        int[] intArray53 = hamiltonianCycle21.findHamiltonianCycle(intArray51);
        int[] intArray54 = hamiltonianCycle0.findHamiltonianCycle(intArray51);
        boolean boolean56 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass57 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test4510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4510");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test4511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4511");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test4512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4512");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test4513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4513");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean6 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean8 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray12 = new int[] { (short) -1, (short) 0 };
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[][] intArray16 = new int[][] { intArray12, intArray15 };
        int[] intArray17 = hamiltonianCycle9.findHamiltonianCycle(intArray16);
        boolean boolean19 = hamiltonianCycle9.isPresent(0);
        boolean boolean21 = hamiltonianCycle9.isPresent(100);
        boolean boolean23 = hamiltonianCycle9.isPresent((int) (byte) 10);
        boolean boolean25 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        int[] intArray58 = hamiltonianCycle26.findHamiltonianCycle(intArray56);
        boolean boolean60 = hamiltonianCycle26.isPresent((int) (byte) 1);
        boolean boolean62 = hamiltonianCycle26.isPathFound(0);
        boolean boolean64 = hamiltonianCycle26.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle65 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[][] intArray72 = new int[][] { intArray68, intArray71 };
        int[] intArray73 = hamiltonianCycle65.findHamiltonianCycle(intArray72);
        boolean boolean75 = hamiltonianCycle65.isPresent(0);
        boolean boolean77 = hamiltonianCycle65.isPresent(100);
        boolean boolean79 = hamiltonianCycle65.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle80 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[][] intArray87 = new int[][] { intArray83, intArray86 };
        int[] intArray88 = hamiltonianCycle80.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle65.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle26.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle9.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        boolean boolean94 = hamiltonianCycle0.isPathFound(1);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test4514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4514");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) (short) 10);
        int[] intArray21 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray27 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray33 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray39 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray40 = new int[][] { intArray21, intArray27, intArray33, intArray39 };
        int[] intArray41 = hamiltonianCycle3.findHamiltonianCycle(intArray40);
        int[] intArray42 = hamiltonianCycle0.findHamiltonianCycle(intArray40);
        boolean boolean44 = hamiltonianCycle0.isPresent(0);
        boolean boolean46 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test4515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4515");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test4516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4516");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test4517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4517");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4518");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPathFound(1);
        boolean boolean78 = hamiltonianCycle0.isPathFound(1);
        boolean boolean80 = hamiltonianCycle0.isPresent((-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test4519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4519");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        boolean boolean27 = hamiltonianCycle15.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[][] intArray56 = new int[][] { intArray52, intArray55 };
        int[] intArray57 = hamiltonianCycle49.findHamiltonianCycle(intArray56);
        int[] intArray58 = hamiltonianCycle28.findHamiltonianCycle(intArray56);
        int[] intArray59 = hamiltonianCycle15.findHamiltonianCycle(intArray56);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray56);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test4520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4520");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[][] intArray40 = new int[][] { intArray36, intArray39 };
        int[] intArray41 = hamiltonianCycle33.findHamiltonianCycle(intArray40);
        boolean boolean43 = hamiltonianCycle33.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean46 = hamiltonianCycle44.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent(0);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray77 = new int[][] { intArray72, intArray76 };
        int[] intArray78 = hamiltonianCycle58.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle47.findHamiltonianCycle(intArray77);
        int[] intArray80 = hamiltonianCycle44.findHamiltonianCycle(intArray77);
        int[] intArray81 = hamiltonianCycle33.findHamiltonianCycle(intArray77);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray77);
        java.lang.Class<?> wildcardClass83 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test4521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4521");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test4522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4522");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test4523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4523");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        boolean boolean22 = hamiltonianCycle0.isPathFound(0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test4524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4524");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean42 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean44 = hamiltonianCycle0.isPresent((-1));
        boolean boolean46 = hamiltonianCycle0.isPresent(10);
        boolean boolean48 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test4525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4525");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray34);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test4526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4526");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle23.isPresent((int) (byte) 1);
        boolean boolean47 = hamiltonianCycle23.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean50 = hamiltonianCycle48.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        boolean boolean63 = hamiltonianCycle51.isPresent((int) (short) 10);
        int[] intArray69 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray75 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray81 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray87 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray88 = new int[][] { intArray69, intArray75, intArray81, intArray87 };
        int[] intArray89 = hamiltonianCycle51.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle48.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle23.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean96 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test4527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4527");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test4528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4528");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test4529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4529");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test4530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4530");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent((int) (byte) 10);
        boolean boolean47 = hamiltonianCycle35.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent((int) (byte) 10);
        boolean boolean60 = hamiltonianCycle48.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle48.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle35.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test4531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4531");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean38 = hamiltonianCycle0.isPathFound(1);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean42 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test4532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4532");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test4533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4533");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) (short) 10);
        int[] intArray21 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray27 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray33 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray39 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray40 = new int[][] { intArray21, intArray27, intArray33, intArray39 };
        int[] intArray41 = hamiltonianCycle3.findHamiltonianCycle(intArray40);
        int[] intArray42 = hamiltonianCycle0.findHamiltonianCycle(intArray40);
        boolean boolean44 = hamiltonianCycle0.isPresent(0);
        boolean boolean46 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test4534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4534");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(1);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (byte) -1);
        java.lang.Class<?> wildcardClass61 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test4535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4535");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean58 = hamiltonianCycle0.isPresent(10);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test4536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4536");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean58 = hamiltonianCycle0.isPresent(100);
        boolean boolean60 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test4537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4537");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test4538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4538");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent(10);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean33 = hamiltonianCycle21.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        boolean boolean46 = hamiltonianCycle34.isPresent((int) '4');
        boolean boolean48 = hamiltonianCycle34.isPresent((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle34.isPathFound(1);
        boolean boolean52 = hamiltonianCycle34.isPresent(100);
        boolean boolean54 = hamiltonianCycle34.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray75 = new int[][] { intArray70, intArray74 };
        int[] intArray76 = hamiltonianCycle56.findHamiltonianCycle(intArray75);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle77 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[][] intArray84 = new int[][] { intArray80, intArray83 };
        int[] intArray85 = hamiltonianCycle77.findHamiltonianCycle(intArray84);
        int[] intArray86 = hamiltonianCycle56.findHamiltonianCycle(intArray84);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray84);
        int[] intArray88 = hamiltonianCycle34.findHamiltonianCycle(intArray84);
        int[] intArray89 = hamiltonianCycle21.findHamiltonianCycle(intArray84);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray84);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test4539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4539");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test4540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4540");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean19 = hamiltonianCycle17.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle20 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[][] intArray27 = new int[][] { intArray23, intArray26 };
        int[] intArray28 = hamiltonianCycle20.findHamiltonianCycle(intArray27);
        boolean boolean30 = hamiltonianCycle20.isPresent(0);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray39 = new int[][] { intArray34, intArray38 };
        int[] intArray40 = hamiltonianCycle20.findHamiltonianCycle(intArray39);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        int[] intArray50 = hamiltonianCycle20.findHamiltonianCycle(intArray48);
        boolean boolean52 = hamiltonianCycle20.isPresent((int) ' ');
        boolean boolean54 = hamiltonianCycle20.isPresent((int) (short) 10);
        boolean boolean56 = hamiltonianCycle20.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent((int) (byte) 10);
        boolean boolean69 = hamiltonianCycle57.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle57.findHamiltonianCycle(intArray77);
        int[] intArray80 = hamiltonianCycle20.findHamiltonianCycle(intArray77);
        int[] intArray81 = hamiltonianCycle17.findHamiltonianCycle(intArray77);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray77);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test4541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4541");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4542");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean82 = hamiltonianCycle0.isPresent(10);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test4543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4543");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean16 = hamiltonianCycle14.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray47 = new int[][] { intArray42, intArray46 };
        int[] intArray48 = hamiltonianCycle28.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle17.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle14.findHamiltonianCycle(intArray47);
        int[] intArray51 = hamiltonianCycle5.findHamiltonianCycle(intArray47);
        int[] intArray52 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test4544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4544");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent(0);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray77 = new int[][] { intArray72, intArray76 };
        int[] intArray78 = hamiltonianCycle58.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle47.findHamiltonianCycle(intArray77);
        int[] intArray80 = hamiltonianCycle26.findHamiltonianCycle(intArray77);
        int[] intArray81 = hamiltonianCycle25.findHamiltonianCycle(intArray77);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray77);
        boolean boolean84 = hamiltonianCycle0.isPresent(0);
        boolean boolean86 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test4545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4545");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPathFound(0);
        boolean boolean58 = hamiltonianCycle0.isPresent(1);
        boolean boolean60 = hamiltonianCycle0.isPresent(0);
        boolean boolean62 = hamiltonianCycle0.isPathFound(1);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass67 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test4546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4546");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test4547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4547");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test4548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4548");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray34);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test4549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4549");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPresent(100);
        boolean boolean72 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean74 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test4550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4550");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test4551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4551");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test4552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4552");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(1);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean58 = hamiltonianCycle0.isPresent(10);
        boolean boolean60 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test4553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4553");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        boolean boolean28 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle31 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean43 = hamiltonianCycle41.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent(0);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray74 = new int[][] { intArray69, intArray73 };
        int[] intArray75 = hamiltonianCycle55.findHamiltonianCycle(intArray74);
        int[] intArray76 = hamiltonianCycle44.findHamiltonianCycle(intArray74);
        int[] intArray77 = hamiltonianCycle41.findHamiltonianCycle(intArray74);
        int[] intArray78 = hamiltonianCycle32.findHamiltonianCycle(intArray74);
        int[] intArray79 = hamiltonianCycle31.findHamiltonianCycle(intArray74);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray74);
        boolean boolean82 = hamiltonianCycle0.isPresent((-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test4554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4554");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean54 = hamiltonianCycle0.isPresent(100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass69 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test4555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4555");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean6 = hamiltonianCycle0.isPresent(0);
        boolean boolean8 = hamiltonianCycle0.isPresent((-1));
        boolean boolean10 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test4556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4556");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test4557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4557");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle73 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[][] intArray80 = new int[][] { intArray76, intArray79 };
        int[] intArray81 = hamiltonianCycle73.findHamiltonianCycle(intArray80);
        boolean boolean83 = hamiltonianCycle73.isPresent(0);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray91 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray92 = new int[][] { intArray87, intArray91 };
        int[] intArray93 = hamiltonianCycle73.findHamiltonianCycle(intArray92);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray92);
        java.lang.Class<?> wildcardClass95 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test4558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4558");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent(100);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test4559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4559");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent(10);
        boolean boolean26 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test4560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4560");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        boolean boolean14 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle15.isPresent((int) (byte) 1);
        boolean boolean39 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean42 = hamiltonianCycle40.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent(0);
        boolean boolean55 = hamiltonianCycle43.isPresent((int) (short) 10);
        int[] intArray61 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray67 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray73 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray79 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray80 = new int[][] { intArray61, intArray67, intArray73, intArray79 };
        int[] intArray81 = hamiltonianCycle43.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle40.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle15.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test4561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4561");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test4562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4562");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4563");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test4564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4564");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent(1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test4565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4565");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray21 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray22 = new int[][] { intArray17, intArray21 };
        int[] intArray23 = hamiltonianCycle3.findHamiltonianCycle(intArray22);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        int[] intArray33 = hamiltonianCycle3.findHamiltonianCycle(intArray31);
        boolean boolean35 = hamiltonianCycle3.isPresent((int) ' ');
        boolean boolean37 = hamiltonianCycle3.isPresent((int) (short) 10);
        boolean boolean39 = hamiltonianCycle3.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle40.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        int[] intArray62 = hamiltonianCycle40.findHamiltonianCycle(intArray60);
        int[] intArray63 = hamiltonianCycle3.findHamiltonianCycle(intArray60);
        int[] intArray64 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
    }

    @Test
    public void test4566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4566");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        boolean boolean35 = hamiltonianCycle21.isPresent((int) (byte) 10);
        boolean boolean37 = hamiltonianCycle21.isPresent((int) (short) 0);
        boolean boolean39 = hamiltonianCycle21.isPresent((int) (short) 1);
        boolean boolean41 = hamiltonianCycle21.isPresent((-1));
        boolean boolean43 = hamiltonianCycle21.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent(0);
        boolean boolean56 = hamiltonianCycle44.isPresent(100);
        boolean boolean58 = hamiltonianCycle44.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle44.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle21.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test4567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4567");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test4568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4568");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPresent(0);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 0);
        java.lang.Class<?> wildcardClass51 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test4569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4569");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass19 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test4570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4570");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        boolean boolean44 = hamiltonianCycle32.isPresent(100);
        boolean boolean46 = hamiltonianCycle32.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        boolean boolean59 = hamiltonianCycle47.isPresent(100);
        boolean boolean61 = hamiltonianCycle47.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent(0);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray81 = new int[][] { intArray76, intArray80 };
        int[] intArray82 = hamiltonianCycle62.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle32.findHamiltonianCycle(intArray81);
        int[] intArray85 = hamiltonianCycle19.findHamiltonianCycle(intArray81);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        boolean boolean88 = hamiltonianCycle0.isPathFound((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test4571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4571");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test4572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4572");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(100);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent(0);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean44 = hamiltonianCycle0.isPresent((-1));
        boolean boolean46 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test4573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4573");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test4574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4574");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass35 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test4575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4575");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean26 = hamiltonianCycle0.isPresent(1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test4576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4576");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent(10);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test4577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4577");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle45.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean80 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean82 = hamiltonianCycle0.isPresent(0);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test4578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4578");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent(10);
        boolean boolean20 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4579");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        java.lang.Class<?> wildcardClass83 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test4580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4580");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent(100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4581");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        boolean boolean42 = hamiltonianCycle30.isPresent(100);
        boolean boolean44 = hamiltonianCycle30.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        boolean boolean57 = hamiltonianCycle45.isPresent(100);
        boolean boolean59 = hamiltonianCycle45.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[][] intArray67 = new int[][] { intArray63, intArray66 };
        int[] intArray68 = hamiltonianCycle60.findHamiltonianCycle(intArray67);
        boolean boolean70 = hamiltonianCycle60.isPresent(0);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray79 = new int[][] { intArray74, intArray78 };
        int[] intArray80 = hamiltonianCycle60.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle45.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle30.findHamiltonianCycle(intArray79);
        int[] intArray83 = hamiltonianCycle17.findHamiltonianCycle(intArray79);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        java.lang.Class<?> wildcardClass87 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test4582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4582");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean26 = hamiltonianCycle24.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        int[] intArray60 = hamiltonianCycle24.findHamiltonianCycle(intArray57);
        int[] intArray61 = hamiltonianCycle13.findHamiltonianCycle(intArray57);
        boolean boolean63 = hamiltonianCycle13.isPresent((int) (short) 10);
        boolean boolean65 = hamiltonianCycle13.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle13.findHamiltonianCycle(intArray73);
        int[] intArray76 = hamiltonianCycle0.findHamiltonianCycle(intArray73);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean80 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass81 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test4583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4583");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test4584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4584");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean52 = hamiltonianCycle0.isPresent(10);
        java.lang.Class<?> wildcardClass53 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test4585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4585");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test4586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4586");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray34);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean41 = hamiltonianCycle39.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        boolean boolean52 = hamiltonianCycle42.isPresent(0);
        boolean boolean54 = hamiltonianCycle42.isPresent((int) (short) 10);
        int[] intArray60 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray66 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray72 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray78 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray79 = new int[][] { intArray60, intArray66, intArray72, intArray78 };
        int[] intArray80 = hamiltonianCycle42.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle39.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        java.lang.Class<?> wildcardClass83 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test4587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4587");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent(10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        boolean boolean74 = hamiltonianCycle64.isPresent(0);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray83 = new int[][] { intArray78, intArray82 };
        int[] intArray84 = hamiltonianCycle64.findHamiltonianCycle(intArray83);
        int[] intArray85 = hamiltonianCycle53.findHamiltonianCycle(intArray83);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray83);
        boolean boolean88 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        java.lang.Class<?> wildcardClass89 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test4588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4588");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test4589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4589");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean26 = hamiltonianCycle0.isPresent(100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test4590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4590");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass21 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test4591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4591");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        int[] intArray59 = new int[] { (short) 1, (short) 0, 100, (byte) 0 };
        int[][] intArray60 = new int[][] { intArray59 };
        int[] intArray61 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        boolean boolean74 = hamiltonianCycle64.isPresent(0);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray83 = new int[][] { intArray78, intArray82 };
        int[] intArray84 = hamiltonianCycle64.findHamiltonianCycle(intArray83);
        int[] intArray85 = hamiltonianCycle0.findHamiltonianCycle(intArray83);
        boolean boolean87 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 0, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test4592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4592");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(100);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent(0);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test4593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4593");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(0);
        boolean boolean36 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test4594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4594");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((-1));
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        boolean boolean53 = hamiltonianCycle19.isPathFound(0);
        boolean boolean55 = hamiltonianCycle19.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle19.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray63);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean70 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test4595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4595");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean58 = hamiltonianCycle0.isPresent(10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent(0);
        boolean boolean71 = hamiltonianCycle59.isPresent(100);
        boolean boolean73 = hamiltonianCycle59.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle74 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[][] intArray81 = new int[][] { intArray77, intArray80 };
        int[] intArray82 = hamiltonianCycle74.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle59.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
    }

    @Test
    public void test4596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4596");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean16 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test4597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4597");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 0);
        int[][] intArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray12 = hamiltonianCycle0.findHamiltonianCycle(intArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test4598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4598");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean27 = hamiltonianCycle25.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) (short) 10);
        int[] intArray46 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray52 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray58 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray64 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray65 = new int[][] { intArray46, intArray52, intArray58, intArray64 };
        int[] intArray66 = hamiltonianCycle28.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle25.findHamiltonianCycle(intArray65);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray65);
        boolean boolean70 = hamiltonianCycle0.isPresent(0);
        java.lang.Class<?> wildcardClass71 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test4599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4599");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean90 = hamiltonianCycle0.isPathFound(0);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test4600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4600");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(100);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent(0);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test4601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4601");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean26 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass27 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test4602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4602");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean28 = hamiltonianCycle0.isPathFound(0);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean32 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test4603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4603");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean27 = hamiltonianCycle25.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        boolean boolean40 = hamiltonianCycle28.isPresent((int) (short) 10);
        int[] intArray46 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray52 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray58 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray64 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray65 = new int[][] { intArray46, intArray52, intArray58, intArray64 };
        int[] intArray66 = hamiltonianCycle28.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle25.findHamiltonianCycle(intArray65);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray65);
        boolean boolean70 = hamiltonianCycle0.isPresent(0);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test4604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4604");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) '4');
        boolean boolean33 = hamiltonianCycle19.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean45 = hamiltonianCycle43.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle43.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray76);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray76);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test4605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4605");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(1);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean42 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean44 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test4606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4606");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        boolean boolean26 = hamiltonianCycle0.isPresent((-1));
        boolean boolean28 = hamiltonianCycle0.isPresent((-1));
        boolean boolean30 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test4607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4607");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        boolean boolean49 = hamiltonianCycle37.isPresent(100);
        boolean boolean51 = hamiltonianCycle37.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle37.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
    }

    @Test
    public void test4608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4608");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(100);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test4609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4609");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent(0);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test4610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4610");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean50 = hamiltonianCycle0.isPathFound(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test4611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4611");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean29 = hamiltonianCycle17.isPresent((int) '4');
        boolean boolean31 = hamiltonianCycle17.isPresent(1);
        boolean boolean33 = hamiltonianCycle17.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle17.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        int[] intArray57 = hamiltonianCycle17.findHamiltonianCycle(intArray55);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray55);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
    }

    @Test
    public void test4612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4612");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean58 = hamiltonianCycle0.isPathFound(1);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test4613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4613");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        boolean boolean22 = hamiltonianCycle0.isPresent(1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4614");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[][] intArray40 = new int[][] { intArray36, intArray39 };
        int[] intArray41 = hamiltonianCycle33.findHamiltonianCycle(intArray40);
        boolean boolean43 = hamiltonianCycle33.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent(0);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray63 = new int[][] { intArray58, intArray62 };
        int[] intArray64 = hamiltonianCycle44.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle33.findHamiltonianCycle(intArray63);
        int[] intArray66 = hamiltonianCycle0.findHamiltonianCycle(intArray63);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean70 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test4615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4615");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean28 = hamiltonianCycle26.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle29 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[][] intArray36 = new int[][] { intArray32, intArray35 };
        int[] intArray37 = hamiltonianCycle29.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle29.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray59 = new int[][] { intArray54, intArray58 };
        int[] intArray60 = hamiltonianCycle40.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle29.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle26.findHamiltonianCycle(intArray59);
        int[] intArray63 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        boolean boolean65 = hamiltonianCycle15.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle15.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test4616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4616");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent(0);
        boolean boolean39 = hamiltonianCycle27.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean53 = hamiltonianCycle51.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[][] intArray61 = new int[][] { intArray57, intArray60 };
        int[] intArray62 = hamiltonianCycle54.findHamiltonianCycle(intArray61);
        boolean boolean64 = hamiltonianCycle54.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle65 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[][] intArray72 = new int[][] { intArray68, intArray71 };
        int[] intArray73 = hamiltonianCycle65.findHamiltonianCycle(intArray72);
        boolean boolean75 = hamiltonianCycle65.isPresent(0);
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray84 = new int[][] { intArray79, intArray83 };
        int[] intArray85 = hamiltonianCycle65.findHamiltonianCycle(intArray84);
        int[] intArray86 = hamiltonianCycle54.findHamiltonianCycle(intArray84);
        int[] intArray87 = hamiltonianCycle51.findHamiltonianCycle(intArray84);
        int[] intArray88 = hamiltonianCycle40.findHamiltonianCycle(intArray84);
        int[] intArray89 = hamiltonianCycle27.findHamiltonianCycle(intArray84);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray84);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
    }

    @Test
    public void test4617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4617");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((-1));
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        boolean boolean51 = hamiltonianCycle19.isPresent((int) ' ');
        boolean boolean53 = hamiltonianCycle19.isPresent((int) (short) 10);
        boolean boolean55 = hamiltonianCycle19.isPresent((int) (byte) 0);
        boolean boolean57 = hamiltonianCycle19.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent(0);
        boolean boolean70 = hamiltonianCycle58.isPresent(100);
        boolean boolean72 = hamiltonianCycle58.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle73 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[][] intArray80 = new int[][] { intArray76, intArray79 };
        int[] intArray81 = hamiltonianCycle73.findHamiltonianCycle(intArray80);
        boolean boolean83 = hamiltonianCycle73.isPresent(0);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray91 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray92 = new int[][] { intArray87, intArray91 };
        int[] intArray93 = hamiltonianCycle73.findHamiltonianCycle(intArray92);
        int[] intArray94 = hamiltonianCycle58.findHamiltonianCycle(intArray92);
        int[] intArray95 = hamiltonianCycle19.findHamiltonianCycle(intArray92);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray92);
        java.lang.Class<?> wildcardClass97 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test4618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4618");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean40 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean44 = hamiltonianCycle0.isPresent((int) (byte) 0);
        java.lang.Class<?> wildcardClass45 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test4619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4619");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent(0);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray65 = new int[][] { intArray60, intArray64 };
        int[] intArray66 = hamiltonianCycle46.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle35.findHamiltonianCycle(intArray65);
        boolean boolean69 = hamiltonianCycle35.isPathFound((int) (byte) 0);
        boolean boolean71 = hamiltonianCycle35.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle35.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        boolean boolean84 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean88 = hamiltonianCycle0.isPresent(100);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) ' ');
        java.lang.Class<?> wildcardClass91 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test4620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4620");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean74 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        java.lang.Class<?> wildcardClass75 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test4621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4621");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test4622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4622");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean25 = hamiltonianCycle23.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        boolean boolean38 = hamiltonianCycle26.isPresent((int) (short) 10);
        int[] intArray44 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray50 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray56 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray62 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray63 = new int[][] { intArray44, intArray50, intArray56, intArray62 };
        int[] intArray64 = hamiltonianCycle26.findHamiltonianCycle(intArray63);
        int[] intArray65 = hamiltonianCycle23.findHamiltonianCycle(intArray63);
        boolean boolean67 = hamiltonianCycle23.isPresent(0);
        boolean boolean69 = hamiltonianCycle23.isPathFound((int) (byte) 0);
        boolean boolean71 = hamiltonianCycle23.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent(0);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray91 = new int[][] { intArray86, intArray90 };
        int[] intArray92 = hamiltonianCycle72.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle23.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = hamiltonianCycle0.isPathFound((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
    }

    @Test
    public void test4623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4623");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean47 = hamiltonianCycle45.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent(0);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray78 = new int[][] { intArray73, intArray77 };
        int[] intArray79 = hamiltonianCycle59.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle48.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle45.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray83 = hamiltonianCycle21.findHamiltonianCycle(intArray78);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean92 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test4624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4624");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent(0);
        boolean boolean18 = hamiltonianCycle0.isPresent(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        boolean boolean62 = hamiltonianCycle52.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle63 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray66 = new int[] { (short) -1, (short) 0 };
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[][] intArray70 = new int[][] { intArray66, intArray69 };
        int[] intArray71 = hamiltonianCycle63.findHamiltonianCycle(intArray70);
        boolean boolean73 = hamiltonianCycle63.isPresent(0);
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray82 = new int[][] { intArray77, intArray81 };
        int[] intArray83 = hamiltonianCycle63.findHamiltonianCycle(intArray82);
        int[] intArray84 = hamiltonianCycle52.findHamiltonianCycle(intArray82);
        int[] intArray85 = hamiltonianCycle19.findHamiltonianCycle(intArray82);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray82);
        boolean boolean88 = hamiltonianCycle0.isPathFound(1);
        boolean boolean90 = hamiltonianCycle0.isPresent(0);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) 'a');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test4625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4625");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test4626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4626");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean56 = hamiltonianCycle0.isPathFound(0);
        boolean boolean58 = hamiltonianCycle0.isPresent(1);
        boolean boolean60 = hamiltonianCycle0.isPresent(0);
        boolean boolean62 = hamiltonianCycle0.isPathFound(1);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent(0);
        boolean boolean68 = hamiltonianCycle0.isPresent(100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test4627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4627");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle73 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[] intArray79 = new int[] { (short) -1, (short) 0 };
        int[][] intArray80 = new int[][] { intArray76, intArray79 };
        int[] intArray81 = hamiltonianCycle73.findHamiltonianCycle(intArray80);
        boolean boolean83 = hamiltonianCycle73.isPresent(0);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray91 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray92 = new int[][] { intArray87, intArray91 };
        int[] intArray93 = hamiltonianCycle73.findHamiltonianCycle(intArray92);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray92);
        boolean boolean96 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test4628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4628");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray36 = new int[][] { intArray31, intArray35 };
        int[] intArray37 = hamiltonianCycle17.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle17.isPresent((int) (byte) 1);
        boolean boolean41 = hamiltonianCycle17.isPresent((int) (short) 10);
        boolean boolean43 = hamiltonianCycle17.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean46 = hamiltonianCycle44.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent(0);
        boolean boolean59 = hamiltonianCycle47.isPresent((int) (short) 10);
        int[] intArray65 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray71 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray77 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray83 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray84 = new int[][] { intArray65, intArray71, intArray77, intArray83 };
        int[] intArray85 = hamiltonianCycle47.findHamiltonianCycle(intArray84);
        int[] intArray86 = hamiltonianCycle44.findHamiltonianCycle(intArray84);
        int[] intArray87 = hamiltonianCycle17.findHamiltonianCycle(intArray84);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray84);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test4629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4629");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean70 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test4630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4630");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4631");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4632");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPresent((-1));
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test4633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4633");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray34);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean42 = hamiltonianCycle0.isPresent(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test4634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4634");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        boolean boolean57 = hamiltonianCycle45.isPresent(100);
        boolean boolean59 = hamiltonianCycle45.isPathFound(0);
        boolean boolean61 = hamiltonianCycle45.isPresent((int) (byte) 1);
        boolean boolean63 = hamiltonianCycle45.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        boolean boolean74 = hamiltonianCycle64.isPresent(0);
        boolean boolean76 = hamiltonianCycle64.isPresent(100);
        boolean boolean78 = hamiltonianCycle64.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle79 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray82 = new int[] { (short) -1, (short) 0 };
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[][] intArray86 = new int[][] { intArray82, intArray85 };
        int[] intArray87 = hamiltonianCycle79.findHamiltonianCycle(intArray86);
        int[] intArray88 = hamiltonianCycle64.findHamiltonianCycle(intArray86);
        int[] intArray89 = hamiltonianCycle45.findHamiltonianCycle(intArray86);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray86);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
    }

    @Test
    public void test4635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4635");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPathFound(0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(0);
        boolean boolean18 = hamiltonianCycle0.isPresent((-1));
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPresent((int) (short) 0);
        boolean boolean39 = hamiltonianCycle23.isPresent((int) (short) 100);
        boolean boolean41 = hamiltonianCycle23.isPathFound((int) (byte) 0);
        boolean boolean43 = hamiltonianCycle23.isPresent((int) (short) 0);
        boolean boolean45 = hamiltonianCycle23.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        boolean boolean80 = hamiltonianCycle46.isPathFound(0);
        boolean boolean82 = hamiltonianCycle46.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle83 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[] intArray89 = new int[] { (short) -1, (short) 0 };
        int[][] intArray90 = new int[][] { intArray86, intArray89 };
        int[] intArray91 = hamiltonianCycle83.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle46.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle23.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
    }

    @Test
    public void test4636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4636");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test4637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4637");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test4638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4638");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent(0);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray65 = new int[][] { intArray60, intArray64 };
        int[] intArray66 = hamiltonianCycle46.findHamiltonianCycle(intArray65);
        int[] intArray67 = hamiltonianCycle35.findHamiltonianCycle(intArray65);
        boolean boolean69 = hamiltonianCycle35.isPathFound((int) (byte) 0);
        boolean boolean71 = hamiltonianCycle35.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        int[] intArray81 = hamiltonianCycle35.findHamiltonianCycle(intArray79);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray79);
        boolean boolean84 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean88 = hamiltonianCycle0.isPresent(100);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test4639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4639");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent(0);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) -1);
        java.lang.Class<?> wildcardClass41 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test4640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4640");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPathFound(1);
        boolean boolean22 = hamiltonianCycle0.isPathFound(0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 10);
        java.lang.Class<?> wildcardClass25 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test4641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4641");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) 'a');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test4642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4642");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean14 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test4643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4643");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean24 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass25 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test4644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4644");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle38 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[][] intArray45 = new int[][] { intArray41, intArray44 };
        int[] intArray46 = hamiltonianCycle38.findHamiltonianCycle(intArray45);
        boolean boolean48 = hamiltonianCycle38.isPresent(0);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray57 = new int[][] { intArray52, intArray56 };
        int[] intArray58 = hamiltonianCycle38.findHamiltonianCycle(intArray57);
        int[] intArray59 = hamiltonianCycle27.findHamiltonianCycle(intArray57);
        boolean boolean61 = hamiltonianCycle27.isPathFound(0);
        boolean boolean63 = hamiltonianCycle27.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle64 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[] intArray70 = new int[] { (short) -1, (short) 0 };
        int[][] intArray71 = new int[][] { intArray67, intArray70 };
        int[] intArray72 = hamiltonianCycle64.findHamiltonianCycle(intArray71);
        int[] intArray73 = hamiltonianCycle27.findHamiltonianCycle(intArray71);
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray71);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test4645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4645");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound(0);
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4646");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test4647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4647");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        boolean boolean29 = hamiltonianCycle17.isPathFound(0);
        boolean boolean31 = hamiltonianCycle17.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        boolean boolean42 = hamiltonianCycle32.isPresent(0);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray51 = new int[][] { intArray46, intArray50 };
        int[] intArray52 = hamiltonianCycle32.findHamiltonianCycle(intArray51);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        int[] intArray62 = hamiltonianCycle32.findHamiltonianCycle(intArray60);
        int[] intArray63 = hamiltonianCycle17.findHamiltonianCycle(intArray60);
        int[] intArray64 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test4648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4648");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test4649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4649");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent(10);
        boolean boolean58 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test4650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4650");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        boolean boolean28 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test4651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4651");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test4652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4652");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean50 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test4653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4653");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray60);
        boolean boolean64 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test4654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4654");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray46);
        boolean boolean50 = hamiltonianCycle0.isPresent(10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean54 = hamiltonianCycle0.isPresent(100);
        boolean boolean56 = hamiltonianCycle0.isPathFound(0);
        boolean boolean58 = hamiltonianCycle0.isPathFound(1);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass61 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test4655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4655");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray46);
        boolean boolean50 = hamiltonianCycle0.isPresent(10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean54 = hamiltonianCycle0.isPresent(100);
        boolean boolean56 = hamiltonianCycle0.isPathFound(0);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean60 = hamiltonianCycle0.isPresent(1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound(0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean68 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test4656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4656");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle30 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[][] intArray37 = new int[][] { intArray33, intArray36 };
        int[] intArray38 = hamiltonianCycle30.findHamiltonianCycle(intArray37);
        boolean boolean40 = hamiltonianCycle30.isPresent(0);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray49 = new int[][] { intArray44, intArray48 };
        int[] intArray50 = hamiltonianCycle30.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle19.findHamiltonianCycle(intArray49);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean54 = hamiltonianCycle52.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle52.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle19.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean92 = hamiltonianCycle0.isPresent(10);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test4657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4657");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle23.isPresent((int) (byte) 1);
        boolean boolean47 = hamiltonianCycle23.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean50 = hamiltonianCycle48.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        boolean boolean63 = hamiltonianCycle51.isPresent((int) (short) 10);
        int[] intArray69 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray75 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray81 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray87 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray88 = new int[][] { intArray69, intArray75, intArray81, intArray87 };
        int[] intArray89 = hamiltonianCycle51.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle48.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle23.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean94 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean96 = hamiltonianCycle0.isPresent(10);
        boolean boolean98 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test4658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4658");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean72 = hamiltonianCycle0.isPresent(1);
        boolean boolean74 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass75 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test4659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4659");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent(0);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) (short) 10);
        int[] intArray21 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray27 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray33 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray39 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray40 = new int[][] { intArray21, intArray27, intArray33, intArray39 };
        int[] intArray41 = hamiltonianCycle3.findHamiltonianCycle(intArray40);
        int[] intArray42 = hamiltonianCycle0.findHamiltonianCycle(intArray40);
        boolean boolean44 = hamiltonianCycle0.isPresent(0);
        boolean boolean46 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 1);
        java.lang.Class<?> wildcardClass49 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test4660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4660");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle13.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean84 = hamiltonianCycle0.isPathFound(0);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean88 = hamiltonianCycle0.isPresent(100);
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test4661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4661");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 0);
        java.lang.Class<?> wildcardClass27 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test4662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4662");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle2 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray5 = new int[] { (short) -1, (short) 0 };
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[][] intArray9 = new int[][] { intArray5, intArray8 };
        int[] intArray10 = hamiltonianCycle2.findHamiltonianCycle(intArray9);
        boolean boolean12 = hamiltonianCycle2.isPresent(0);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray20 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray21 = new int[][] { intArray16, intArray20 };
        int[] intArray22 = hamiltonianCycle2.findHamiltonianCycle(intArray21);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle2.findHamiltonianCycle(intArray30);
        int[] intArray33 = hamiltonianCycle1.findHamiltonianCycle(intArray30);
        int[] intArray34 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test4663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4663");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean70 = hamiltonianCycle0.isPresent(0);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test4664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4664");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent(1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) 'a');
        int[][] intArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray28 = hamiltonianCycle0.findHamiltonianCycle(intArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test4665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4665");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test4666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4666");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean49 = hamiltonianCycle47.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean88 = hamiltonianCycle0.isPresent(0);
        boolean boolean90 = hamiltonianCycle0.isPresent(100);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test4667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4667");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent(10);
        boolean boolean58 = hamiltonianCycle0.isPresent(100);
        boolean boolean60 = hamiltonianCycle0.isPresent(0);
        boolean boolean62 = hamiltonianCycle0.isPresent(1);
        boolean boolean64 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass65 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test4668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4668");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean68 = hamiltonianCycle0.isPathFound(1);
        boolean boolean70 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test4669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4669");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean28 = hamiltonianCycle0.isPresent(1);
        java.lang.Class<?> wildcardClass29 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test4670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4670");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        int[] intArray18 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray24 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray30 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[] intArray36 = new int[] { ' ', (short) 10, ' ', 'a', 100 };
        int[][] intArray37 = new int[][] { intArray18, intArray24, intArray30, intArray36 };
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray37);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle39 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[][] intArray46 = new int[][] { intArray42, intArray45 };
        int[] intArray47 = hamiltonianCycle39.findHamiltonianCycle(intArray46);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray46);
        boolean boolean50 = hamiltonianCycle0.isPresent(100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test4671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4671");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean62 = hamiltonianCycle0.isPathFound(0);
        boolean boolean64 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test4672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4672");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test4673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4673");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        boolean boolean28 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test4674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4674");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean49 = hamiltonianCycle47.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        int[] intArray82 = hamiltonianCycle50.findHamiltonianCycle(intArray80);
        int[] intArray83 = hamiltonianCycle47.findHamiltonianCycle(intArray80);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray80);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean88 = hamiltonianCycle0.isPresent(0);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean92 = hamiltonianCycle0.isPresent((-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test4675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4675");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        int[] intArray58 = hamiltonianCycle26.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle26.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle13.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test4676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4676");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        boolean boolean74 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test4677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4677");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean70 = hamiltonianCycle0.isPresent((-1));
        boolean boolean72 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test4678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4678");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean57 = hamiltonianCycle55.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean60 = hamiltonianCycle58.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle72 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[][] intArray79 = new int[][] { intArray75, intArray78 };
        int[] intArray80 = hamiltonianCycle72.findHamiltonianCycle(intArray79);
        boolean boolean82 = hamiltonianCycle72.isPresent(0);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray91 = new int[][] { intArray86, intArray90 };
        int[] intArray92 = hamiltonianCycle72.findHamiltonianCycle(intArray91);
        int[] intArray93 = hamiltonianCycle61.findHamiltonianCycle(intArray91);
        int[] intArray94 = hamiltonianCycle58.findHamiltonianCycle(intArray91);
        int[] intArray95 = hamiltonianCycle55.findHamiltonianCycle(intArray91);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray91);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
    }

    @Test
    public void test4679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4679");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean62 = hamiltonianCycle0.isPathFound(0);
        boolean boolean64 = hamiltonianCycle0.isPathFound(1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean68 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean70 = hamiltonianCycle0.isPresent(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test4680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4680");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean57 = hamiltonianCycle55.isPresent((int) (short) -1);
        boolean boolean59 = hamiltonianCycle55.isPresent((int) (short) 0);
        boolean boolean61 = hamiltonianCycle55.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent((int) (byte) 10);
        boolean boolean74 = hamiltonianCycle62.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle75 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray78 = new int[] { (short) -1, (short) 0 };
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[][] intArray82 = new int[][] { intArray78, intArray81 };
        int[] intArray83 = hamiltonianCycle75.findHamiltonianCycle(intArray82);
        int[] intArray84 = hamiltonianCycle62.findHamiltonianCycle(intArray82);
        int[] intArray85 = hamiltonianCycle55.findHamiltonianCycle(intArray82);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray82);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test4681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4681");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle10 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle32 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[][] intArray39 = new int[][] { intArray35, intArray38 };
        int[] intArray40 = hamiltonianCycle32.findHamiltonianCycle(intArray39);
        int[] intArray41 = hamiltonianCycle11.findHamiltonianCycle(intArray39);
        int[] intArray42 = hamiltonianCycle10.findHamiltonianCycle(intArray39);
        int[] intArray43 = hamiltonianCycle9.findHamiltonianCycle(intArray39);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray39);
        java.lang.Class<?> wildcardClass45 = intArray44.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test4682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4682");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) '4');
        boolean boolean17 = hamiltonianCycle3.isPresent((int) (byte) 0);
        boolean boolean19 = hamiltonianCycle3.isPathFound(1);
        boolean boolean21 = hamiltonianCycle3.isPresent(100);
        boolean boolean23 = hamiltonianCycle3.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle25.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle24.findHamiltonianCycle(intArray76);
        int[] intArray81 = hamiltonianCycle3.findHamiltonianCycle(intArray76);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = hamiltonianCycle0.isPathFound(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test4683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4683");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean36 = hamiltonianCycle0.isPresent(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean40 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean42 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test4684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4684");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean38 = hamiltonianCycle0.isPathFound(1);
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test4685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4685");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test4686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4686");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test4687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4687");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPathFound((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test4688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4688");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent(1);
        boolean boolean26 = hamiltonianCycle0.isPresent((-1));
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean30 = hamiltonianCycle0.isPresent((-1));
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test4689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4689");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPathFound(0);
        boolean boolean18 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test4690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4690");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        boolean boolean56 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent((int) (byte) 10);
        boolean boolean69 = hamiltonianCycle57.isPresent((int) '4');
        boolean boolean71 = hamiltonianCycle57.isPresent((int) (byte) 0);
        boolean boolean73 = hamiltonianCycle57.isPathFound(1);
        boolean boolean75 = hamiltonianCycle57.isPresent((int) '#');
        boolean boolean77 = hamiltonianCycle57.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle78 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[] intArray84 = new int[] { (short) -1, (short) 0 };
        int[][] intArray85 = new int[][] { intArray81, intArray84 };
        int[] intArray86 = hamiltonianCycle78.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle57.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        java.lang.Class<?> wildcardClass89 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test4691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4691");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        int[] intArray31 = hamiltonianCycle1.findHamiltonianCycle(intArray29);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray29);
        boolean boolean34 = hamiltonianCycle0.isPresent(100);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = hamiltonianCycle0.isPathFound((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test4692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4692");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        boolean boolean52 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        boolean boolean65 = hamiltonianCycle53.isPresent(100);
        boolean boolean67 = hamiltonianCycle53.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle68 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray71 = new int[] { (short) -1, (short) 0 };
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[][] intArray75 = new int[][] { intArray71, intArray74 };
        int[] intArray76 = hamiltonianCycle68.findHamiltonianCycle(intArray75);
        boolean boolean78 = hamiltonianCycle68.isPresent(0);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray87 = new int[][] { intArray82, intArray86 };
        int[] intArray88 = hamiltonianCycle68.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle53.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        boolean boolean92 = hamiltonianCycle0.isPresent(100);
        boolean boolean94 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test4693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4693");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean32 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) ' ');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent((int) (byte) 10);
        boolean boolean47 = hamiltonianCycle35.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent((int) (byte) 10);
        boolean boolean60 = hamiltonianCycle48.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[] intArray67 = new int[] { (short) -1, (short) 0 };
        int[][] intArray68 = new int[][] { intArray64, intArray67 };
        int[] intArray69 = hamiltonianCycle61.findHamiltonianCycle(intArray68);
        boolean boolean71 = hamiltonianCycle61.isPresent(0);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray80 = new int[][] { intArray75, intArray79 };
        int[] intArray81 = hamiltonianCycle61.findHamiltonianCycle(intArray80);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle82 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray85 = new int[] { (short) -1, (short) 0 };
        int[] intArray88 = new int[] { (short) -1, (short) 0 };
        int[][] intArray89 = new int[][] { intArray85, intArray88 };
        int[] intArray90 = hamiltonianCycle82.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle61.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle48.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle35.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        java.lang.Class<?> wildcardClass95 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test4694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4694");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent(10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        int[] intArray53 = hamiltonianCycle23.findHamiltonianCycle(intArray51);
        int[] intArray54 = hamiltonianCycle22.findHamiltonianCycle(intArray51);
        int[] intArray55 = hamiltonianCycle21.findHamiltonianCycle(intArray51);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        boolean boolean68 = hamiltonianCycle56.isPresent(100);
        boolean boolean70 = hamiltonianCycle56.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        boolean boolean81 = hamiltonianCycle71.isPresent(0);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray90 = new int[][] { intArray85, intArray89 };
        int[] intArray91 = hamiltonianCycle71.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle56.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle21.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
    }

    @Test
    public void test4695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4695");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent(0);
        boolean boolean44 = hamiltonianCycle0.isPresent(100);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean48 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean50 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test4696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4696");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPathFound(1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent(1);
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test4697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4697");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean6 = hamiltonianCycle0.isPresent((int) (short) -1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle7 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray10 = new int[] { (short) -1, (short) 0 };
        int[] intArray13 = new int[] { (short) -1, (short) 0 };
        int[][] intArray14 = new int[][] { intArray10, intArray13 };
        int[] intArray15 = hamiltonianCycle7.findHamiltonianCycle(intArray14);
        boolean boolean17 = hamiltonianCycle7.isPresent((int) (byte) 10);
        boolean boolean19 = hamiltonianCycle7.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle20 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[][] intArray27 = new int[][] { intArray23, intArray26 };
        int[] intArray28 = hamiltonianCycle20.findHamiltonianCycle(intArray27);
        boolean boolean30 = hamiltonianCycle20.isPresent(0);
        boolean boolean32 = hamiltonianCycle20.isPresent((int) '4');
        boolean boolean34 = hamiltonianCycle20.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean46 = hamiltonianCycle44.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        boolean boolean57 = hamiltonianCycle47.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent(0);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray77 = new int[][] { intArray72, intArray76 };
        int[] intArray78 = hamiltonianCycle58.findHamiltonianCycle(intArray77);
        int[] intArray79 = hamiltonianCycle47.findHamiltonianCycle(intArray77);
        int[] intArray80 = hamiltonianCycle44.findHamiltonianCycle(intArray77);
        int[] intArray81 = hamiltonianCycle35.findHamiltonianCycle(intArray77);
        int[] intArray82 = hamiltonianCycle20.findHamiltonianCycle(intArray77);
        int[] intArray83 = hamiltonianCycle7.findHamiltonianCycle(intArray77);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray77);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
    }

    @Test
    public void test4698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4698");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPathFound(0);
        boolean boolean62 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = hamiltonianCycle0.isPathFound((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test4699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4699");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        boolean boolean74 = hamiltonianCycle0.isPresent(10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test4700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4700");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent(0);
        boolean boolean58 = hamiltonianCycle0.isPathFound(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test4701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4701");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean92 = hamiltonianCycle0.isPresent((-1));
        java.lang.Class<?> wildcardClass93 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test4702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4702");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent(10);
        boolean boolean58 = hamiltonianCycle0.isPresent(100);
        boolean boolean60 = hamiltonianCycle0.isPresent(0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) '4');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test4703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4703");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean24 = hamiltonianCycle0.isPresent(0);
        boolean boolean26 = hamiltonianCycle0.isPresent(10);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = hamiltonianCycle0.isPathFound((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test4704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4704");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent(1);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 1);
        java.lang.Class<?> wildcardClass91 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test4705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4705");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPathFound(0);
        boolean boolean40 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test4706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4706");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean26 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        java.lang.Class<?> wildcardClass27 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test4707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4707");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean22 = hamiltonianCycle0.isPathFound(0);
        int[][] intArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray24 = hamiltonianCycle0.findHamiltonianCycle(intArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4708");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean20 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test4709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4709");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPathFound(1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent(1);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test4710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4710");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle35 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray38 = new int[] { (short) -1, (short) 0 };
        int[] intArray41 = new int[] { (short) -1, (short) 0 };
        int[][] intArray42 = new int[][] { intArray38, intArray41 };
        int[] intArray43 = hamiltonianCycle35.findHamiltonianCycle(intArray42);
        boolean boolean45 = hamiltonianCycle35.isPresent(0);
        boolean boolean47 = hamiltonianCycle35.isPresent(100);
        boolean boolean49 = hamiltonianCycle35.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent(0);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray69 = new int[][] { intArray64, intArray68 };
        int[] intArray70 = hamiltonianCycle50.findHamiltonianCycle(intArray69);
        int[] intArray71 = hamiltonianCycle35.findHamiltonianCycle(intArray69);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray69);
        boolean boolean74 = hamiltonianCycle0.isPresent(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test4711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4711");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 10);
        int[][] intArray63 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray64 = hamiltonianCycle0.findHamiltonianCycle(intArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test4712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4712");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray12 = new int[] { (short) -1, (short) 0 };
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[][] intArray16 = new int[][] { intArray12, intArray15 };
        int[] intArray17 = hamiltonianCycle9.findHamiltonianCycle(intArray16);
        boolean boolean19 = hamiltonianCycle9.isPresent((int) (byte) 10);
        boolean boolean21 = hamiltonianCycle9.isPresent((int) '4');
        boolean boolean23 = hamiltonianCycle9.isPresent((int) (byte) 0);
        boolean boolean25 = hamiltonianCycle9.isPathFound(1);
        boolean boolean27 = hamiltonianCycle9.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle28 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[] intArray34 = new int[] { (short) -1, (short) 0 };
        int[][] intArray35 = new int[][] { intArray31, intArray34 };
        int[] intArray36 = hamiltonianCycle28.findHamiltonianCycle(intArray35);
        boolean boolean38 = hamiltonianCycle28.isPresent(0);
        boolean boolean40 = hamiltonianCycle28.isPresent(100);
        boolean boolean42 = hamiltonianCycle28.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[][] intArray50 = new int[][] { intArray46, intArray49 };
        int[] intArray51 = hamiltonianCycle43.findHamiltonianCycle(intArray50);
        boolean boolean53 = hamiltonianCycle43.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle54 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[][] intArray61 = new int[][] { intArray57, intArray60 };
        int[] intArray62 = hamiltonianCycle54.findHamiltonianCycle(intArray61);
        boolean boolean64 = hamiltonianCycle54.isPresent(0);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray73 = new int[][] { intArray68, intArray72 };
        int[] intArray74 = hamiltonianCycle54.findHamiltonianCycle(intArray73);
        int[] intArray75 = hamiltonianCycle43.findHamiltonianCycle(intArray73);
        boolean boolean77 = hamiltonianCycle43.isPathFound(0);
        boolean boolean79 = hamiltonianCycle43.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle80 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray83 = new int[] { (short) -1, (short) 0 };
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[][] intArray87 = new int[][] { intArray83, intArray86 };
        int[] intArray88 = hamiltonianCycle80.findHamiltonianCycle(intArray87);
        int[] intArray89 = hamiltonianCycle43.findHamiltonianCycle(intArray87);
        int[] intArray90 = hamiltonianCycle28.findHamiltonianCycle(intArray87);
        int[] intArray91 = hamiltonianCycle9.findHamiltonianCycle(intArray87);
        int[] intArray92 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
        boolean boolean94 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (short) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test4713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4713");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle24 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[][] intArray31 = new int[][] { intArray27, intArray30 };
        int[] intArray32 = hamiltonianCycle24.findHamiltonianCycle(intArray31);
        boolean boolean34 = hamiltonianCycle24.isPresent(0);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray43 = new int[][] { intArray38, intArray42 };
        int[] intArray44 = hamiltonianCycle24.findHamiltonianCycle(intArray43);
        int[] intArray45 = hamiltonianCycle13.findHamiltonianCycle(intArray43);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle13.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean88 = hamiltonianCycle0.isPresent(0);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test4714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4714");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean28 = hamiltonianCycle26.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle29 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[] intArray35 = new int[] { (short) -1, (short) 0 };
        int[][] intArray36 = new int[][] { intArray32, intArray35 };
        int[] intArray37 = hamiltonianCycle29.findHamiltonianCycle(intArray36);
        boolean boolean39 = hamiltonianCycle29.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent(0);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray59 = new int[][] { intArray54, intArray58 };
        int[] intArray60 = hamiltonianCycle40.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle29.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle26.findHamiltonianCycle(intArray59);
        int[] intArray63 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        boolean boolean65 = hamiltonianCycle15.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle15.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test4715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4715");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent(0);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray34 = new int[][] { intArray29, intArray33 };
        int[] intArray35 = hamiltonianCycle15.findHamiltonianCycle(intArray34);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray34);
        boolean boolean38 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle41 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray44 = new int[] { (short) -1, (short) 0 };
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[][] intArray48 = new int[][] { intArray44, intArray47 };
        int[] intArray49 = hamiltonianCycle41.findHamiltonianCycle(intArray48);
        boolean boolean51 = hamiltonianCycle41.isPresent(0);
        boolean boolean53 = hamiltonianCycle41.isPathFound(0);
        boolean boolean55 = hamiltonianCycle41.isPathFound(1);
        boolean boolean57 = hamiltonianCycle41.isPresent((int) (byte) 0);
        boolean boolean59 = hamiltonianCycle41.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle60 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle61 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle62 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[] intArray68 = new int[] { (short) -1, (short) 0 };
        int[][] intArray69 = new int[][] { intArray65, intArray68 };
        int[] intArray70 = hamiltonianCycle62.findHamiltonianCycle(intArray69);
        boolean boolean72 = hamiltonianCycle62.isPresent(0);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray81 = new int[][] { intArray76, intArray80 };
        int[] intArray82 = hamiltonianCycle62.findHamiltonianCycle(intArray81);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle83 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray86 = new int[] { (short) -1, (short) 0 };
        int[] intArray89 = new int[] { (short) -1, (short) 0 };
        int[][] intArray90 = new int[][] { intArray86, intArray89 };
        int[] intArray91 = hamiltonianCycle83.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle62.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle61.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle60.findHamiltonianCycle(intArray90);
        int[] intArray95 = hamiltonianCycle41.findHamiltonianCycle(intArray90);
        int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1, -1]");
    }

    @Test
    public void test4716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4716");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean58 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean60 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean68 = hamiltonianCycle0.isPresent(0);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (short) 0);
        java.lang.Class<?> wildcardClass71 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test4717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4717");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test4718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4718");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        boolean boolean35 = hamiltonianCycle23.isPresent(100);
        boolean boolean37 = hamiltonianCycle23.isPathFound(0);
        boolean boolean39 = hamiltonianCycle23.isPresent((int) (byte) 1);
        boolean boolean41 = hamiltonianCycle23.isPresent(100);
        boolean boolean43 = hamiltonianCycle23.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle44 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray47 = new int[] { (short) -1, (short) 0 };
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[][] intArray51 = new int[][] { intArray47, intArray50 };
        int[] intArray52 = hamiltonianCycle44.findHamiltonianCycle(intArray51);
        boolean boolean54 = hamiltonianCycle44.isPresent((int) (byte) 10);
        boolean boolean56 = hamiltonianCycle44.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle78 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray81 = new int[] { (short) -1, (short) 0 };
        int[] intArray84 = new int[] { (short) -1, (short) 0 };
        int[][] intArray85 = new int[][] { intArray81, intArray84 };
        int[] intArray86 = hamiltonianCycle78.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle57.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle44.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle23.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        java.lang.Class<?> wildcardClass91 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test4719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4719");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent(0);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray33 = new int[][] { intArray28, intArray32 };
        int[] intArray34 = hamiltonianCycle14.findHamiltonianCycle(intArray33);
        int[] intArray35 = hamiltonianCycle3.findHamiltonianCycle(intArray33);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray33);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean39 = hamiltonianCycle37.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle40.findHamiltonianCycle(intArray70);
        int[] intArray73 = hamiltonianCycle37.findHamiltonianCycle(intArray70);
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test4720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4720");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent(0);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray33 = new int[][] { intArray28, intArray32 };
        int[] intArray34 = hamiltonianCycle14.findHamiltonianCycle(intArray33);
        int[] intArray35 = hamiltonianCycle3.findHamiltonianCycle(intArray33);
        int[] intArray36 = hamiltonianCycle0.findHamiltonianCycle(intArray33);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean39 = hamiltonianCycle37.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle40.findHamiltonianCycle(intArray70);
        int[] intArray73 = hamiltonianCycle37.findHamiltonianCycle(intArray70);
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
    }

    @Test
    public void test4721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4721");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPathFound(0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test4722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4722");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean82 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean84 = hamiltonianCycle0.isPresent(100);
        boolean boolean86 = hamiltonianCycle0.isPresent(100);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test4723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4723");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((-1));
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean26 = hamiltonianCycle0.isPresent(1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean32 = hamiltonianCycle0.isPresent((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test4724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4724");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent((int) (byte) 10);
        boolean boolean31 = hamiltonianCycle19.isPresent((-1));
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 1);
        boolean boolean35 = hamiltonianCycle19.isPathFound((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        boolean boolean48 = hamiltonianCycle36.isPresent(100);
        boolean boolean50 = hamiltonianCycle36.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        boolean boolean63 = hamiltonianCycle51.isPresent(100);
        boolean boolean65 = hamiltonianCycle51.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle51.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle36.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle19.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
    }

    @Test
    public void test4725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4725");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean26 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = hamiltonianCycle0.isPathFound((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test4726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4726");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean54 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test4727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4727");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean24 = hamiltonianCycle0.isPresent(10);
        int[][] intArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = hamiltonianCycle0.findHamiltonianCycle(intArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4728");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean4 = hamiltonianCycle0.isPresent((int) (byte) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle5 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray8 = new int[] { (short) -1, (short) 0 };
        int[] intArray11 = new int[] { (short) -1, (short) 0 };
        int[][] intArray12 = new int[][] { intArray8, intArray11 };
        int[] intArray13 = hamiltonianCycle5.findHamiltonianCycle(intArray12);
        boolean boolean15 = hamiltonianCycle5.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle16 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[][] intArray23 = new int[][] { intArray19, intArray22 };
        int[] intArray24 = hamiltonianCycle16.findHamiltonianCycle(intArray23);
        boolean boolean26 = hamiltonianCycle16.isPresent(0);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray35 = new int[][] { intArray30, intArray34 };
        int[] intArray36 = hamiltonianCycle16.findHamiltonianCycle(intArray35);
        int[] intArray37 = hamiltonianCycle5.findHamiltonianCycle(intArray35);
        boolean boolean39 = hamiltonianCycle5.isPathFound(0);
        boolean boolean41 = hamiltonianCycle5.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle42 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray45 = new int[] { (short) -1, (short) 0 };
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[][] intArray49 = new int[][] { intArray45, intArray48 };
        int[] intArray50 = hamiltonianCycle42.findHamiltonianCycle(intArray49);
        int[] intArray51 = hamiltonianCycle5.findHamiltonianCycle(intArray49);
        boolean boolean53 = hamiltonianCycle5.isPresent((int) ' ');
        boolean boolean55 = hamiltonianCycle5.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle56 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[][] intArray63 = new int[][] { intArray59, intArray62 };
        int[] intArray64 = hamiltonianCycle56.findHamiltonianCycle(intArray63);
        boolean boolean66 = hamiltonianCycle56.isPresent(0);
        boolean boolean68 = hamiltonianCycle56.isPresent(100);
        boolean boolean70 = hamiltonianCycle56.isPresent((int) (short) 0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        boolean boolean81 = hamiltonianCycle71.isPresent(0);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray90 = new int[][] { intArray85, intArray89 };
        int[] intArray91 = hamiltonianCycle71.findHamiltonianCycle(intArray90);
        int[] intArray92 = hamiltonianCycle56.findHamiltonianCycle(intArray90);
        int[] intArray93 = hamiltonianCycle5.findHamiltonianCycle(intArray90);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray90);
        boolean boolean96 = hamiltonianCycle0.isPresent((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test4729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4729");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle40.findHamiltonianCycle(intArray70);
        int[] intArray73 = hamiltonianCycle19.findHamiltonianCycle(intArray70);
        int[] intArray74 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test4730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4730");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean24 = hamiltonianCycle0.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle47 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray50 = new int[] { (short) -1, (short) 0 };
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[][] intArray54 = new int[][] { intArray50, intArray53 };
        int[] intArray55 = hamiltonianCycle47.findHamiltonianCycle(intArray54);
        int[] intArray56 = hamiltonianCycle26.findHamiltonianCycle(intArray54);
        int[] intArray57 = hamiltonianCycle25.findHamiltonianCycle(intArray54);
        int[] intArray58 = hamiltonianCycle0.findHamiltonianCycle(intArray54);
        boolean boolean60 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean64 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean68 = hamiltonianCycle0.isPresent(100);
        boolean boolean70 = hamiltonianCycle0.isPresent(100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test4731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4731");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent(100);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean28 = hamiltonianCycle0.isPresent((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test4732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4732");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent(10);
        boolean boolean58 = hamiltonianCycle0.isPresent(100);
        boolean boolean60 = hamiltonianCycle0.isPresent(0);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test4733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4733");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle15 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[] intArray21 = new int[] { (short) -1, (short) 0 };
        int[][] intArray22 = new int[][] { intArray18, intArray21 };
        int[] intArray23 = hamiltonianCycle15.findHamiltonianCycle(intArray22);
        boolean boolean25 = hamiltonianCycle15.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent(0);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray45 = new int[][] { intArray40, intArray44 };
        int[] intArray46 = hamiltonianCycle26.findHamiltonianCycle(intArray45);
        int[] intArray47 = hamiltonianCycle15.findHamiltonianCycle(intArray45);
        boolean boolean49 = hamiltonianCycle15.isPathFound(0);
        boolean boolean51 = hamiltonianCycle15.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray55 = new int[] { (short) -1, (short) 0 };
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[][] intArray59 = new int[][] { intArray55, intArray58 };
        int[] intArray60 = hamiltonianCycle52.findHamiltonianCycle(intArray59);
        int[] intArray61 = hamiltonianCycle15.findHamiltonianCycle(intArray59);
        int[] intArray62 = hamiltonianCycle0.findHamiltonianCycle(intArray59);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean66 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean68 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean70 = hamiltonianCycle0.isPresent((-1));
        boolean boolean72 = hamiltonianCycle0.isPresent((int) (byte) 0);
        java.lang.Class<?> wildcardClass73 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test4734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4734");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle50 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray53 = new int[] { (short) -1, (short) 0 };
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[][] intArray57 = new int[][] { intArray53, intArray56 };
        int[] intArray58 = hamiltonianCycle50.findHamiltonianCycle(intArray57);
        boolean boolean60 = hamiltonianCycle50.isPresent(0);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray69 = new int[][] { intArray64, intArray68 };
        int[] intArray70 = hamiltonianCycle50.findHamiltonianCycle(intArray69);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle50.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle49.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test4735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4735");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle17 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[] intArray23 = new int[] { (short) -1, (short) 0 };
        int[][] intArray24 = new int[][] { intArray20, intArray23 };
        int[] intArray25 = hamiltonianCycle17.findHamiltonianCycle(intArray24);
        boolean boolean27 = hamiltonianCycle17.isPresent(0);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray36 = new int[][] { intArray31, intArray35 };
        int[] intArray37 = hamiltonianCycle17.findHamiltonianCycle(intArray36);
        int[] intArray38 = hamiltonianCycle0.findHamiltonianCycle(intArray36);
        boolean boolean40 = hamiltonianCycle0.isPresent(0);
        boolean boolean42 = hamiltonianCycle0.isPathFound(0);
        java.lang.Class<?> wildcardClass43 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test4736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4736");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPathFound(1);
        boolean boolean78 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test4737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4737");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(1);
        boolean boolean38 = hamiltonianCycle0.isPresent(0);
        boolean boolean40 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean42 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test4738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4738");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        boolean boolean20 = hamiltonianCycle0.isPathFound(0);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = hamiltonianCycle0.isPathFound((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test4739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4739");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean72 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean74 = hamiltonianCycle0.isPathFound(0);
        boolean boolean76 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass77 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test4740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4740");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray38 = new int[][] { intArray33, intArray37 };
        int[] intArray39 = hamiltonianCycle19.findHamiltonianCycle(intArray38);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        int[] intArray49 = hamiltonianCycle19.findHamiltonianCycle(intArray47);
        int[] intArray50 = hamiltonianCycle0.findHamiltonianCycle(intArray47);
        boolean boolean52 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent(0);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean58 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean60 = hamiltonianCycle0.isPresent(1);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean64 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test4741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4741");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound(1);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = hamiltonianCycle0.isPathFound((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4742");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean38 = hamiltonianCycle0.isPresent(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test4743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4743");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean90 = hamiltonianCycle0.isPresent(100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test4744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4744");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test4745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4745");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (byte) -1);
        boolean boolean76 = hamiltonianCycle0.isPresent(0);
        boolean boolean78 = hamiltonianCycle0.isPathFound(0);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = hamiltonianCycle0.isPathFound((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test4746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4746");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound(0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle49 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean51 = hamiltonianCycle49.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle52 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean54 = hamiltonianCycle52.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray58 = new int[] { (short) -1, (short) 0 };
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[][] intArray62 = new int[][] { intArray58, intArray61 };
        int[] intArray63 = hamiltonianCycle55.findHamiltonianCycle(intArray62);
        boolean boolean65 = hamiltonianCycle55.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle66 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray69 = new int[] { (short) -1, (short) 0 };
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[][] intArray73 = new int[][] { intArray69, intArray72 };
        int[] intArray74 = hamiltonianCycle66.findHamiltonianCycle(intArray73);
        boolean boolean76 = hamiltonianCycle66.isPresent(0);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray85 = new int[][] { intArray80, intArray84 };
        int[] intArray86 = hamiltonianCycle66.findHamiltonianCycle(intArray85);
        int[] intArray87 = hamiltonianCycle55.findHamiltonianCycle(intArray85);
        int[] intArray88 = hamiltonianCycle52.findHamiltonianCycle(intArray85);
        int[] intArray89 = hamiltonianCycle49.findHamiltonianCycle(intArray85);
        int[] intArray90 = hamiltonianCycle0.findHamiltonianCycle(intArray85);
        boolean boolean92 = hamiltonianCycle0.isPresent((-1));
        boolean boolean94 = hamiltonianCycle0.isPresent(1);
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = hamiltonianCycle0.findHamiltonianCycle(intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test4747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4747");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle9 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean11 = hamiltonianCycle9.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle12 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray15 = new int[] { (short) -1, (short) 0 };
        int[] intArray18 = new int[] { (short) -1, (short) 0 };
        int[][] intArray19 = new int[][] { intArray15, intArray18 };
        int[] intArray20 = hamiltonianCycle12.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle12.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent(0);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray42 = new int[][] { intArray37, intArray41 };
        int[] intArray43 = hamiltonianCycle23.findHamiltonianCycle(intArray42);
        int[] intArray44 = hamiltonianCycle12.findHamiltonianCycle(intArray42);
        int[] intArray45 = hamiltonianCycle9.findHamiltonianCycle(intArray42);
        int[] intArray46 = hamiltonianCycle0.findHamiltonianCycle(intArray42);
        boolean boolean48 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean50 = hamiltonianCycle0.isPresent(0);
        boolean boolean52 = hamiltonianCycle0.isPathFound(0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean58 = hamiltonianCycle0.isPresent(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test4748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4748");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        boolean boolean40 = hamiltonianCycle0.isPresent(10);
        boolean boolean42 = hamiltonianCycle0.isPresent(0);
        boolean boolean44 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean46 = hamiltonianCycle0.isPresent(100);
        boolean boolean48 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean50 = hamiltonianCycle0.isPathFound(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = hamiltonianCycle0.isPathFound(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test4749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4749");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean56 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean58 = hamiltonianCycle0.isPathFound(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test4750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4750");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean80 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean82 = hamiltonianCycle0.isPresent(0);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) '#');
        java.lang.Class<?> wildcardClass87 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test4751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4751");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        boolean boolean25 = hamiltonianCycle13.isPresent((int) (short) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[] intArray32 = new int[] { (short) -1, (short) 0 };
        int[][] intArray33 = new int[][] { intArray29, intArray32 };
        int[] intArray34 = hamiltonianCycle26.findHamiltonianCycle(intArray33);
        boolean boolean36 = hamiltonianCycle26.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle37 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[][] intArray44 = new int[][] { intArray40, intArray43 };
        int[] intArray45 = hamiltonianCycle37.findHamiltonianCycle(intArray44);
        boolean boolean47 = hamiltonianCycle37.isPresent(0);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray56 = new int[][] { intArray51, intArray55 };
        int[] intArray57 = hamiltonianCycle37.findHamiltonianCycle(intArray56);
        int[] intArray58 = hamiltonianCycle26.findHamiltonianCycle(intArray56);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle70 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray73 = new int[] { (short) -1, (short) 0 };
        int[] intArray76 = new int[] { (short) -1, (short) 0 };
        int[][] intArray77 = new int[][] { intArray73, intArray76 };
        int[] intArray78 = hamiltonianCycle70.findHamiltonianCycle(intArray77);
        boolean boolean80 = hamiltonianCycle70.isPresent(0);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray89 = new int[][] { intArray84, intArray88 };
        int[] intArray90 = hamiltonianCycle70.findHamiltonianCycle(intArray89);
        int[] intArray91 = hamiltonianCycle59.findHamiltonianCycle(intArray89);
        int[] intArray92 = hamiltonianCycle26.findHamiltonianCycle(intArray89);
        int[] intArray93 = hamiltonianCycle13.findHamiltonianCycle(intArray89);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray89);
        java.lang.Class<?> wildcardClass95 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test4752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4752");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean26 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent((int) (byte) 10);
        boolean boolean39 = hamiltonianCycle27.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle40 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray43 = new int[] { (short) -1, (short) 0 };
        int[] intArray46 = new int[] { (short) -1, (short) 0 };
        int[][] intArray47 = new int[][] { intArray43, intArray46 };
        int[] intArray48 = hamiltonianCycle40.findHamiltonianCycle(intArray47);
        boolean boolean50 = hamiltonianCycle40.isPresent((int) (byte) 10);
        boolean boolean52 = hamiltonianCycle40.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle53 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray56 = new int[] { (short) -1, (short) 0 };
        int[] intArray59 = new int[] { (short) -1, (short) 0 };
        int[][] intArray60 = new int[][] { intArray56, intArray59 };
        int[] intArray61 = hamiltonianCycle53.findHamiltonianCycle(intArray60);
        boolean boolean63 = hamiltonianCycle53.isPresent(0);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray72 = new int[][] { intArray67, intArray71 };
        int[] intArray73 = hamiltonianCycle53.findHamiltonianCycle(intArray72);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle74 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[] intArray80 = new int[] { (short) -1, (short) 0 };
        int[][] intArray81 = new int[][] { intArray77, intArray80 };
        int[] intArray82 = hamiltonianCycle74.findHamiltonianCycle(intArray81);
        int[] intArray83 = hamiltonianCycle53.findHamiltonianCycle(intArray81);
        int[] intArray84 = hamiltonianCycle40.findHamiltonianCycle(intArray81);
        int[] intArray85 = hamiltonianCycle27.findHamiltonianCycle(intArray81);
        int[] intArray86 = hamiltonianCycle0.findHamiltonianCycle(intArray81);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = hamiltonianCycle0.isPathFound((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test4753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4753");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle1 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray4 = new int[] { (short) -1, (short) 0 };
        int[] intArray7 = new int[] { (short) -1, (short) 0 };
        int[][] intArray8 = new int[][] { intArray4, intArray7 };
        int[] intArray9 = hamiltonianCycle1.findHamiltonianCycle(intArray8);
        boolean boolean11 = hamiltonianCycle1.isPresent(0);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray20 = new int[][] { intArray15, intArray19 };
        int[] intArray21 = hamiltonianCycle1.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle1.isPathFound((int) (short) 0);
        boolean boolean25 = hamiltonianCycle1.isPathFound(1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle26 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle27 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray30 = new int[] { (short) -1, (short) 0 };
        int[] intArray33 = new int[] { (short) -1, (short) 0 };
        int[][] intArray34 = new int[][] { intArray30, intArray33 };
        int[] intArray35 = hamiltonianCycle27.findHamiltonianCycle(intArray34);
        boolean boolean37 = hamiltonianCycle27.isPresent(0);
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray46 = new int[][] { intArray41, intArray45 };
        int[] intArray47 = hamiltonianCycle27.findHamiltonianCycle(intArray46);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        int[] intArray57 = hamiltonianCycle27.findHamiltonianCycle(intArray55);
        int[] intArray58 = hamiltonianCycle26.findHamiltonianCycle(intArray55);
        int[] intArray59 = hamiltonianCycle1.findHamiltonianCycle(intArray55);
        int[] intArray60 = hamiltonianCycle0.findHamiltonianCycle(intArray55);
        boolean boolean62 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean64 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean66 = hamiltonianCycle0.isPathFound((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test4754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4754");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        int[] intArray30 = hamiltonianCycle0.findHamiltonianCycle(intArray28);
        boolean boolean32 = hamiltonianCycle0.isPresent((int) ' ');
        boolean boolean34 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean36 = hamiltonianCycle0.isPathFound(0);
        boolean boolean38 = hamiltonianCycle0.isPresent((-1));
        boolean boolean40 = hamiltonianCycle0.isPathFound(0);
        boolean boolean42 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean44 = hamiltonianCycle0.isPresent((int) '4');
        java.lang.Class<?> wildcardClass45 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test4755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4755");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean16 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        boolean boolean20 = hamiltonianCycle0.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle21 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray24 = new int[] { (short) -1, (short) 0 };
        int[] intArray27 = new int[] { (short) -1, (short) 0 };
        int[][] intArray28 = new int[][] { intArray24, intArray27 };
        int[] intArray29 = hamiltonianCycle21.findHamiltonianCycle(intArray28);
        boolean boolean31 = hamiltonianCycle21.isPresent(0);
        boolean boolean33 = hamiltonianCycle21.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean47 = hamiltonianCycle45.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle48 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[][] intArray55 = new int[][] { intArray51, intArray54 };
        int[] intArray56 = hamiltonianCycle48.findHamiltonianCycle(intArray55);
        boolean boolean58 = hamiltonianCycle48.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle59 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray62 = new int[] { (short) -1, (short) 0 };
        int[] intArray65 = new int[] { (short) -1, (short) 0 };
        int[][] intArray66 = new int[][] { intArray62, intArray65 };
        int[] intArray67 = hamiltonianCycle59.findHamiltonianCycle(intArray66);
        boolean boolean69 = hamiltonianCycle59.isPresent(0);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray78 = new int[][] { intArray73, intArray77 };
        int[] intArray79 = hamiltonianCycle59.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle48.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle45.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray83 = hamiltonianCycle21.findHamiltonianCycle(intArray78);
        int[] intArray84 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean86 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean92 = hamiltonianCycle0.isPresent((int) (short) 10);
        java.lang.Class<?> wildcardClass93 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test4756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4756");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPathFound(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent((int) '4');
        boolean boolean33 = hamiltonianCycle19.isPresent((int) 'a');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle43 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean45 = hamiltonianCycle43.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle46 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray49 = new int[] { (short) -1, (short) 0 };
        int[] intArray52 = new int[] { (short) -1, (short) 0 };
        int[][] intArray53 = new int[][] { intArray49, intArray52 };
        int[] intArray54 = hamiltonianCycle46.findHamiltonianCycle(intArray53);
        boolean boolean56 = hamiltonianCycle46.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        boolean boolean67 = hamiltonianCycle57.isPresent(0);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray76 = new int[][] { intArray71, intArray75 };
        int[] intArray77 = hamiltonianCycle57.findHamiltonianCycle(intArray76);
        int[] intArray78 = hamiltonianCycle46.findHamiltonianCycle(intArray76);
        int[] intArray79 = hamiltonianCycle43.findHamiltonianCycle(intArray76);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray76);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray76);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray76);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean86 = hamiltonianCycle0.isPresent(0);
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray88 = hamiltonianCycle0.findHamiltonianCycle(intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test4757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4757");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPresent(100);
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (short) 100);
        boolean boolean16 = hamiltonianCycle0.isPresent(100);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean20 = hamiltonianCycle0.isPresent((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test4758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4758");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean13 = hamiltonianCycle11.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle14 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[] intArray20 = new int[] { (short) -1, (short) 0 };
        int[][] intArray21 = new int[][] { intArray17, intArray20 };
        int[] intArray22 = hamiltonianCycle14.findHamiltonianCycle(intArray21);
        boolean boolean24 = hamiltonianCycle14.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle25 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[] intArray31 = new int[] { (short) -1, (short) 0 };
        int[][] intArray32 = new int[][] { intArray28, intArray31 };
        int[] intArray33 = hamiltonianCycle25.findHamiltonianCycle(intArray32);
        boolean boolean35 = hamiltonianCycle25.isPresent(0);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray44 = new int[][] { intArray39, intArray43 };
        int[] intArray45 = hamiltonianCycle25.findHamiltonianCycle(intArray44);
        int[] intArray46 = hamiltonianCycle14.findHamiltonianCycle(intArray44);
        int[] intArray47 = hamiltonianCycle11.findHamiltonianCycle(intArray44);
        int[] intArray48 = hamiltonianCycle0.findHamiltonianCycle(intArray44);
        boolean boolean50 = hamiltonianCycle0.isPresent((-1));
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle51 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray54 = new int[] { (short) -1, (short) 0 };
        int[] intArray57 = new int[] { (short) -1, (short) 0 };
        int[][] intArray58 = new int[][] { intArray54, intArray57 };
        int[] intArray59 = hamiltonianCycle51.findHamiltonianCycle(intArray58);
        boolean boolean61 = hamiltonianCycle51.isPresent(0);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray70 = new int[][] { intArray65, intArray69 };
        int[] intArray71 = hamiltonianCycle51.findHamiltonianCycle(intArray70);
        int[] intArray72 = hamiltonianCycle0.findHamiltonianCycle(intArray70);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) '#');
        boolean boolean76 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test4759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4759");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle13 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray16 = new int[] { (short) -1, (short) 0 };
        int[] intArray19 = new int[] { (short) -1, (short) 0 };
        int[][] intArray20 = new int[][] { intArray16, intArray19 };
        int[] intArray21 = hamiltonianCycle13.findHamiltonianCycle(intArray20);
        boolean boolean23 = hamiltonianCycle13.isPresent(0);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray32 = new int[][] { intArray27, intArray31 };
        int[] intArray33 = hamiltonianCycle13.findHamiltonianCycle(intArray32);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        int[] intArray43 = hamiltonianCycle13.findHamiltonianCycle(intArray41);
        int[] intArray44 = hamiltonianCycle0.findHamiltonianCycle(intArray41);
        boolean boolean46 = hamiltonianCycle0.isPresent((-1));
        boolean boolean48 = hamiltonianCycle0.isPathFound(1);
        boolean boolean50 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean52 = hamiltonianCycle0.isPathFound((int) (short) 1);
        boolean boolean54 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean56 = hamiltonianCycle0.isPresent((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test4760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4760");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle11 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray14 = new int[] { (short) -1, (short) 0 };
        int[] intArray17 = new int[] { (short) -1, (short) 0 };
        int[][] intArray18 = new int[][] { intArray14, intArray17 };
        int[] intArray19 = hamiltonianCycle11.findHamiltonianCycle(intArray18);
        boolean boolean21 = hamiltonianCycle11.isPresent(0);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray30 = new int[][] { intArray25, intArray29 };
        int[] intArray31 = hamiltonianCycle11.findHamiltonianCycle(intArray30);
        int[] intArray32 = hamiltonianCycle0.findHamiltonianCycle(intArray30);
        boolean boolean34 = hamiltonianCycle0.isPathFound((int) (byte) 0);
        boolean boolean36 = hamiltonianCycle0.isPresent((int) 'a');
        java.lang.Class<?> wildcardClass37 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test4761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4761");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle23 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray26 = new int[] { (short) -1, (short) 0 };
        int[] intArray29 = new int[] { (short) -1, (short) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray31 = hamiltonianCycle23.findHamiltonianCycle(intArray30);
        boolean boolean33 = hamiltonianCycle23.isPresent((int) (byte) 10);
        boolean boolean35 = hamiltonianCycle23.isPresent((int) '4');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle36 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[] intArray42 = new int[] { (short) -1, (short) 0 };
        int[][] intArray43 = new int[][] { intArray39, intArray42 };
        int[] intArray44 = hamiltonianCycle36.findHamiltonianCycle(intArray43);
        boolean boolean46 = hamiltonianCycle36.isPresent(0);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray55 = new int[][] { intArray50, intArray54 };
        int[] intArray56 = hamiltonianCycle36.findHamiltonianCycle(intArray55);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle57 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray60 = new int[] { (short) -1, (short) 0 };
        int[] intArray63 = new int[] { (short) -1, (short) 0 };
        int[][] intArray64 = new int[][] { intArray60, intArray63 };
        int[] intArray65 = hamiltonianCycle57.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle36.findHamiltonianCycle(intArray64);
        int[] intArray67 = hamiltonianCycle23.findHamiltonianCycle(intArray64);
        int[] intArray68 = hamiltonianCycle0.findHamiltonianCycle(intArray64);
        boolean boolean70 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean72 = hamiltonianCycle0.isPathFound(1);
        boolean boolean74 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean76 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean78 = hamiltonianCycle0.isPresent((int) (byte) 100);
        boolean boolean80 = hamiltonianCycle0.isPresent(10);
        boolean boolean82 = hamiltonianCycle0.isPresent((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test4762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4762");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        boolean boolean12 = hamiltonianCycle0.isPathFound(0);
        boolean boolean14 = hamiltonianCycle0.isPathFound((int) (short) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean20 = hamiltonianCycle0.isPresent(100);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) '4');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4763");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) '4');
        boolean boolean14 = hamiltonianCycle0.isPresent((int) (byte) 0);
        boolean boolean16 = hamiltonianCycle0.isPathFound(1);
        boolean boolean18 = hamiltonianCycle0.isPresent(100);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle19 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray22 = new int[] { (short) -1, (short) 0 };
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[][] intArray26 = new int[][] { intArray22, intArray25 };
        int[] intArray27 = hamiltonianCycle19.findHamiltonianCycle(intArray26);
        boolean boolean29 = hamiltonianCycle19.isPresent(0);
        boolean boolean31 = hamiltonianCycle19.isPresent(100);
        boolean boolean33 = hamiltonianCycle19.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle34 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray37 = new int[] { (short) -1, (short) 0 };
        int[] intArray40 = new int[] { (short) -1, (short) 0 };
        int[][] intArray41 = new int[][] { intArray37, intArray40 };
        int[] intArray42 = hamiltonianCycle34.findHamiltonianCycle(intArray41);
        boolean boolean44 = hamiltonianCycle34.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle45 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray48 = new int[] { (short) -1, (short) 0 };
        int[] intArray51 = new int[] { (short) -1, (short) 0 };
        int[][] intArray52 = new int[][] { intArray48, intArray51 };
        int[] intArray53 = hamiltonianCycle45.findHamiltonianCycle(intArray52);
        boolean boolean55 = hamiltonianCycle45.isPresent(0);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray64 = new int[][] { intArray59, intArray63 };
        int[] intArray65 = hamiltonianCycle45.findHamiltonianCycle(intArray64);
        int[] intArray66 = hamiltonianCycle34.findHamiltonianCycle(intArray64);
        boolean boolean68 = hamiltonianCycle34.isPathFound(0);
        boolean boolean70 = hamiltonianCycle34.isPresent((int) (short) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle71 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray74 = new int[] { (short) -1, (short) 0 };
        int[] intArray77 = new int[] { (short) -1, (short) 0 };
        int[][] intArray78 = new int[][] { intArray74, intArray77 };
        int[] intArray79 = hamiltonianCycle71.findHamiltonianCycle(intArray78);
        int[] intArray80 = hamiltonianCycle34.findHamiltonianCycle(intArray78);
        int[] intArray81 = hamiltonianCycle19.findHamiltonianCycle(intArray78);
        int[] intArray82 = hamiltonianCycle0.findHamiltonianCycle(intArray78);
        boolean boolean84 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean86 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean88 = hamiltonianCycle0.isPresent((int) (short) 1);
        boolean boolean90 = hamiltonianCycle0.isPresent((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test4764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4764");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent((int) (byte) 10);
        boolean boolean12 = hamiltonianCycle0.isPresent((int) (short) 0);
        boolean boolean14 = hamiltonianCycle0.isPresent(0);
        boolean boolean16 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        boolean boolean18 = hamiltonianCycle0.isPathFound((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = hamiltonianCycle0.isPathFound((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test4765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4765");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        int[] intArray8 = hamiltonianCycle0.findHamiltonianCycle(intArray7);
        boolean boolean10 = hamiltonianCycle0.isPresent(0);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray19 = new int[][] { intArray14, intArray18 };
        int[] intArray20 = hamiltonianCycle0.findHamiltonianCycle(intArray19);
        boolean boolean22 = hamiltonianCycle0.isPresent((int) (byte) 1);
        boolean boolean24 = hamiltonianCycle0.isPresent((int) (short) 10);
        boolean boolean26 = hamiltonianCycle0.isPresent((int) 'a');
        boolean boolean28 = hamiltonianCycle0.isPresent((int) (short) -1);
        boolean boolean30 = hamiltonianCycle0.isPresent((int) '4');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test4766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4766");
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle0 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean2 = hamiltonianCycle0.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle3 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray6 = new int[] { (short) -1, (short) 0 };
        int[] intArray9 = new int[] { (short) -1, (short) 0 };
        int[][] intArray10 = new int[][] { intArray6, intArray9 };
        int[] intArray11 = hamiltonianCycle3.findHamiltonianCycle(intArray10);
        boolean boolean13 = hamiltonianCycle3.isPresent((int) (byte) 10);
        boolean boolean15 = hamiltonianCycle3.isPresent((int) '4');
        boolean boolean17 = hamiltonianCycle3.isPresent((int) (byte) 0);
        boolean boolean19 = hamiltonianCycle3.isPathFound(1);
        boolean boolean21 = hamiltonianCycle3.isPresent((int) '#');
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle22 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray25 = new int[] { (short) -1, (short) 0 };
        int[] intArray28 = new int[] { (short) -1, (short) 0 };
        int[][] intArray29 = new int[][] { intArray25, intArray28 };
        int[] intArray30 = hamiltonianCycle22.findHamiltonianCycle(intArray29);
        boolean boolean32 = hamiltonianCycle22.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle33 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray36 = new int[] { (short) -1, (short) 0 };
        int[] intArray39 = new int[] { (short) -1, (short) 0 };
        int[][] intArray40 = new int[][] { intArray36, intArray39 };
        int[] intArray41 = hamiltonianCycle33.findHamiltonianCycle(intArray40);
        boolean boolean43 = hamiltonianCycle33.isPresent(0);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray52 = new int[][] { intArray47, intArray51 };
        int[] intArray53 = hamiltonianCycle33.findHamiltonianCycle(intArray52);
        int[] intArray54 = hamiltonianCycle22.findHamiltonianCycle(intArray52);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle55 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        boolean boolean57 = hamiltonianCycle55.isPresent((int) (byte) 1);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle58 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray61 = new int[] { (short) -1, (short) 0 };
        int[] intArray64 = new int[] { (short) -1, (short) 0 };
        int[][] intArray65 = new int[][] { intArray61, intArray64 };
        int[] intArray66 = hamiltonianCycle58.findHamiltonianCycle(intArray65);
        boolean boolean68 = hamiltonianCycle58.isPresent((int) (byte) 10);
        com.thealgorithms.datastructures.graphs.HamiltonianCycle hamiltonianCycle69 = new com.thealgorithms.datastructures.graphs.HamiltonianCycle();
        int[] intArray72 = new int[] { (short) -1, (short) 0 };
        int[] intArray75 = new int[] { (short) -1, (short) 0 };
        int[][] intArray76 = new int[][] { intArray72, intArray75 };
        int[] intArray77 = hamiltonianCycle69.findHamiltonianCycle(intArray76);
        boolean boolean79 = hamiltonianCycle69.isPresent(0);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int[][] intArray88 = new int[][] { intArray83, intArray87 };
        int[] intArray89 = hamiltonianCycle69.findHamiltonianCycle(intArray88);
        int[] intArray90 = hamiltonianCycle58.findHamiltonianCycle(intArray88);
        int[] intArray91 = hamiltonianCycle55.findHamiltonianCycle(intArray88);
        int[] intArray92 = hamiltonianCycle22.findHamiltonianCycle(intArray88);
        int[] intArray93 = hamiltonianCycle3.findHamiltonianCycle(intArray88);
        int[] intArray94 = hamiltonianCycle0.findHamiltonianCycle(intArray88);
        boolean boolean96 = hamiltonianCycle0.isPathFound((int) (byte) 1);
        java.lang.Class<?> wildcardClass97 = hamiltonianCycle0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10, 35, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }
}


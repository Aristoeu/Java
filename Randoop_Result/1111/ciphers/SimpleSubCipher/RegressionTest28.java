package ciphers.SimpleSubCipher;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest28 {

    public static boolean debug = false;

    @Test
    public void test14001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14001");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("`\253!!!\253!!!\253!!!`\253!!!\253!!!\253!!!!", "xxvvxxvvxxvvxxvv!xxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvv!xxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvv!xxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvv!xxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvv!xxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvv!xxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvv!xxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvv!xxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvv!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`\253!!!\253!!!\253!!!`\253!!!\253!!!\253!!!!" + "'", str2, "`\253!!!\253!!!\253!!!`\253!!!\253!!!\253!!!!");
    }

    @Test
    public void test14002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14002");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0366\u0365\u0368\u0368\u029e\u029e\u029e\u029e\u029e\u029e\u029e\u029e\u0346\u0348\u
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test14003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14003");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!ihkkihkkihkk!ihkkihkkihkk!ihkkihkkihkk!ihkkihkkihkk\200}}`!ihkkihkkihkk!ihkkihkkihkk!ihkkihkkihkk!ihkkihkkihkk
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!\200}}`!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!]]!" + "'", str2, "!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!\200}}`!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!]]!");
    }

    @Test
    public void test14004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14004");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("", "\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14005");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!", "LL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!" + "'", str2, "!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!");
    }

    @Test
    public void test14006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14006");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\253\254\256\256\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108!!!\253\254\256\256\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108!!!!", "\220\220\216\216\220\220\216\216ppnnppnn\220\220\216\216\220\220\216\216ppnnppnn\220\220\216\216\220\220\216\216ppnnppnn\220\220\216\216\220\220\216\216ppnnppnn\220\220\216\216\220\220\216\216ppnnppnn\220\220\216\216\220\220\216\216ppnnppnn\220\220\216\216\220\220\216\216ppnnppnn\220\220\216\216\220\220\216\216ppnnppnn!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\254\256\256null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!\253\254\256\256null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!" + "'", str2, "\253\254\256\256null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!\253\254\256\256null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!");
    }

    @Test
    public void test14007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14007");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!", "\275NNN\275NNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14008");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348!", "!LLUULLUULLUULLUU!!!LLUULLUULLUULLUU!!!!!LLUULLUULLUULLUU!!!LLUULLUULLUULLUU!!!!!LLUULLUULLUULLUU!!!LLUULLUULLUULLUU!!!LLUULLUULLUULLUU!!!LLUULLUULLUULLUU!!!!!LLUULLUULLUULLUU!!!LLUULLUULLUULLUU!!!!!LLUULLUULLUULLUU!!!LLUULLUULLUULLUU!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!" + "'", str2, "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!");
    }

    @Test
    public void test14009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14009");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0346\u0348\u0348\u0348\u0348\u0346\u0346!", "\u0366\u0365\u0368\u0368\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test14010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14010");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\266!\266\266\266!\266\266\266!\266\266\266!\266\266\266!\266\266\266!\266\266\266!\266\266\266!\266\266!" + "'", str2, "\266!\266\266\266!\266\266\266!\266\266\266!\266\266\266!\266\266\266!\266\266\266!\266\266\266!\266\266!");
    }

    @Test
    public void test14011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14011");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!!", "U!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LL!!U!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LL!!U!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LL!!U!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LL!!U!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!!" + "'", str2, "\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!!");
    }

    @Test
    public void test14012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14012");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\275\275!!\275\275!!!", "!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\275!!\275\275!!!" + "'", str2, "\275\275!!\275\275!!!");
    }

    @Test
    public void test14013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14013");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("NULLLLLNULLLLLNULLLLLNULLLLLNULLLLLNULLLLLNULLLLLNULLLLL!", "ULLLnullnullnullULLLnullnullnullULLLnullnullnullULLLnullnullnullULLLnullnullnullULLLnullnullnullULLLnullnullnullULLLnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300!" + "'", str2, "\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300!");
    }

    @Test
    public void test14014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14014");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0366\u0365\u0368\u0368\u02cc\u02cc\u02cc\u02cc\u02cc\u02cc\u0346\u0348\u0348!", "null\236\276\276null\236\276\276!!null\236\276\276null\236\276\276!!null\236\276\276null\236\276\276null\236\276\276null\236\276\276!!null\236\276\276null\236\276\276!!null\236\276\276null\236\276\276!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368!nullnull\266\267\271\271\266\267\271\271nullnull\266\267\271\271\266\267\271\271nullnull\266\267\271\271\266\267\271\271\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368!nullnull\266\267\271\271\266\267\271\271nullnull\266\267\271\271\266\267\271\271nullnull\266\267\271\271\266\267\271\271\u0346\u0348\u0348!");
    }

    @Test
    public void test14015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14015");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\275\220JJ\200}}`\275\220JJ]]!", "\253\254\256\256~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200\253\254\256\256~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\220nullnull\200}}`\275\220nullnull]]!" + "'", str2, "\275\220nullnull\200}}`\275\220nullnull]]!");
    }

    @Test
    public void test14016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14016");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0366\u0365\u0368\u0368lnulluulnulluulnulluulnulluulnulluulnulluulnulluulnulluu!!lnulluulnulluulnulluulnulluulnulluulnulluulnulluulnulluu!!\200\200\u0346\u0348\u0348!", "]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!\200\200\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!\200\200\u0346\u0348\u0348!");
    }

    @Test
    public void test14017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14017");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212!" + "'", str2, "\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212!");
    }

    @Test
    public void test14018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14018");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("qrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnull!", "`!!\210\210UU\210\210UU!!\210\210UU\210\210UU!!\210\210UU\210\210UU`!!\210\210UU\210\210UU!!\210\210UU\210\210UU!!\210\210UU\210\210UU!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14019");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\340\340!!\340\340!!!!\340\340!!\340\340!!!!\340\340!!\340\340!!!!\340\340!!\340\340!!!!\340\340!!\340\340!!!!\340\340!!\340\340!!!!\340\340!!\340\340!!!!\340\340!!\340\340!!!!!", "nullnullnullnull\220nullnullnullnullnullnullnullnull\200}}`nullnullnullnull\220nullnullnullnullnullnullnullnull]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!" + "'", str2, "nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!");
    }

    @Test
    public void test14020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14020");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII!", "\u0318\u031a\u031a\u031a\u0318\u031a\u031a\u031a\u0318\u031a\u031a\u031a\u0318\u031a\u031a\u031a\u0318\u031a\u031a\u031a\u0318\u031a\u031a\u031a\u0318\u031a\u031a\u031a\u0318\u031a\u031a\u031a!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14021");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode
        org.junit.Assert.assertEquals("'" + strstr2, "\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220\276\276\276\276\213\220\220!");
    }

    @Test
    public void test14022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14022");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226!!nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226!!!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200UL``LUL``UL``UL``LUL``UL``}~\200\200}~\200\200UL``LUL``UL``UL``LUL``UL``}~\200\200}~\200\200UL``LUL``UL``UL``LUL``UL``}~\200\200}~\200\200\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226!!\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226!!!" + "'", str2, "\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226!!\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226!!!");
    }

    @Test
    public void test14023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14023");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX!", "UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!" + "'", str2, "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!");
    }

    @Test
    public void test14024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14024");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!", "]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!" + "'", str2, "!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!");
    }

    @Test
    public void test14025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14025");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220!!\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220!!!", "vvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxx\253\254\256\256\253\254\256\256vvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxx\253\254\256\256\253\254\256\256vvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxx\253\254\256\256\253\254\256\256vvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxx\253\254\256\256\253\254\256\256vvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxx\253\254\256\256\253\254\256\256vvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxx\253\254\256\256\253\254\256\256vvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxx\253\254\256\256\253\254\256\256vvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxx\253\254\256\256\253\254\256\256!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220!!\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220!!!" + "'", str2, "\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220!!\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220!!!");
    }

    @Test
    public void test14026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14026");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnullnullnullnullnull!", "nullnullnullnull!]nullnull!]nullnull!]nullnull!]nullnullnullnullnullnull!]nullnull!]nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225LNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUU\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225LNUULNUULNUULNUULNUULNUULNUULNUU!" + "'", str2, "\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225LNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUU\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225LNUULNUULNUULNUULNUULNUULNUULNUU!");
    }

    @Test
    public void test14027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14027");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0346\u0348\u0348\u0348}~\200\200}~\200\200NN\215\215LNN\215\215NN\215\215NN\215\215LNN\215\215NN\215\215}~\200\200}~\200\200NN\215\215LNN\215\215NN\215\215NN\215\215LNN\215\215NN\215\215}~\200\200}~\200\200NN\215\215LNN\215\215NN\215\215NN\215\215LNN\215\215NN\215\215}~\200\200}~\200\200NN\215\215LNN\215\215NN\215\215NN\215\215LNN\215\215NN\215\215\u0348\u0346\u0346!", "\200\200UU\200\200UU!!\200\200UU\200\200UU!!\200\200UU\200\200UU!!\200\200UU\200\200UU!!\200\200UU\200\200UU!!\200\200UU\200\200UU!!\200\200UU\200\200UU!!\200\200UU\200\200UU!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348}~\200\200}~\200\200nullnull\215\215nullnullnull\215\215nullnull\215\215nullnull\215\215nullnullnull\215\215nullnull\215\215}~\200\200}~\200\200nullnull\215\215nullnullnull\215\215nullnull\215\215nullnull\215\215nullnullnull\215\215nullnull\215\215}~\200\200}~\200\200nullnull\215\215nullnullnull\215\215nullnull\215\215nullnull\215\215nullnullnull\215\215nullnull\215\215}~\200\200}~\200\200nullnull\215\215nullnullnull\215\215nullnull\215\215nullnull\215\215nullnullnull\215\215nullnull\215\215\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348}~\200\200}~\200\200nullnull\215\215nullnullnull\215\215nullnull\215\215nullnull\215\215nullnullnull\215\215nullnull\215\215}~\200\200}~\200\200nullnull\215\215nullnullnull\215\215nullnull\215\215nullnull\215\215nullnullnull\215\215nullnull\215\215}~\200\200}~\200\200nullnull\215\215nullnullnull\215\215nullnull\215\215nullnull\215\215nullnullnull\215\215nullnull\215\215}~\200\200}~\200\200nullnull\215\215nullnullnull\215\215nullnull\215\215nullnull\215\215nullnullnull\215\215nullnull\215\215\u0348\u0346\u0346!");
    }

    @Test
    public void test14028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14028");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("XXXX\200}}`XXXX]]!", "!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull\200}}`nullnullnullnull]]!" + "'", str2, "nullnullnullnull\200}}`nullnullnullnull]]!");
    }

    @Test
    public void test14029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14029");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220!", "\u0366\u0365\u0368\u0368\275\275\275\275\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220!" + "'", str2, "nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220!");
    }

    @Test
    public void test14030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14030");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!!!!!!!]]!!!!!!!!]]!!!!!!!!nullnull!!!!!!!!nullnull!!!!!!!!]]!!!!!!!!]]!!!!!!!!nullnull!!!!!!!!nullnull!", "~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!]]!!!!!!!!]]!!!!!!!!\336~LL\336~LL!!!!!!!!\336~LL\336~LL!!!!!!!!]]!!!!!!!!]]!!!!!!!!\336~LL\336~LL!!!!!!!!\336~LL\336~LL!" + "'", str2, "!!!!!!!!]]!!!!!!!!]]!!!!!!!!\336~LL\336~LL!!!!!!!!\336~LL\336~LL!!!!!!!!]]!!!!!!!!]]!!!!!!!!\336~LL\336~LL!!!!!!!!\336~LL\336~LL!");
    }

    @Test
    public void test14031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14031");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254!", "\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275\275\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!^^^!^^^!^^^!^^^!^^^!^^^!^^^!^^^\254\254!^^^!^^^!^^^!^^^!^^^!^^^!^^^!^^^\254\254!^^^!^^^!^^^!^^^!^^^!^^^!^^^!^^^\254\254!^^^!^^^!^^^!^^^!^^^!^^^!^^^!^^^\254\254!^^^!^^^!^^^!^^^!^^^!^^^!^^^!^^^\254\254!^^^!^^^!^^^!^^^!^^^!^^^!^^^!^^^\254\254!^^^!^^^!^^^!^^^!^^^!^^^!^^^!^^^\254\254!^^^!^^^!^^^!^^^!^^^!^^^!^^^!^^^\254\254!^^^!^^^!^^^!^^^!^^^!^^^!^^^!^^^\254\254!^^^!^^^!^^^!^^^!^^^!^^^!^^^!^^^\254\254!^^^!^^^!^^^!^^^!^^^!^^^!^^^!^^^\254\254!^^^!^^^!^^^!^^^!^^^!^^^!^^^!^^^\254\254!^^^!^^^!^^^!^^^!^^^!^^^!^^^!^^^\254\254!^^^!^^^!^^^!^^^!^^^!^^^!^^^!^^^\254\254!" + "'", str
    }

    @Test
    public void test14032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14032");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!~\223\223!~\223\223!!!~\223\223!~\223\223!!!~\223\223!~\223\223!~\223\223!~\223\223!!!~\223\223!~\223\223!!!~\223\223!~\223\223!", "EEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EE!!EEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EE!!EEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EE!!EEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EE!!EEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EE!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~\223\223!~\223\223!!!~\223\223!~\223\223!!!~\223\223!~\223\223!~\223\223!~\223\223!!!~\223\223!~\223\223!!!~\223\223!~\223\223!" + "'", str2, "!~\223\223!~\223\223!!!~\223\223!~\223\223!!!~\223\223!~\223\223!~\223\223!~\223\223!!!~\223\223!~\223\223!!!~\223\223!~\223\223!");
    }

    @Test
    public void test14033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14033");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "UNNNUNNN!!UNNNUNNN!!!!UNNNUNNN!!UNNNUNNN!!!!!!UNNNUNNN!!UNNNUNNN!!!!UNNNUNNN!!UNNNUNNN!!!!!!UNNNUNNN!!UNNNUNNN!!!!UNNNUNNN!!UNNNUNNN!!!!!!UNNNUNNN!!UNNNUNNN!!!!UNNNUNNN!!UNNNUNNN!!!!!!UNNNUNNN!!UNNNUNNN!!!!UNNNUNNN!!UNNNUNNN!!!!!!UNNNUNNN!!UNNNUNNN!!!!UNNNUNNN!!UNNNUNNN!!!!!!UNNNUNNN!!UNNNUNNN!!!!UNNNUNNN!!UNNNUNNN!!!!!!UNNNUNNN!!UNNNUNNN!!!!UNNNUNNN!!UNNNUNNN!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test14034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14034");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("NLLLL]NNL]NNL]NNL]NNNLLLL]NNL]NN!", "\275\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\276\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\275\275!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0406\u0404\u0404\u0404\u0404\u0406\u0406\u0404\u0406\u0406\u0404\u0406\u0406\u0404\u0406\u0406\u0406\u0404\u0404\u0404\u0404\u0406\u0406\u0404\u0406\u0406!" + "'", str2, "\u0406\u0404\u0404\u0404\u0404\u0406\u0406\u0404\u0406\u0406\u0404\u0406\u0406\u0404\u0406\u0406\u0406\u0404\u0404\u0404\u0404\u0406\u0406\u0404\u0406\u0406!");
    }

    @Test
    public void test14035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14035");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!!", "`\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254``!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!!" + "'", str2, "\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!!");
    }

    @Test
    public void test14036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14036");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("tnullpptnullppnullnulltnullpptnullppnullnulltnullpptnullppnullnulltnullpptnullppnullnull!tnullppnullnull!tnullppnullnull!tnullppnullnull!tnullppnullnulltnullpptnullppnullnulltnullpptnullppnullnulltnullpptnullppnullnulltnullpptnullppnullnull!tnullppnullnull!tnullppnullnull!", "~}\200\200~}\200\200LLUULLUULLLLUULLUULL~}\200\200~}\200\200LLUULLUULLLLUULLUULL~}\200\200~}\200\200LLUULLUULLLLUULLUULL~}\200\200~}\200\200LLUULLUULLLLUULLUULL~}\200\200~}\200\200LLUULLUULLLLUULLUULL~}\200\200~}\200\200LLUULLUULLLLUULLUULL~}\200\200~}\200\200LLUULLUULLLLUULLUULL~}\200\200~}\200\200LLUULLUULLLLUULLUULL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUU!LLUUULLLUUULUUU!LLUUULLLUUULUUU!LLUUULLLUUULUUU!LLUUULLLUUULUUULLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUU!LLUUULLLUUULUUU!LLUUULLLUUULUUU!" + "'", str2, "LLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUU!LLUUULLLUUULUUU!LLUUULLLUUULUUU!LLUUULLLUUULUUU!LLUUULLLUUULUUULLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUU!LLUUULLLUUULUUU!LLUUULLLUUULUUU!");
    }

    @Test
    public void test14037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14037");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!!nullnullnullnullnullnullnullnull!", "\275\275\275\275\275\275\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "!!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14038");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0200\u0200\u01fb\u01fc\u01fe\u01fe\u01fb\u01fc\u01fe\u01fe\u01fb\u01fc\u01fe\u01fe\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u01fb\u01fc\u01fe\u01fe\u01fb\u01fc\u01fe\u01fe\u01fb\u01fc\u01fe\u01fe\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200!!!", "U\220LL\200}}`U\220LL]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!" + "'", str2, "nullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!");
    }

    @Test
    public void test14039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14039");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\336\300\300\336\336\300\300\336\336\300\300\336\336\336\300\300\336\336\300\300\336\336\300\300\336\336\336\300\300\336\336\300\300\336\336\300\300\336\336\336\300\300\336\336\300\300\336\336\300\300\336\336\200}}`\336\300\300\336\336\300\300\336\336\300\300\336\336\336\300\300\336\336\300\300\336\336\300\300\336\336\336\300\300\336\336\300\300\336\336\300\300\336\336\336\300\300\336\336\300\300\336\336\300\300\336\336]]!", "NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "N!!NN!!NN!!NNN!!NN!!NN!!NNN!!NN!!NN!!NNN!!NN!!NN!!NN\200}}`N!!NN!!NN!!NNN!!NN!!NN!!NNN!!NN!!NN!!NNN!!NN!!NN!!NN]]!" + "'", str2, "N!!NN!!NN!!NNN!!NN!!NN!!NNN!!NN!!NN!!NNN!!NN!!NN!!NN\200}}`N!!NN!!NN!!NNN!!NN!!NN!!NNN!!NN!!NN!!NNN!!NN!!NN!!NN]]!");
    }

    @Test
    public void test14040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14040");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode~\230\230\276\230\266\266~\230\230!!\276\230\266\266~\230\230\276\230\266\266~\230\230!!\276\230\266\266~\230\230\276\230\266\266~\230\230\276\230\266\266~\230\230\276\230\266\266~\230\230!!\276\230\266\266~\230\230\276\230\266\266~\230\230!!\276\230\266\266~\230\230\276\230\266\266~\230\230!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!!" + "'", str
    }

    @Test
    public void test14041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14041");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!!\244\244\244!\244\244\244!\244\244\244!\244\244\244!!!", "]nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!]]nullnull!!nullnull!!!!nullnull!!nullnull!!!!]]nullnull!!nullnull!!!!nullnull!!nullnull!!!!]]nullnull!!nullnull!!!!nullnull!!nullnull!!!!]]]nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!]]nullnull!!nullnull!!!!nullnull!!nullnull!!!!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!\244\244\244!\244\244\244!\244\244\244!\244\244\244!!!" + "'", str2, "!!!\244\244\244!\244\244\244!\244\244\244!\244\244\244!!!");
    }

    @Test
    public void test14042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14042");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!", "\215}\215\215\215}\215\215\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\215}\215\215\215}\215\215!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!" + "'", str2, "!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!");
    }

    @Test
    public void test14043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14043");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14044");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214!", "nullnull!!}`}}}`}}}`}}nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!}`}}}`}}}`}}nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214!" + "'", str2, "UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214!");
    }

    @Test
    public void test14045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14045");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14046");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("}!\200\200}!\200\200}!\200\200}!\200\200\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215}!\200\200}!\200\200}!\200\200}
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}!\200\200}!\200\200}!\200\200}!\200\200\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215}!\200\200}!\200\200}!\200\200}!\200\200\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215!" + "'", str2, "}!\200\200}!\200\200}!\200\200}!\200\200\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215}!\200\200}!\200\200}!\200\200}!\200\200\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215!");
    }

    @Test
    public void test14047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14047");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295!", "!\253\256\256\266\216!\216\216\271\271\266\216!\216\216\271\271\266\216!\216\216\271\271\266\216!\216\216\271\271\266\216!\216\216\271\271\266\216!\216\216\271\271\266\216!\216\216\271\271\266\216!\216\216\271\271\266\216!\216\216\271\271\266\216!\216\216\271\271\266\216!\216\216\271\271\266\216!\216\216\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256\266\216!\216\216\271\271\266\216!\216\216\271\271\266\216!\216\216\271\271\266\216!\216\216\271\271\266\216!\216\216\271\271\266\216!\216\216\271\271\266\216!\216\216\271\271\266\216!\216\216\271\271\266\216!\216\216\271\271\266\216!\216\216\271\271\266\216!\216\216\271\271\266\216!\216\216\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`null!nullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnull`null!nullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnull!" + "'", str2, "`null!nullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnull`null!nullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnull!");
    }

    @Test
    public void test14048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14048");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("", "\u01de\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01de\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01de\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01de\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01de\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01de\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01de\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01de\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01dd\u01de\u01de\u01de!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14049");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\253\253\335\336\340\340\335\336\340\340\253\253\335\336\340\340\335\336\340\340}}\253\253\335\336\340\340\335\336\340\340\253\253\335\336\340\340\335\336\340\340}}!", "!L\230NNL\230NNL\230NN!L\230NNL\230NNL\230NN!L\230NNL\230NNL\230NN!L\230NNL\230NNL\230NN!!L\230NNL\230NN!!L\230NNL\230NN!!L\230NNL\230NN!!L\230NNL\230NN!L\230NNL\230NNL\230NN!L\230NNL\230NNL\230NN!L\230NNL\230NNL\230NN!L\230NNL\230NNL\230NN!!L\230NNL\230NN!!L\230NNL\230NN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull}}\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull}}!" + "'", str2, "\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull}}\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull}}!");
    }

    @Test
    public void test14050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14050");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("`\253```\253\u035e\u035e`\253```\253\u035e\u035e!!!!`\253```\253\u035e\u035e`\253```\253\u035e\u035e!", "UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUUUNLLUNLLUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`\253```\253\u035e\u035e`\253```\253\u035e\u035e!!!!`\253```\253\u035e\u035e`\253```\253\u035e\u035e!" + "'", str2, "`\253```\253\u035e\u035e`\253```\253\u035e\u035e!!!!`\253```\253\u035e\u035e`\253```\253\u035e\u035e!");
    }

    @Test
    public void test14051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14051");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!!]]!!]]L!!!L!!!!!]]!!]]L!!!L!!!!", "``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230\200}}```MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!]]!!]]null!!!null!!!!!]]!!]]null!!!null!!!!" + "'", str2, "!!]]!!]]null!!!null!!!!!]]!!]]null!!!null!!!!");
    }

    @Test
    public void test14052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14052");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("LUNNLUNNLUNNLUNN\256\254\254LUNNLUNNLUNNLUNN\256\254\254!!LUNNLUNNLUNNLUNN\256\254\254LUNNLUNNLUNNLUNN\256\254\254!!LUNNLUNNLUNNLUNN\256\254\254LUNNLUNNLUNNLUNN\256\254\254!!LUNNLUNNLUNNLUNN\256\254\254LUNNLUNNLUNNLUNN\256\254\254!!LUNNLUNNLUNNLUNN\256\254\254LUNNLUNNLUNNLUNN\256\254\254!!LUNNLUNNLUNNLUNN\256\254\254LUNNLUNNLUNNLUNN\256\254\254!!LUNNLUNNLUNNLUNN\256\254\254LUNNLUNNLUNNLUNN\256\254\254!!LUNNLUNNLUNNLUNN\256\254\254LUNNLUNNLUNNLUNN\256\254\254!!!", "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!!" + "'", str2, "NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!!");
    }

    @Test
    public void test14053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14053");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("~\200}}~\200}}~\200}}~\200\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c~\200}}~\200}}~\200}}~\200\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c!", "NLLLLLNNLLNN!!!!NLLLLLNNLLNN!!!!!!NLLLLLNNLLNN!!!!NLLLLLNNLLNN!!!!!!NLLLLLNNLLNN!!!!NLLLLLNNLLNN!!!!!!NLLLLLNNLLNN!!!!NLLLLLNNLLNN!!!!!!NLLLLLNNLLNN!!!!NLLLLLNNLLNN!!!!!!NLLLLLNNLLNN!!!!NLLLLLNNLLNN!!!!!!NLLLLLNNLLNN!!!!NLLLLLNNLLNN!!!!!!NLLLLLNNLLNN!!!!NLLLLLNNLLNN!!!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~\200}}~\200}}~\200}}~\200\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168nullnullnull~\200}}~\200}}~\200}}~\200\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168nullnullnull!" + "'", str2, "~\200}}~\200}}~\200}}~\200\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168nullnullnull~\200}}~\200}}~\200}}~\200\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168nullnullnull!");
    }

    @Test
    public void test14054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14054");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("nullnullnullnullnullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254!", "JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14055");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("klnnklnnklnnklnn\266\267\271\271\266\267\271\271\266\267\271\271\266\267\271\271!", "\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\225\225!!\225\225!!\225\225!!\225\225!!\266\267\271\271\266\267\271\271\266\267\271\271\266\267\271\271!" + "'", str2, "\225\225!!\225\225!!\225\225!!\225\225!!\266\267\271\271\266\267\271\271\266\267\271\271\266\267\271\271!");
    }

    @Test
    public void test14056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14056");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\336nullnullnull\336nullnullnull\336nullnullnull\336nullnullnull\336nullnullnull\336nullnullnull\336nullnullnull\336nullnullnull}}\336nullnullnull\336nullnullnull\336nullnullnull\336nullnullnull\336nullnullnull\336nullnullnull\336nullnullnull\336nullnullnull}}!", "\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull}}nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull}}!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull}}nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull}}!");
    }

    @Test
    public void test14057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14057");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LLnull!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LLnull!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LLnull!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LLnull!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!", "\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170nullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u0215\u0216\u0218\u0218\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u0215\u0216\u0218\u0218\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u0215\u0216\u0218\u0218\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u0215\u0216\u0218\u0218\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8!" + "'", str2, "\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u0215\u0216\u0218\u0218\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u0215\u0216\u0218\u0218\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u0215\u0216\u0218\u0218\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u0215\u0216\u0218\u0218\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8!");
    }

    @Test
    public void test14058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14058");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214!", "\215}\215\215\215}\215\215~nullnullnull~nullnullnull~nullnullnull~nullnullnull\215}\215\215\215}\215\215!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214!" + "'", str2, "nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214!");
    }

    @Test
    public void test14059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14059");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0366\u0365\u0368\u0368!nullnull\266\267\271\271\266\267\271\271nullnull\266\267\271\271\266\267\271\271nullnull\266\267\271\271\266\267\271\271\u0346\u0348\u0348!", "nullnullnullnullnull\200}}null\200}}null\200}}null\200}}nullnullnullnullnull\200}}null\200}}!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368!UN}}UN}}\266\267\271\271\266\267\271\271UN}}UN}}\266\267\271\271\266\267\271\271UN}}UN}}\266\267\271\271\266\267\271\271\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368!UN}}UN}}\266\267\271\271\266\267\271\271UN}}UN}}\266\267\271\271\266\267\271\271UN}}UN}}\266\267\271\271\266\267\271\271\u0346\u0348\u0348!");
    }

    @Test
    public void test14060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14060");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("LUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUU\200}}`LUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUU]]!", "\u0366\u0365\u0368\u0368nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!\200\200\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\200}}`\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312]]!" + "'", str2, "\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\200}}`\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312]]!");
    }

    @Test
    public void test14061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14061");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!", "\u011e\u0120\u0120\u011e\u0120\u0120\u011e\u0120\u0120\u011e\u0120\u0120\u011e\u0120\u0120\u011e\u0120\u0120\u011e\u0120\u0120\u011e\u0120\u0120\u011e\u0120\u0120\u011e\u0120\u0120\u011e\u0120\u0120\u011e\u0120\u0120!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14062");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("UUNNUUNN!!UUNNUUNN!!UUNNUUNNUUNNUUNN!!UUNNUUNN!!UUNNUUNN!", "\u0366\u0365\u0368\u0368\353!!!\353!!!\200\200\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull\200\200nullnull\200\200!!nullnull\200\200nullnull\200\200!!nullnull\200\200nullnull\200\200nullnull\200\200nullnull\200\200!!nullnull\200\200nullnull\200\200!!nullnull\200\200nullnull\200\200!" + "'", str2, "nullnull\200\200nullnull\200\200!!nullnull\200\200nullnull\200\200!!nullnull\200\200nullnull\200\200nullnull\200\200nullnull\200\200!!nullnull\200\200nullnull\200\200!!nullnull\200\200nullnull\200\200!");
    }

    @Test
    public void test14063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14063");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("Y\\YYYYYY\\YYYYYYYY\\YYYYYY\\YYYYYYYY\\YYYYYY\\YYYYYYYY\\YYYYYY\\YYYYYYYY\\YYYYYY\\YYYYYYYY\\YYYYYY\\YYYYYYYY\\YYYYYY\\YYYYYYYY\\YYYYYY\\YYYYYYY!", "\u0366\u0365\u0368\u0368\u014e\u014e!!\213\213\213\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnull!" + "'", str2, "null\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnull!");
    }

    @Test
    public void test14064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14064");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198nullnullnullnullnullnullnullnull!", "\275\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\200\200\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\200\200\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\200\200\276\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\200\200\275\275!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "XXXXXXXXXXXXXXXX\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6XXXXXXXXXXXXXXXX\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6!" + "'", str2, "XXXXXXXXXXXXXXXX\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6XXXXXXXXXXXXXXXX\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6!");
    }

    @Test
    public void test14065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14065");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!nullnull!", "QTTTQTTT~~~~~QTTTQTTT~~~~~~~QTTTQTTT~~~~~QTTTQTTT~~~~~~~QTTTQTTT~~~~~QTTTQTTT~~~~~~~QTTTQTTT~~~~~QTTTQTTT~~~~~~~QTTTQTTT~~~~~QTTTQTTT~~~~~~~QTTTQTTT~~~~~QTTTQTTT~~~~~~~QTTTQTTT~~~~~QTTTQTTT~~~~~~~QTTTQTTT~~~~~QTTTQTTT~~~~~~~!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!" + "'", str2, "!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!");
    }

    @Test
    public void test14066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14066");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode~\204\204\204\204\204\204~\204\204\204\204\204\204~\204\204\204\204\204\204~\204\204\204\204\204\204~\204\204\204\204\204\204~\204\204\204\204\204\204~\204\204\204\204\204\204~\204\204!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14067");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!]]]!]]]!", "\253\254\256\256\253\254\256\256!!\253\254\256\256\253\254\256\256!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!]]]!]]]!" + "'", str2, "!]]]!]]]!");
    }

    @Test
    public void test14068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14068");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!!!", "nullnullnullnullnullnullnullnullnull\354nullnullnull\354nullnullnullnullnullnullnullnullnullnullnull\354nullnullnull\354nullnullnullnullnullnullnullnullnullnullnull\354nullnullnull\354nullnullnullnullnullnullnullnullnullnullnull\354nullnullnull\354nullnullnullnullnullnullnullnullnullnullnull\354nullnullnull\354nullnullnullnullnullnullnullnullnullnullnull\354nullnullnull\354nullnullnullnullnullnullnullnullnullnullnull\354nullnullnull\354nullnullnullnullnullnullnullnullnullnullnull\354nullnullnull\354nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!!!" + "'", str2, "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!!!");
    }

    @Test
    public void test14069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14069");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("UNLL\275\275\275UNLL\275\275\275!!UNLL\275\275\275UNLL\275\275\275!!UNLL\275\275\275UNLL\275\275\275UNLL\275\275\275UNLL\275\275\275!!UNLL\275\275\275UNLL\275\275\275!!UNLL\275\275\275UNLL\275\275\275!", "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LNLL\275\275\275LNLL\275\275\275!!LNLL\275\275\275LNLL\275\275\275!!LNLL\275\275\275LNLL\275\275\275LNLL\275\275\275LNLL\275\275\275!!LNLL\275\275\275LNLL\275\275\275!!LNLL\275\275\275LNLL\275\275\275!" + "'", str2, "LNLL\275\275\275LNLL\275\275\275!!LNLL\275\275\275LNLL\275\275\275!!LNLL\275\275\275LNLL\275\275\275LNLL\275\275\275LNLL\275\275\275!!LNLL\275\275\275LNLL\275\275\275!!LNLL\275\275\275LNLL\275\275\275!");
    }

    @Test
    public void test14070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14070");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212!!U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212!!U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212!!U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212!!U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212!", "HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!~~HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!~~HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!~~HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!~~HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!~~HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!~~HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!~~HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!~~!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212!!H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212!!H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212!!H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212!!H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212!" + "'", str2, "H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212!!H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212!!H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212!!H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212!!H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212!");
    }

    @Test
    public void test14071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14071");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("N~LLN~LL!!N~LLN~LL!!N~LLN~LLN~LLN~LL!!N~LLN~LL!!N~LLN~LL!", "\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null~nullnullnull~nullnull!!null~nullnullnull~nullnull!!null~nullnullnull~nullnullnull~nullnullnull~nullnull!!null~nullnullnull~nullnull!!null~nullnullnull~nullnull!" + "'", str2, "null~nullnullnull~nullnull!!null~nullnullnull~nullnull!!null~nullnullnull~nullnullnull~nullnullnull~nullnull!!null~nullnullnull~nullnull!!null~nullnullnull~nullnull!");
    }

    @Test
    public void test14072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14072");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("NN!!NN!!UNNNUNNNNN!!NN!!UNNNUNNNNN!!NN!!UNNNUNNNNN!!NN!!UNNNUNNNNN!!NN!!UNNNUNNNNN!!NN!!UNNNUNNNNN!!NN!!UNNNUNNNNN!!NN!!UNNNUNNN!", "L\276\275\275LUNN!LUNNLUNNLUNNLUNNL\276\275\275LUNN!LUNNLUNNLUNNLUNN!!L\276\275\275LUNN!LUNNLUNNLUNNLUNNL\276\275\275LUNN!LUNNLUNNLUNNLUNN!!L\276\275\275LUNN!LUNNLUNNLUNNLUNNL\276\275\275LUNN!LUNNLUNNLUNNLUNN!!L\276\275\275LUNN!LUNNLUNNLUNNLUNNL\276\275\275LUNN!LUNNLUNNLUNNLUNN!!L\276\275\275LUNN!LUNNLUNNLUNNLUNNL\276\275\275LUNN!LUNNLUNNLUNNLUNN!!L\276\275\275LUNN!LUNNLUNNLUNNLUNNL\276\275\275LUNN!LUNNLUNNLUNNLUNN!!L\276\275\275LUNN!LUNNLUNNLUNNLUNNL\276\275\275LUNN!LUNNLUNNLUNNLUNN!!L\276\275\275LUNN!LUNNLUNNLUNNLUNNL\276\275\275LUNN!LUNNLUNNLUNNLUNN!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLL!" + "'", str2, "LL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLL!");
    }

    @Test
    public void test14073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14073");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!", "\u0366\u0365\u0368\u0368!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!!!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!!!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!!!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!" + "'", str2, "````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!");
    }

    @Test
    public void test14074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14074");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decodeu02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\300\300\300\300\300\300\300\300\300\300\300\300\u02fa\300\300\300\300\300\300\300\300\300\300\300\300\u02fa\300\300\300\300\300\300\300\300\300\300\300\300\u02fa\300\300\300\300\300\300\300\300\300\300\300\300\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\300\300\300\300\300\300\300\300\300\300\300\300\u02fa\300\300\300\300\300\300\300\300\300\300\300\300!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14075");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("UU!!UU!!!!UU!!UU!!!!UU!!UU!!!!UU!!UU!!!!UU!!UU!!!!UU!!UU!!!!UU!!UU!!!!UU!!UU!!!!!", "nullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLL!!nullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLL!!nullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLL!!nullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLL!!nullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225!!!!!" + "'", str2, "\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225!!!!!");
    }

    @Test
    public void test14076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14076");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]!", "UPPP\200}}`UPPP]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]!" + "'", str2, "null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]!");
    }

    @Test
    public void test14077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14077");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("unllunll!!unllunll!!unllunll!!unllunll!!unllunll!!unllunll!!unllunll!!unllunll!!!", "NLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!!" + "'", str2, "NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!!");
    }

    @Test
    public void test14078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14078");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("}~\200\200}~\200\200!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull}~\200\200}~\200\200!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!", "!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~\200\200}~\200\200!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn}~\200\200}~\200\200!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!" + "'", str2, "}~\200\200}~\200\200!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn}~\200\200}~\200\200!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!");
    }

    @Test
    public void test14079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14079");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("UNLLUNLLUNLLUNLLUNLL!", "nullUNLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14080");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108!!!", "````````````````````````````````````````````````````````````````````````````````!!````````````````````````````````````````````````````````````````````````````````!!````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!!````````````````````````````````````````````````````````````````````````````````!!````````````````````````````````````````````````````````````````````````````````!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!" + "'", str2, "!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!");
    }

    @Test
    public void test14081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14081");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null]nullnullnull]nullnull!!null]nullnullnull]nullnull!!null]nullnullnull]nullnullnull]nullnullnull]nullnull!!null]nullnullnull]nullnull!!null]nullnullnull]nullnull!" + "'", str2, "null]nullnullnull]nullnull!!null]nullnullnull]nullnull!!null]nullnullnull]nullnullnull]nullnullnull]nullnull!!null]nullnullnull]nullnull!!null]nullnullnull]nullnull!");
    }

    @Test
    public void test14082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14082");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull!!\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull!!\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull!!\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull!!\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull!", "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253null\256N\260\260nullnullnull\256N\260\260nullnull\253\253null\256N\260\260nullnullnull\256N\260\260nullnull\253\253null\256N\260\260nullnullnull\256N\260\260nullnull\253\253null\256N\260\260nullnullnull\256N\260\260nullnull\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253null\256N\260\260nullnullnull\256N\260\260nullnull\253\253null\256N\260\260nullnullnull\256N\260\260nullnull\253\253!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14083");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("H\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HH!", "H\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "H\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HH!" + "'", str2, "H\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HH!");
    }

    @Test
    public void test14084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14084");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!", "\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126!~~!" + "'", str2, "\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126!~~!");
    }

    @Test
    public void test14085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14085");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u013d\u013e\u0140\u0140\u013d\u013e\u0140\u0140nullnull!", "!NLLLNLLLNLLL!NLLLNLLLNLLL!NLLLNLLLNLLL!NLLLNLLLNLLL!!NLLLNLLL!!NLLLNLLL!!NLLLNLLL!!NLLLNLLL!NLLLNLLLNLLL!NLLLNLLLNLLL!NLLLNLLLNLLL!NLLLNLLLNLLL!!NLLLNLLL!!NLLLNLLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullL!LLL!LLL!LLL!LLnullnullnullnullL!LLL!LL!" + "'", str2, "nullnullnullnullL!LLL!LLL!LLL!LLnullnullnullnullL!LLL!LL!");
    }

    @Test
    public void test14086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14086");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("H!!HH!!H!!HH!!!!H!!HH!!H!!HH!!!!H!!HH!!H!!HH!!H!!HH!!H!!HH!!!!H!!HH!!H!!HH!!!!H!!HH!!H!!HH!!!", "UUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUU\256UUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null!!nullnull!!null!!nullnull!!!!null!!nullnull!!null!!nullnull!!!!null!!nullnull!!null!!nullnull!!null!!nullnull!!null!!nullnull!!!!null!!nullnull!!null!!nullnull!!!!null!!nullnull!!null!!nullnull!!!" + "'", str2, "null!!nullnull!!null!!nullnull!!!!null!!nullnull!!null!!nullnull!!!!null!!nullnull!!null!!nullnull!!null!!nullnull!!null!!nullnull!!!!null!!nullnull!!null!!nullnull!!!!null!!nullnull!!null!!nullnull!!!");
    }

    @Test
    public void test14087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14087");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("null!!!!nullnull\256\254\254null!!!!nullnull\256\254\254!!null!!!!nullnull\256\254\254null!!!!nullnull\256\254\254!!null!!!!nullnull\256\254\254null!!!!nullnull\256\254\254!!null!!!!nullnull\256\254\254null!!!!nullnull\256\254\254!!null!!!!nullnull\256\254\254null!!!!nullnull\256\254\254!!null!!!!nullnull\256\254\254null!!!!nullnull\256\254\254!!null!!!!nullnull\256\254\254null!!!!nullnull\256\254\254!!null!!!!nullnull\256\254\254null!!!!nullnull\256\254\254!!!", "!nullnull\333\333nullnull\333\333nullnull\333\333!nullnull\333\333nullnull\333\333nullnull\333\333!nullnull\333\333nullnull\333\333nullnull\333\333!nullnull\333\333nullnull\333\333nullnull\333\333~}}^!nullnull\333\333nullnull\333\333nullnull\333\333!nullnull\333\333nullnull\333\333nullnull\333\333!nullnull\333\333nullnull\333\333nullnull\333\333!nullnull\333\333nullnull\333\333nullnull\333\333]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!!" + "'", str2, "LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!!");
    }

    @Test
    public void test14088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14088");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("`OROOOROOOROO`
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`^]^^^]^^^]^^`^]^^^]^^^]^^!" + "'", str2, "`^]^^^]^^^]^^`^]^^^]^^^]^^!");
    }

    @Test
    public void test14089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14089");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225!", "`!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!`!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225!" + "'", str2, "\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225!");
    }

    @Test
    public void test14090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14090");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b!", "hgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjj!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b!" + "'", str2, "\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b!");
    }

    @Test
    public void test14091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14091");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!!!!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!!!!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!!!!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!!!!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!!!!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!!!!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!!!!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!!!!!!!!" + "'", str
    }

    @Test
    public void test14092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14092");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!", "\253\254\256\256\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\253\254\256\256\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!" + "'", str2, "!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!");
    }

    @Test
    public void test14093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14093");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\300!!!\300!!!\300!!!\300!!!\300!!!\300!!!\300!!!\300!!!!", "!!!!\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352!!\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352!!\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352!!\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352!!\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!" + "'", str2, "null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!");
    }

    @Test
    public void test14094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14094");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("nullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLL!!nullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLL!!nullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLL!!nullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLL!!nullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLL!", "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253UNLLUNLL\253\253UNLLUNLL\253\253UNLLUNLL\253\253UNLLUNLL\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253UNLLUNLL\253\253UNLLUNLL\253\253!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14095");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("lluulluuLLUULLUUlluulluuLLUULLUUlluulluuLLUULLUUlluulluuLLUULLUUlluulluuLLUULLUUlluulluuLLUULLUUlluulluuLLUULLUUlluulluuLLUULLUU!", "~}\200\200~}\200\200NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLL~}\200\200~}\200\200NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLL~}\200\200~}\200\200NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLL~}\200\200~}\200\200NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLL~}\200\200~}\200\200NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLL~}\200\200~}\200\200NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLL~}\200\200~}\200\200NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLL~}\200\200~}\200\200NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0nullnull!" + "'", str2, "\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0nullnull!");
    }

    @Test
    public void test14096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14096");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037enullnull!", "null~}}^null]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e]nullll]nullll!" + "'", str2, "\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e]nullll]nullll!");
    }

    @Test
    public void test14097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14097");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!", "LUUULUUUUULUUULUUUUULUUULUUUUULUUULUUUUULUUULUUUUULUUULUUUUULUUULUUUUULUUULUUUUU!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348!!\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348!!\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348!!\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348!!\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348!" + "'", str2, "\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348!!\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348!!\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348!!\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348!!\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348!");
    }

    @Test
    public void test14098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14098");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0366\u0365\u0368\u0368LL!!LL!!\200\200\u0346\u0348\u0348!", "\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7LL```!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u035d\u035d\u035d\u035d!!\200\200\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u035d\u035d\u035d\u035d!!\200\200\u0346\u0348\u0348!");
    }

    @Test
    public void test14099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14099");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253RRTTRRTT\253\253RRTTRRTT\253\253RRTTRRTT\253\253RRTTRRTT\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253RRTTRRTT\253\253RRTTRRTT\253\253!", "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnull\276\276nullnull\276\276\253\253nullnull\276\276nullnull\276\276\253\253nullnull\276\276nullnull\276\276\253\253nullnull\276\276nullnull\276\276\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnull\276\276nullnull\276\276\253\253nullnull\276\276nullnull\276\276\253\253!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull\253\253!" + "'", str2, "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull\253\253!");
    }

    @Test
    public void test14100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14100");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253UU]]UU]]\276\276UU]]UU]]\276\276\253\253UU]]UU]]\276\276UU]]UU]]\276\276\253\253UU]]UU]]\276\276UU]]UU]]\276\276\253\253UU]]UU]]\276\276UU]]UU]]\276\276\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253UU]]UU]]\276\276UU]]UU]]\276\276\253\253UU]]UU]]\276\276UU]]UU]]\276\276\253\253!", "LLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUU!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253!" + "'", str2, "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253!");
    }

    @Test
    public void test14101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14101");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!\255nullnull!\255nullnull!\255nullnull!\255nullnull!\255nullnull!", "\276nullnullrr\275\275\276nullnullrr\275\275null!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rr\276nullnullrr\275\275\276nullnullrr\275\275null!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rr\276nullnullrr\275\275\276nullnullrr\275\275null!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rr\276nullnullrr\275\275\276nullnullrr\275\275null!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rr\276nullnullrr\275\275\276nullnullrr\275\275null!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rr\276nullnullrr\275\275\276nullnullrr\275\275null!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rr\276nullnullrr\275\275\276nullnullrr\275\275null!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rr\276nullnullrr\275\275\276nullnullrr\275\275null!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rr!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\255RRLLRRLL!\255RRLLRRLL!\255RRLLRRLL!\255RRLLRRLL!\255RRLLRRLL!" + "'", str2, "!\255RRLLRRLL!\255RRLLRRLL!\255RRLLRRLL!\255RRLLRRLL!\255RRLLRRLL!");
    }

    @Test
    public void test14102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14102");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\220EEE\220EEE!!\220EEE\220EEE!!\220EEE\220EEE!!\220EEE\220EEE!!\220EEE\220EEE!!\220EEE\220EEE!!\220EEE\220EEE!!\220EEE\220EEE!!!", "nullnull]]nullnull]]LnullnullnullLnullnullnullnullnull]]nullnull]]LnullnullnullLnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!!" + "'", str2, "\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!!");
    }

    @Test
    public void test14103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14103");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("", "\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14104");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305\200}}`\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test14105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14105");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264!", "LUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLL!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14106");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!", "!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!!!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!!!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!!!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!!!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!" + "'", str2, "``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!");
    }

    @Test
    public void test14107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14107");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("ss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssss!", "LNNN\256\254\254LNNN\256\254\254!!LNNN\256\254\254LNNN\256\254\254!!LNNN\256\254\254LNNN\256\254\254!!LNNN\256\254\254LNNN\256\254\254!!LNNN\256\254\254LNNN\256\254\254!!LNNN\256\254\254LNNN\256\254\254!!LNNN\256\254\254LNNN\256\254\254!!LNNN\256\254\254LNNN\256\254\254!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnull!" + "'", str2, "nullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14108");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL!", "\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``!" + "'", str2, "\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``!");
    }

    @Test
    public void test14109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14109");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0348\u0348\u01e0\u01e0\u01e0\u0348\u0348\u01e0\u01e0\u01e0\u0348\u0348\u01e0\u01e0\u01e0\u0348\u0348\u01e0\u01e0\u01e0\200\u0348\u0348\u01e0\u01e0\u01e0\u0348\u0348\u01e0\u01e0\u01e0\u0348\u0348\u01e0\u01e0\u01e0\u0348\u0348\u01e0\u01e0\u01e0]]!", "\260\260nullnull\260\260nullnull}}\260\260nullnull\260\260nullnull}}!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~nullnullnull\200\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~nullnullnull]]!" + "'", str2, "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~nullnullnull\200\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~nullnullnull]]!");
    }

    @Test
    public void test14110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14110");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!", "\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!" + "'", str2, "\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!");
    }

    @Test
    public void test14111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14111");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull!", "\u0366\u0365\u0368\u0368\u019e\u019c\u019c\u019e\u019c\u019c\u019e\u019c\u019c\u019e\u019c\u019c\u019e\u019c\u019c\u019e\u019c\u019c\u019e\u019c\u019c\u019e\u019c\u019c\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019cNN\275\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019cNN!" + "'", str2, "\275\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019cNN\275\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019cNN!");
    }

    @Test
    public void test14112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14112");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("U!LLU!LL!!U!LLU!LL!!U!LLU!LLU!LLU!LL!!U!LLU!LL!!U!LLU!LL!", "!!!!\300\300!!\300\300!!\300\300!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\300\300!!\300\300!!\300\300!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" + "'", str2, "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    @Test
    public void test14113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14113");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262!", "LNUULNUUNNLNUULNUUNNLNUULNUUNNLNUULNUUNNLNUULNUUNNLNUULNUUNNLNUULNUUNNLNUULNUUNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14114");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200!", "nullnull\333null\330\330\333null\330\330nullnull\333null\330\330\333null\330\330\214\214nullnull\333null\330\330\333null\330\330nullnull\333null\330\330\333null\330\330\214\214nullnull\333null\330\330\333null\330\330nullnull\333null\330\330\333null\330\330\214\214nullnull\333null\330\330\333null\330\330nullnull\333null\330\330\333null\330\330\214\214nullnull\333null\330\330\333null\330\330nullnull\333null\330\330\333null\330\330\214\214nullnull\333null\330\330\333null\330\330nullnull\333null\330\330\333null\330\330\214\214nullnull\333null\330\330\333null\330\330nullnull\333null\330\330\333null\330\330\214\214nullnull\333null\330\330\333null\330\330nullnull\333null\330\330\333null\330\330\214\214!");
        org.junit.Assert.assertEquals("'" + strstr2, "\214L\330\330\214L\330\330\200\200!\214L\330\330\214L\330\330\200\200\214L\330\330\214L\330\330\200\200\214L\330\330\214L\330\330\200\200!\214L\330\330\214L\330\330\200\200\214L\330\330\214L\330\330\200\200\214L\330\330\214L\330\330\200\200!\214L\330\330\214L\330\330\200\200\214L\330\330\214L\330\330\200\200\214L\330\330\214L\330\330\200\200!\214L\330\330\214L\330\330\200\200\214L\330\330\214L\330\330\200\200\214L\330\330\214L\330\330\200\200!\214L\330\330\214L\330\330\200\200\214L\330\330\214L\330\330\200\200\214L\330\330\214L\330\330\200\200!\214L\330\330\214L\330\330\200\200\214L\330\330\214L\330\330\200\200\214L\330\330\214L\330\330\200\200!\214L\330\330\214L\330\330\200\200\214L\330\330\214L\330\330\200\200\214L\330\330\214L\330\330\200\200!\214L\330\330\214L\330\330\200\200\214L\330\330\214L\330\330\200\200!");
    }

    @Test
    public void test14115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14115");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02be\u02be\u02be\u02be!", "NNNNNNNN\214\214NNNNNNNN\214\214NNNNNNNN\214\214NNNNNNNN\214\214NNNNNNNN\214\214NNNNNNNN\214\214NNNNNNNN\214\214NNNNNNNN\214\214!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\256nullnullnull\256nullnullnullnullnull\256nullnullnull\256nullnullnullnullnull\256nullnullnull\256nullnullnullnullnull\256nullnullnull\256nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\256nullnullnull\256nullnullnullnullnull\256nullnullnull\256nullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\256nullnullnull\256nullnullnullnullnull\256nullnullnull\256nullnullnullnullnull\256nullnullnull\256nullnullnullnullnull\256nullnullnull\256nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\256nullnullnull\256nullnullnullnullnull\256nullnullnull\256nullnullnullnullnull!");
    }

    @Test
    public void test14116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14116");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("~~
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~~!" + "'", str2, "~~!");
    }

    @Test
    public void test14117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14117");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0366\u0365\u0368\u0368\u0128\u0128\u0128\u0128\u0346\u0348\u0348!", "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253RRTTRRTT\253\253RRTTRRTT\253\253RRTTRRTT\253\253RRTTRRTT\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253RRTTRRTT\253\253RRTTRRTT\253\253!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test14118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14118");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230\200}}```MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230]]!", "\275\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\200\200\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\200\200\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\200\200\276\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\200\200\275\275!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230\200}}```UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230]]!" + "'", str2, "``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230\200}}```UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230]]!");
    }

    @Test
    public void test14119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14119");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!" + "'", str2, "!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!");
    }

    @Test
    public void test14120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14120");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", "\275\276\u031d\u031dLL\275\276\u031d\u031dLL\225\225\275\276\u031d\u031dLL\275\276\u031d\u031dLL\225\225\275\276\u031d\u031dLL\275\276\u031d\u031dLL\225\225\275\276\u031d\u031dLL\275\276\u031d\u031dLL\225\225\275\276\u031d\u031dLL\275\276\u031d\u031dLL\225\225\275\276\u031d\u031dLL\275\276\u031d\u031dLL\225\225\275\276\u031d\u031dLL\275\276\u031d\u031dLL\225\225\275\276\u031d\u031dLL\275\276\u031d\u031dLL\225\225!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" + "'", str2, "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    @Test
    public void test14121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14121");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14122");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!!!!!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!!!!!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!", "]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!!!!!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!" + "'", str2, "!!!!!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!!!!!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!");
    }

    @Test
    public void test14123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14123");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!!!!]!!!!!!", "!HHH!HHH!!!HHH!HHH!!!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!!!HHH!HHH!!!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!!!HHH!HHH!!!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!!!HHH!HHH!!!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!!!HHH!HHH!!!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!!!HHH!HHH!!!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!!!HHH!HHH!!!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!!!HHH!HHH!!!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!!!!]!!!!!!" + "'", str2, "!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!!!!]!!!!!!");
    }

    @Test
    public void test14124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14124");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225!", "\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\200\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225!" + "'", str2, "\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225!");
    }

    @Test
    public void test14125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14125");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!!", "HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226HL\226\226\275HL\226\226HL\226\226\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14126");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("", "~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14127");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("", "\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14128");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!", "]!!\275\275\275!!!!\275\275\275!!!!\275\275\275!!!!\275\275\275!!!!\275\275\275!!]]!!\275\275\275!!!!\275\275\275!!]]!!\275\275\275!!!!\275\275\275!!]]!!\275\275\275!!!!\275\275\275!!]]]!!\275\275\275!!!!\275\275\275!!!!\275\275\275!!!!\275\275\275!!!!\275\275\275!!]]!!\275\275\275!!!!\275\275\275!!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!" + "'", str2, "!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!");
    }

    @Test
    public void test14129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14129");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``\254~\256\256\254~\256\256\254~\256\256\254~
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``\254~\256\256\254~\256\256\254~\256\256\254~\256\256!" + "'", str2, "!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``\254~\256\256\254~\256\256\254~\256\256\254~\256\256!");
    }

    @Test
    public void test14130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14130");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!", "nullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBB!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e!" + "'", str2, "\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e!");
    }

    @Test
    public void test14131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14131");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0366\u0365\u0368\u0368\u0170\u0170\u0346\u0348\u0348!", "");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test14132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14132");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL``LL!", "\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!!" + "'", str2, "``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!!");
    }

    @Test
    public void test14133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14133");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0!", "L!LULLLULLL!LULLLULLL!LULLLULLL!LULLLULLL!LULLLULLL!LULLLULLL!LULLLULLL!LULLLULL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!nullnullnull!nullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!nullnullnull!nullnullnull!");
    }

    @Test
    public void test14134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14134");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e!", "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346llnullnull!" + "'", str2, "\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346llnullnull!");
    }

    @Test
    public void test14135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14135");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225!!!!\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225!", "null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225!!!!\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225!" + "'", str2, "\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225!!!!\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225!");
    }

    @Test
    public void test14136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14136");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017enullnullnullnull!", "\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019all!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u023d\u023d\u023d\u023d\u023d\u023d\u023d\u023d\u023d\u023d\u023d\u023dU~~!" + "'", str2, "\u023d\u023d\u023d\u023d\u023d\u023d\u023d\u023d\u023d\u023d\u023d\u023dU~~!");
    }

    @Test
    public void test14137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14137");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0366\u0365\u0368\u0368LL!!\213\213\213\u0346\u0348\u0348!", "null]!]]]!]]]!]]null]!]]]!]]]!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368TT!!\213\213\213\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368TT!!\213\213\213\u0346\u0348\u0348!");
    }

    @Test
    public void test14138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14138");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!\253\256\256\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!", "!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\253\256\256\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!" + "'", str2, "!\253\256\256\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!");
    }

    @Test
    public void test14139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14139");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("xxxxxxxx!!xxxxxxxx!!xxxxxxxx!!xxxxxxxx!!xxxxxxxx!!xxxxxxxx!!xxxxxxxx!!xxxxxxxx!!!", "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!" + "'", str2, "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!");
    }

    @Test
    public void test14140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14140");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL!", "\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull!" + "'", str2, "~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14141");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("}~\200\200}~\200\200!\335\335\335!\335\335\335!\335\335\335!\335\335\335!\335\335\335!\335\335\335!\335\335\335!\335\335\335}~\200\200}~\200\200!\335\335\335!\335\335\335!\335\335\335!\335\335\335!\335\335\335!\335\335\335!\335\335\335!\335\335\335!", "UNLLUNLL!!``UNLLUNLL``UNLLUNLL``UNLLUNLLUNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!``UNLLUNLL``UNLLUNLL``UNLLUNLLUNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~\200\200}~\200\200!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull}~\200\200}~\200\200!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!" + "'", str2, "}~\200\200}~\200\200!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull}~\200\200}~\200\200!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!");
    }

    @Test
    public void test14142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14142");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("", "\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14143");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!!", "]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!!" + "'", str2, "\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!!");
    }

    @Test
    public void test14144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14144");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0346\u0348\u0348\u0348\u0348\u0346\u0346!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test14145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14145");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!" + "'", str
    }

    @Test
    public void test14146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14146");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("LLUULLUULLUULLUULLUULLUULLUULLUU!!LLUULLUULLUULLUULLUULLUULLUULLUU!!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!!LLUULLUULLUULLUULLUULLUULLUULLUU!!LLUULLUULLUULLUULLUULLUULLUULLUU!", "\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151nullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!" + "'", str2, "\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!");
    }

    @Test
    public void test14147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14147");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("^~~~^\220~~^\220~~^\220~~^\220~~^~~~^\220~~^\220~~!", "UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^~~~^\220~~^\220~~^\220~~^\220~~^~~~^\220~~^\220~~!" + "'", str2, "^~~~^\220~~^\220~~^\220~~^\220~~^~~~^\220~~^\220~~!");
    }

    @Test
    public void test14148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14148");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullL\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullL\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!" + "'", str2, "!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!");
    }

    @Test
    public void test14149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14149");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d!!!", "\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull~}}^\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!" + "'", str2, "nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!");
    }

    @Test
    public void test14150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14150");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!", "LLLLLLLLnullL\214\214nullL\214\214LLLLLLLLnullL\214\214nullL\214\214LLLLLLLLnullL\214\214nullL\214\214LLLLLLLLnullL\214\214nullL\214\214LLLLLLLLnullL\214\214nullL\214\214LLLLLLLLnullL\214\214nullL\214\214LLLLLLLLnullL\214\214nullL\214\214LLLLLLLLnullL\214\214nullL\214\214!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!" + "'", str2, "!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!");
    }

    @Test
    public void test14151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14151");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("ULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!", "\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]!" + "'", str2, "]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]!");
    }

    @Test
    public void test14152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14152");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\200\200!", "!]\223\223]]\223\223]]!]\223\223]]\223\223]]!]\223\223]]\223\223]]!]\223\223]]\223\223]]!]\223\223]]\223\223]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200\200!" + "'", str2, "\200\200!");
    }

    @Test
    public void test14153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14153");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("wxzzwxzz!!wxzzwxzz!!wxzzwxzzwxzzwxzz!!wxzzwxzz!!wxzzwxzz!", "UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226!!UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14154");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("", "\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14155");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0107\u0105\u0109\u0109\u0107\u0105\u0109\u0109!", "NLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnn!!NLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnn!!NLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnn!!NLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnn!!NLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnn!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14156");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!!!!!!!]]!!!!!!!!]]!!!!!!!!nullnull!!!!!!!!nullnull!!!!!!!!]]!!!!!!!!]]!!!!!!!!nullnull!!!!!!!!nullnull!", "\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\200}}`\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!]]!!!!!!!!]]!!!!!!!!\312\314\312\312\312\314\312\312!!!!!!!!\312\314\312\312\312\314\312\312!!!!!!!!]]!!!!!!!!]]!!!!!!!!\312\314\312\312\312\314\312\312!!!!!!!!\312\314\312\312\312\314\312\312!" + "'", str2, "!!!!!!!!]]!!!!!!!!]]!!!!!!!!\312\314\312\312\312\314\312\312!!!!!!!!\312\314\312\312\312\314\312\312!!!!!!!!]]!!!!!!!!]]!!!!!!!!\312\314\312\312\312\314\312\312!!!!!!!!\312\314\312\312\312\314\312\312!");
    }

    @Test
    public void test14157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14157");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u017d\u017d\u017d\u017d\260\255\255\225\230\230\u017d\u017d\u017d\u017d\260\255\255\225\230\230\u017d\u017d\u017d\u017d\260\255\255\225\230\230\u017d\u017d\u017d\u017d\260\255\255\225\230\230\200\u017d\u017d\u017d\u017d\260\255\255\225\230\230\u017d\u017d\u017d\u017d\260\255\255\225\230\230\u017d\u017d\u017d\u017d\260\255\255\225\230\230\u017d\u017d\u017d\u017d\260\255\255\225\230\230]]!", "nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230\200}}`!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230]]!" + "'", str2, "!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230\200}}`!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230]]!");
    }

    @Test
    public void test14158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14158");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("nn!!uunnuunnuunnnn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!uunnuunnuunnnn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200NN\215\215LNN\215\215NN\215\215NN\215\215LNN\215\215NN\215\215}~\200\200}~\200\200NN\215\215LNN\215\215NN\215\215NN\215\215LNN\215\215NN\215\215}~\200\200}~\200\200NN\215\215LNN\215\215NN\215\215NN\215\215LNN\215\215NN\215\215}~\200\200}~\200\200NN\215\215LNN\215\215NN\215\215NN\215\215LNN\215\215NN\215\215\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200\200!!NN\200\200NN\200\200NN\200\200\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!NN\200\200NN\200\200NN\200\200\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!!" + "'", str2, "\200\200!!NN\200\200NN\200\200NN\200\200\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!NN\200\200NN\200\200NN\200\200\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!!");
    }

    @Test
    public void test14159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14159");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!" + "'", str2, "!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!");
    }

    @Test
    public void test14160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14160");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336!", "]AAAnullnullnull\256\254\254]AAAnullnullnull\256\254\254!!]AAAnullnullnull\256\254\254]AAAnullnullnull\256\254\254!!]AAAnullnullnull\256\254\254]AAAnullnullnull\256\254\254!!]AAAnullnullnull\256\254\254]AAAnullnullnull\256\254\254!!]AAAnullnullnull\256\254\254]AAAnullnullnull\256\254\254!!]AAAnullnullnull\256\254\254]AAAnullnullnull\256\254\254!!]AAAnullnullnull\256\254\254]AAAnullnullnull\256\254\254!!]AAAnullnullnull\256\254\254]AAAnullnullnull\256\254\254!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull!" + "'", str2, "\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull!");
    }

    @Test
    public void test14161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14161");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("nullnulljjnullnulljj!!nullnulljjnullnulljj!!nullnulljjnullnulljjnullnulljjnullnulljj!!nullnulljjnullnulljj!!nullnulljjnullnulljj!", "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull!!\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull!!\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull!!\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull!!\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull!" + "'", str2, "\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull!!\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull!!\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull!!\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull!!\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull!");
    }

    @Test
    public void test14162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14162");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("nullnullnullnullnullnullnullnullLN]]LN]]nullnullnullnullnullnullnullnullLN]]LN]]nullnullnullnullnullnullnullnullLN]]LN]]nullnullnullnullnullnullnullnullLN]]LN]]nullnullnullnullnullnullnullnullLN]]LN]]nullnullnullnullnullnullnullnullLN]]LN]]nullnullnullnullnullnullnullnullLN]]LN]]nullnullnullnullnullnullnullnullLN]]LN]]!", "!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]!" + "'", str2, "LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]!");
    }

    @Test
    public void test14163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14163");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225!", "\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8ULLLULLLULLLULLLULLLULLLULLLULLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225!" + "'", str2, "\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225!");
    }

    @Test
    public void test14164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14164");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0366\u0365\u0368\u0368!!]]!!]]\200\200\u0346\u0348\u0348!", "!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368!!]]!!]]\200\200\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368!!]]!!]]\200\200\u0346\u0348\u0348!");
    }

    @Test
    public void test14165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14165");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\200nullnullnullnull\220\220\200nullnullnullnull\220\220\200nullnullnullnull\220\220\200nullnullnullnull\220\220\200nullnullnullnull\220\220\200nullnullnullnull\220\220\200nullnullnullnull\220\220\200nullnullnullnull\220\220!", "nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220!" + "'", str2, "\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220!");
    }

    @Test
    public void test14166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14166");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200!!~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200!!~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200!!~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200!!~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200!", "L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200!!~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200!!~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200!!~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200!!~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200!" + "'", str2, "~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200!!~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200!!~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200!!~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200!!~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200!");
    }

    @Test
    public void test14167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14167");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("~}\200\200~}\200\200nullnull\336\336nullnull\336\336~}\200\200~}\200\200nullnull\336\336nullnull\336\336~}\200\200~}\200\200nullnull\336\336nullnull\336\336~}\200\200~}\200\200nullnull\336\336nullnull\336\336~}\200\200~}\200\200nullnull\336\336nullnull\336\336~}\200\200~}\200\200nullnull\336\336nullnull\336\336~}\200\200~}\200\200nullnull\336\336nullnull\336\336~}\200\200~}\200\200nullnull\336\336nullnull\336\336!", "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull!" + "'", str2, "~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull!");
    }

    @Test
    public void test14168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14168");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!", "\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!" + "'", str2, "]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!");
    }

    @Test
    public void test14169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14169");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!", "LLLLLLLLLLLLLLLLLLLLLLLLLLLL\200}}`LLLLLLLLLLLLLLLLLLLLLLLLLLLL]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!" + "'", str2, "!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!");
    }

    @Test
    public void test14170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14170");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\335LLL\335nullLL\335nullLL\335nullLL\335nullLL\335LLL\335nullLL\335nullLL!", "^^^^]nullnullnullnullnullnullnullnullnullnull^^]nullnullnullnullnullnullnullnullnullnull^^]nullnullnullnullnullnullnullnullnullnull^^]nullnullnullnullnullnullnullnullnullnull^^^^^^]nullnullnullnullnullnullnullnullnullnull^^]nullnullnullnullnullnullnullnullnullnull^^!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0148\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148\u0148\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148!" + "'", str2, "\u0148\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148\u0148\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148!");
    }

    @Test
    public void test14171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14171");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245!" + "'", str2, "\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245!");
    }

    @Test
    public void test14172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14172");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!!", "ULLL!LLL!LLL!LLL!LLLULLL!LLL!LLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!" + "'", str2, "nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!");
    }

    @Test
    public void test14173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14173");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("nullnullnullnull\200\200!!\200\200!!\200\200!!\200\200!!!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200rrrr\214rrrrrrrrrrrr\214rrrrrrrr}~\200\200}~\200\200rrrr\214rrrrrrrrrrrr\214rrrrrrrr}~\200\200}~\200\200rrrr\214rrrrrrrrrrrr\214rrrrrrrr}~\200\200}~\200\200rrrr\214rrrrrrrrrrrr\214\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200\200!!\200\200!!\200\200!!\200\200!!!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200\200!!\200\200!!\200\200!!\200\200!!!");
    }

    @Test
    public void test14174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14174");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u02ed\u02ee\u02f0\u02f0\u02ed\u02ee\u02f0\u02f0\u02ed\u02ee\u02f0\u02f0\u02ed\u02ee\u02f0\u02f0!", "null~\210null\212\212\210null\212\212null~\210null\212\212\210null\212\212!!null~\210null\212\212\210null\212\212null~\210null\212\212\210null\212\212!!null~\210null\212\212\210null\212\212null~\210null\212\212\210null\212\212null~\210null\212\212\210null\212\212null~\210null\212\212\210null\212\212!!null~\210null\212\212\210null\212\212null~\210null\212\212\210null\212\212!!null~\210null\212\212\210null\212\212null~\210null\212\212\210null\212\212!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210\u02ed\u02f0\u02f0\u02ed\u02f0\u02f0\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210\u02ed\u02f0\u02f0\u02ed\u02f0\u02f0!" + "'", str2, "\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210\u02ed\u02f0\u02f0\u02ed\u02f0\u02f0\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210\u02ed\u02f0\u02f0\u02ed\u02f0\u02f0!");
    }

    @Test
    public void test14175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14175");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!!!!!!!!!null!!!null!!!!!!!!!!!null!!!null!!!null!!!!!!!null!!!null!!!null!!!!!!!null!!!null!!!null!!!!!!!null!!!null!!!null!!!!!!!null!!!null!!!!!!!!!!!null!!!null!!!!!!!!!!!null!!!null!!!", "\u0127\u0126\u0127\u0126\u0127\u0126\u0127\u0126\u0127\u0126\u0127\u0126``]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!nullnullnullnull!!!nullnullnullnull!!!!!!!!!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!!!!nullnullnullnull!!!nullnullnullnull!!!!!!!!!!!nullnullnullnull!!!nullnullnullnull!!!!!!!!!!!nullnullnullnull!!!nullnullnullnull!!!" + "'", str2, "!!!!!!!!!nullnullnullnull!!!nullnullnullnull!!!!!!!!!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!!!!nullnullnullnull!!!nullnullnullnull!!!!!!!!!!!nullnullnullnull!!!nullnullnullnull!!!!!!!!!!!nullnullnullnull!!!nullnullnullnull!!!");
    }

    @Test
    public void test14176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14176");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244!!!", "");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!");
    }

    @Test
    public void test14177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14177");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM!", "\275\275\275\275\275\275\275\275!!\275\275\275\275\275\275\275\275!!\275\275\275\275\275\275\275\275!!\275\275\275\275\275\275\275\275!!\275\275\275\275\275\275\275\275!!\275\275\275\275\275\275\275\275!!\275\275\275\275\275\275\275\275!!\275\275\275\275\275\275\275\275!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull!" + "'", str2, "^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14178");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128nullnullnull!", "!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUUUULNUULNUUUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUUUULNUULNUUUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUU!" + "'", str
    }

    @Test
    public void test14179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14179");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e!", "");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14180");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0366\u0365\u0368\u0368\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0348\u0348!", "\240\240\236\236]]]\240\240\236\236]]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0348\u0348!");
    }

    @Test
    public void test14181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14181");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u02be!!\216\254\254\u02be!!\216\254\254\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be!!\216\254\254\u02be!!\216\254\254\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be!!\216\254\254\u02be!!\216\254\254\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be!!\216\254\254\u02be!!\216\254\254\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be!!\216\254\254\u02be!!\216\254\254\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be!!\216\254\254\u02be!!\216\254\254\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be!!\216\254\254\u02be!!\216\254\254\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be!!\216\254\254\u02be!!\216\254\254\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be!!!", "rrpprrppRRPPRRPPrrpprrppRRPPRRPPrrpprrppRRPPRRPPrrpprrppRRPPRRPPrrpprrppRRPPRRPPrrpprrppRRPPRRPPrrpprrppRRPPRRPPrrpprrppRRPPRRPP!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!" + "'", str2, "!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!");
    }

    @Test
    public void test14182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14182");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\336\335\340\340\336\335\340\340!", "\275``nullnull!!nullnull!!``nullnull!!nullnull!!``nullnull!!nullnull!!\276``nullnull!!nullnull!!\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14183");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043bnullnull!", "]LNLLLNLLLNLLLNLLLNLL]]LNLLLNLL]]LNLLLNLL]]LNLLLNLL]]]LNLLLNLLLNLLLNLLLNLL]]LNLLLNLL]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264!!\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264!!\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264!!\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264!!\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264!" + "'", str2, "\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264!!\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264!!\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264!!\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264!!\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264!");
    }

    @Test
    public void test14184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14184");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!\200}}`!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!]]!", "\u0346\u0348\u0348\u0348\u037e\u037e\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\200}}`!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!]]!" + "'", str2, "!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\200}}`!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!]]!");
    }

    @Test
    public void test14185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14185");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("null\230\226\226null\230\226\226null\230\226\226null\230\226\226null\230\226\226null\230\226\226null\230\226\226null\230\226\226!!null\230\226\226null\230\226\226null\230\226\226null\230\226\226null\230\226\226null\230\226\226null\230\226\226null\230\226\226!!!", "}~\200\200}~\200\200\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338}~\200\200}~\200\200\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226!!!" + "'", str2, "\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226!!!");
    }

    @Test
    public void test14186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14186");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225!", "UULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225!" + "'", str2, "\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225!");
    }

    @Test
    public void test14187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14187");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\275NULLNULLNULL\276NULL\275\275!", "ppnnppnnppnnppnn!ppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnn!ppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnn!ppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnn!ppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnn!ppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnn!ppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnn!ppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnn!ppnnppnnppnnppnnppnnppnnppnnppnn!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\u01c8\u01c8\u01c8nullnullnull\276\u01c8nullnullnull\275\275!" + "'", str2, "\275\u01c8\u01c8\u01c8nullnullnull\276\u01c8nullnullnull\275\275!");
    }

    @Test
    public void test14188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14188");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0260\u0260\u0260\u0260\u0260\u0260\u0260\u0260\u0260\u0260nullnull!!!", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!");
    }

    @Test
    public void test14189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14189");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253!", "!NNLLNNLLNNLLNNLL!!!NNLLNNLLNNLLNNLL!!!!!NNLLNNLLNNLLNNLL!!!NNLLNNLLNNLLNNLL!!!!!NNLLNNLLNNLLNNLL!!!NNLLNNLLNNLLNNLL!!!!!NNLLNNLLNNLLNNLL!!!NNLLNNLLNNLLNNLL!!!!!NNLLNNLLNNLLNNLL!!!NNLLNNLLNNLLNNLL!!!!!NNLLNNLLNNLLNNLL!!!NNLLNNLLNNLLNNLL!!!!!NNLLNNLLNNLLNNLL!!!NNLLNNLLNNLLNNLL!!!!!NNLLNNLLNNLLNNLL!!!NNLLNNLLNNLLNNLL!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253!" + "'", str2, "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253!");
    }

    @Test
    public void test14190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14190");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("nulluuu\225\230nullnull!!nulluuu\225\230nullnull!!!", "!\253\256\256\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\271\271!!\271\271\271\225\230\271\271!!\271\271!!!!\271\271!!\271\271\271\225\230\271\271!!\271\271!!!!!" + "'", str2, "\271\271!!\271\271\271\225\230\271\271!!\271\271!!!!\271\271!!\271\271\271\225\230\271\271!!\271\271!!!!!");
    }

    @Test
    public void test14191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14191");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u023e\u023e\u023e\200\u023e\u023e\u023e]]!", "null!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLUUnullnullnull\200}}`LLUUnullnullnull]]!" + "'", str2, "LLUUnullnullnull\200}}`LLUUnullnullnull]]!");
    }

    @Test
    public void test14192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14192");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("", "LLL!!LLLLL!!LL!!LLL!!LLLLL!!LL!!LLL!!LLLLL!!LLLLL!!LLLLL!!LL!!LLL!!LLLLL!!LL!!LLL!!LLLLL!!LL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14193");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!!", "}L\200\200}L\200\200}L\200\200}L\200\200LNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLL}L\200\200}L\200\200}L\200\200}L\200\200LNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!!" + "'", str2, "\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!!");
    }

    @Test
    public void test14194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14194");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226!!nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226!!!", "FFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHH!!FFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHH!!FFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHH!!FFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHH!!FFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226!!nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226!!!" + "'", str2, "nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226!!nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226!!!");
    }

    @Test
    public void test14195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14195");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248!", "\246\250\250\250\246\250\250\250!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!!!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!!!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!!!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!!!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!!!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!!!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!!!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!!!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14196");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!!L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!!L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!!L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!!L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!", "\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014eLL!");
// flaky:         org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14197");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226!!LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226!!!", "\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226!!!" + "'", str2, "\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226!!!");
    }

    @Test
    public void test14198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14198");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!", "U!VVU!VVLLU!VVU!VVLLU!VVU!VVLLU!VVU!VVLLU!VVU!VVLLU!VVU!VVLLU!VVU!VVLLU!VVU!VVLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!" + "'", str2, "!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!");
    }

    @Test
    public void test14199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14199");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\335\300\336\336\335\300\336\336\335\300\336\336\335\300\336\336\335\300\336\336\335\300\336\336\335\300\336\336\335\300\336\336!", "UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226!!UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nulllnullnullnulllnullnullnulllnullnullnulllnullnullnulllnullnullnulllnullnullnulllnullnullnulllnullnull!" + "'", str2, "nulllnullnullnulllnullnullnulllnullnullnulllnullnullnulllnullnullnulllnullnullnulllnullnullnulllnullnull!");
    }

    @Test
    public void test14200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14200");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\275LLL\275LLL!", "!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275]]]\275]]]!" + "'", str2, "\275]]]\275]]]!");
    }

    @Test
    public void test14201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14201");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("", "\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14202");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!", "null!\272\272null!\272\272!\272\272\272!\272\272\272null!\272\272null!\272\272!\272\272\272!\272\272\272!!null!\272\272null!\272\272!\272\272\272!\272\272\272null!\272\272null!\272\272!\272\272\272!\272\272\272!!null!\272\272null!\272\272!\272\272\272!\272\272\272null!\272\272null!\272\272!\272\272\272!\272\272\272null!\272\272null!\272\272!\272\272\272!\272\272\272null!\272\272null!\272\272!\272\272\272!\272\272\272!!null!\272\272null!\272\272!\272\272\272!\272\272\272null!\272\272null!\272\272!\272\272\272!\272\272\272!!null!\272\272null!\272\272!\272\272\272!\272\272\272null!\272\272null!\272\272!\272\272\272!\272\272\272!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!" + "'", str2, "````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!");
    }

    @Test
    public void test14203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14203");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\200\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7]]!", "");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnull!nullnullnull!nullnullnull!nullnullnull\200}}`!nullnullnull!nullnullnull!nullnullnull!nullnullnull]]!" + "'", str2, "!nullnullnull!nullnullnull!nullnullnull!nullnullnull\200}}`!nullnullnull!nullnullnull!nullnullnull!nullnullnull]]!");
    }

    @Test
    public void test14204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14204");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\335\300\300\300\335\300\300\300\335\300\300\300\335\300\300\300\200}}`\335\300\300\300\335\300\300\300\335\300\300\300\335\300\300\300]]!", "\u01d4\u01d4\u01d4\u01d4\220\220\u01d4\u01d4\u01d4\u01d4\220\220\220\u01d4\u01d4\220\220\220\u01d4\u01d4\220\220\220\u01d4\u01d4\220\220\220\u01d4\u01d4\220\220\u01d4\u01d4\u01d4\u01d4\220\220\u01d4\u01d4\u01d4\u01d4\220\220!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!");
    }

    @Test
    public void test14205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14205");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220!", "NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL\225\230\230NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL\225\230\230NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL\225\230\230NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL\225\230\230\200}}`NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL\225\230\230NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL\225\230\230NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL\225\230\230NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL\225\230\230]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220!" + "'", str2, "\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220!");
    }

    @Test
    public void test14206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14206");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226!!UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226!!!", "N!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NN!!N!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NN!!N!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NN!!N!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NN!!N!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226!!N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226!!!" + "'", str2, "N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226!!N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226!!!");
    }

    @Test
    public void test14207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14207");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0346\u0348\u0348\u0348\u0248\u0246\u0246\u0246\u0348\u0346\u0346!", "!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test14208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14208");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("", "\u0366\u0365\u0368\u0368\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14209");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("UUUU\236\276\276UUUU\236\276\276!!UUUU\236\276\276UUUU\236\276\276!!UUUU\236\276\276UUUU\236\276\276UUUU\236\276\276UUUU\236\276\276!!UUUU\236\276\276UUUU\236\276\276!!UUUU\236\276\276UUUU\236\276\276!", "!~\200FFFF~~\200FFFF~~!~\200FFFF~~\200FFFF~~!!!~\200FFFF~~\200FFFF~~!~\200FFFF~~\200FFFF~~!!!~\200FFFF~~\200FFFF~~!~\200FFFF~~\200FFFF~~!~\200FFFF~~\200FFFF~~!~\200FFFF~~\200FFFF~~!!!~\200FFFF~~\200FFFF~~!~\200FFFF~~\200FFFF~~!!!~\200FFFF~~\200FFFF~~!~\200FFFF~~\200FFFF~~!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276!" + "'", str2, "nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276!");
    }

    @Test
    public void test14210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14210");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e}}!", "!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LL!!LL!!}}LL!!LL!!}}!" + "'", str2, "LL!!LL!!}}LL!!LL!!}}!");
    }

    @Test
    public void test14211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14211");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test14212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14212");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214!", "Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226!!Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214!" + "'", str2, "\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214!");
    }

    @Test
    public void test14213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14213");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!" + "'", str2, "!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!");
    }

    @Test
    public void test14214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14214");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200!", "\u0366\u0365\u0368\u0368UNLL\213\213\213\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200!" + "'", str2, "\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200!");
    }

    @Test
    public void test14215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14215");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("f]fff]ff!!f]fff]ff!!f]fff]fff]fff]ff!!f]fff]ff!!f]fff]ff!", "\215\215\215\215\215\215\215\215!!\215\215\215\215\215\215\215\215!!\215\215\215\215\215\215\215\215\215\215\215\215\215\215\215\215!!\215\215\215\215\215\215\215\215!!\215\215\215\215\215\215\215\215!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!]!!!]!!!!!]!!!]!!!!!]!!!]!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!" + "'", str2, "!]!!!]!!!!!]!!!]!!!!!]!!!]!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!");
    }

    @Test
    public void test14216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14216");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("]null!!\254\253\256\256\254\253\256\256\254\253\256\256]null!!\254\253\256\256\254\253\256\256\254\253\256\256!!]null!!\254\253\256\256\254\253\256\256\254\253\256\256]null!!\254\253\256\256\254\253\256\256\254\253\256\256!!]null!!\254\253\256\256\254\253\256\256\254\253\256\256]null!!\254\253\256\256\254\253\256\256\254\253\256\256!!]null!!\254\253\256\256\254\253\256\256\254\253\256\256]null!!\254\253\256\256\254\253\256\256\254\253\256\256!!]null!!\254\253\256\256\254\253\256\256\254\253\256\256]null!!\254\253\256\256\254\253\256\256\254\253\256\256!!]null!!\254\253\256\256\254\253\256\256\254\253\256\256]null!!\254\253\256\256\254\253\256\256\254\253\256\256!!]null!!\254\253\256\256\254\253\256\256\254\253\256\256]null!!\254\253\256\256\254\253\256\256\254\253\256\256!!]null!!\254\253\256\256\254\253\256\256\254\253\256\256]null!!\254\253\256\256\254\253\256\256\254\253\256\256!!!", "\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120!nullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14217");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403!", "}~\200\200}~\200\200\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010bnullnull}~\200\200}~\200\200\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010bnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!" + "'", str2, "null!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!");
    }

    @Test
    public void test14218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14218");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```!", "URRR!LLRRLLRRURRR!LLRRLLRRURRR!LLRRLLRRURRR!LLRRLLRRURRR!LLRRLLRRURRR!LLRRLLRRURRR!LLRRLLRRURRR!LLRRLLRR!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```!" + "'", str2, "RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```!");
    }

    @Test
    public void test14219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14219");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u017e\u0180\u0180\u0180\u017e\u0180\u0180\u0180\u017e\u0180\u0180\u0180\u017e\u0180\u0180\u0180\u017e\u0180\u0180\u0180\u017e\u0180\u0180\u0180\u017e\u0180\u0180\u0180\u017e\u0180\u0180\u0180!", "null}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnull!!null}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnull!!null}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnull!!null}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnull!!null}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnull!!null}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnull!!null}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnull!!null}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!" + "'", str2, "!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!");
    }

    @Test
    public void test14220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14220");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!!!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!!!", "!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!!!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!!!" + "'", str2, "!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!!!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!!!");
    }

    @Test
    public void test14221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14221");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\200null!nullnull\220\220\200null!nullnull\220\220\200null!nullnull\220\220\200null!nullnull\220\220\200null!nullnull\220\220\200null!nullnull\220\220\200null!nullnull\220\220\200null!nullnull\220\220!", "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220!" + "'", str2, "\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220!");
    }

    @Test
    public void test14222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14222");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!\276\276\266\266\276\276\266\266!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!\276\276\266\266\276\276\266\266!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!\276\276\266\266\276\276\266\266!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!\276\276\266\266\276\276\266\266!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!\276\276\266\266\276\276\266\266!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!\276\276\266\266\276\276\266\266!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!\276\276\266\266\276\276\266\266!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!\276\276\266\266\276\276\266\266!", "!nullnullnull!nullnullnull!nullnullnull!nullnullnull~}}^!nullnullnull!nullnullnull!nullnullnull!nullnullnull]]!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14223");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("LLLLLLLL!", "\275\276null\225\225\276null\225\225\200\200\276null\225\225\276null\225\225\200\200\276null\225\225\276null\225\225\200\200\276\276null\225\225\276null\225\225\200\200\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~~~~~~~~!" + "'", str2, "~~~~~~~~!");
    }

    @Test
    public void test14224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14224");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u0317\u031a\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u0317\u031a\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u0317\u031a\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u0317\u031a\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0!", "~~\200\200!~~\200\200~~\200\200~~\200\200!~~\200\200~~\200\200!!~~\200\200!~~\200\200~~\200\200~~\200\200!~~\200\200~~\200\200!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0317\u031a\u0317\u031a\u0317\u031a\u0317\u031anullnullnullnullnullnullnullnull!" + "'", str2, "\u0317\u031a\u0317\u031a\u0317\u031a\u0317\u031anullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14225");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("nullnullllnullnullll!!nullnullllnullnullll!!nullnullllnullnullll!!nullnullllnullnullll!!nullnullllnullnullll!!nullnullllnullnullll!!nullnullllnullnullll!!nullnullllnullnullll!!!", "\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d]!]]]!]]]!]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d!!!" + "'", str2, "\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d!!!");
    }

    @Test
    public void test14226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14226");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("null\340\336\336nullnullnullnull\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336nullnullnullnull\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336!", "\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198nullnullnullnullnullnullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UNLLluuUNLLUNLLUNLLUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLUNLLUNLLUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluu!" + "'", str2, "UNLLluuUNLLUNLLUNLLUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLUNLLUNLLUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluu!");
    }

    @Test
    public void test14227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14227");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("U!\275\275U!\275\275UUU!\275\275U!\275\275UUU!\275\275U!\275\275UUU!\275\275U!\275\275UUU!\275\275U!\275\275UUU!\275\275U!\275\275UUU!\275\275U!\275\275UUU!\275\275U!\275\275UU!", "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LL!" + "'", str2, "L!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LL!");
    }

    @Test
    public void test14228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14228");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac^^!", "~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^^^^]null^^]null^^]null^^]null^^^^^^]null^^]null^^!" + "'", str2, "^^^^]null^^]null^^]null^^]null^^^^^^]null^^]null^^!");
    }

    @Test
    public void test14229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14229");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!!!!\230nullnullnull\230nullnullnull\230nullnullnull!\230nullnullnull\230nullnullnull\230nullnullnull!\230nullnullnull\230nullnullnull\230nullnullnull!\230nullnullnull\230nullnullnull\230nullnullnull!!!!!\230nullnullnull\230nullnullnull\230nullnullnull!\230nullnullnull\230nullnullnull\230nullnullnull!", "LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!!!!!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!" + "'", str2, "!!!!!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!!!!!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!");
    }

    @Test
    public void test14230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14230");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!LL!!LL!!LL!!LL\256\254\254!!LL!!LL!!LL!!LL\256\254\254!!!!LL!!LL!!LL!!LL\256\254\254!!LL!!LL!!LL!!LL\256\254\254!!!!LL!!LL!!LL!!LL\256\254\254!!LL!!LL!!LL!!LL\256\254\254!!!!LL!!LL!!LL!!LL\256\254\254!!LL!!LL!!LL!!LL\256\254\254!!!!LL!!LL!!LL!!LL\256\254\254!!LL!!LL!!LL!!LL\256\254\254!!!!LL!!LL!!LL!!LL\256\254\254!!LL!!LL!!LL!!LL\256\254\254!!!!LL!!LL!!LL!!LL\256\254\254!!LL!!LL!!LL!!LL\256\254\254!!!!LL!!LL!!LL!!LL\256\254\254!!LL!!LL!!LL!!LL\256\254\254!!!", "NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!" + "'", str2, "!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!");
    }

    @Test
    public void test14231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14231");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\275\275\275\275\275\275\275\275!", "!!!ULLLULLLULLLULLLULLLULLLULLLULLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\275\275\275\275\275\275\275!" + "'", str2, "\275\275\275\275\275\275\275\275!");
    }

    @Test
    public void test14232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14232");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225!", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225!" + "'", str2, "null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225!");
    }

    @Test
    public void test14233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14233");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("nullsvv!!!nullsvv!!!!", "\275\276``MM``MM``MM``MM``MM``MM``MM``MM\275\276``MM``MM``MM``MM``MM``MM``MM``MM\225\225\275\276``MM``MM``MM``MM``MM``MM``MM``MM\275\276``MM``MM``MM``MM``MM``MM``MM``MM\225\225\275\276``MM``MM``MM``MM``MM``MM``MM``MM\275\276``MM``MM``MM``MM``MM``MM``MM``MM\225\225\275\276``MM``MM``MM``MM``MM``MM``MM``MM\275\276``MM``MM``MM``MM``MM``MM``MM``MM\225\225\275\276``MM``MM``MM``MM``MM``MM``MM``MM\275\276``MM``MM``MM``MM``MM``MM``MM``MM\225\225\275\276``MM``MM``MM``MM``MM``MM``MM``MM\275\276``MM``MM``MM``MM``MM``MM``MM``MM\225\225\275\276``MM``MM``MM``MM``MM``MM``MM``MM\275\276``MM``MM``MM``MM``MM``MM``MM``MM\225\225\275\276``MM``MM``MM``MM``MM``MM``MM``MM\275\276``MM``MM``MM``MM``MM``MM``MM``MM\225\225!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "``MMM``!!!``MMM``!!!!" + "'", str2, "``MMM``!!!``MMM``!!!!");
    }

    @Test
    public void test14234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14234");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("~}\200\200~}\200\200NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULL~}\200\200~}\200\200NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULL~}\200\200~}\200\200NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULL~}\200\200~}\200\200NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULL~}\200\200~}\200\200NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULL~}\200\200~}\200\200NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULL~}\200\200~}\200\200NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULL~}\200\200~}\200\200NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULL!", "LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN!" + "'", str2, "~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN!");
    }

    @Test
    public void test14235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14235");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```!", "\u0256\u0256!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189!!!!!!```!" + "'", str2, "\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189!!!!!!```!");
    }

    @Test
    public void test14236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14236");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0346\u0348\u0348\u0348\u0348\u0346\u
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test14237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14237");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("EHHH\200}}`EHHH]]!", "U\220!!\200~~U\220!!\200~~U\220!!U\220!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200UUU\200}}`\200UUU]]!" + "'", str2, "\200UUU\200}}`\200UUU]]!");
    }

    @Test
    public void test14238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14238");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0346\u0348\u0348\u0348\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\u0348\u0346\u0346!", "\275\276U\225\225\276U\225\225\200\200\276U\225\225\276U\225\225\200\200\276U\225\225\276U\225\225\200\200\276\276U\225\225\276U\225\225\200\200\275\275!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test14239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14239");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("}~\200\200}~\200\200\u0170\u0170\u0170\u0170\u0170\u0170nullnullnull}~\200\200}~\200\200\u0170\u0170\u0170\u0170\u0170\u0170nullnullnull!", "\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~\200\200}~\200\200UULLLULLLULLL^UULLLULLLULLLUULLLULLLULLLUULLLULLLULLL^UULLLULLLULLLUULLLULLLULLL}~\200\200}~\200\200UULLLULLLULLL^UULLLULLLULLLUULLLULLLULLLUULLLULLLULLL^UULLLULLLULLLUULLLULLLULLL!" + "'", str2, "}~\200\200}~\200\200UULLLULLLULLL^UULLLULLLULLLUULLLULLLULLLUULLLULLLULLL^UULLLULLLULLLUULLLULLLULLL}~\200\200}~\200\200UULLLULLLULLL^UULLLULLLULLLUULLLULLLULLLUULLLULLLULLL^UULLLULLLULLLUULLLULLLULLL!");
    }

    @Test
    public void test14240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14240");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("~!\200\200~!\200\200!", "]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275]null!!]null!!]null!!\275\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~!\200\200~!\200\200!" + "'", str2, "~!\200\200~!\200\200!");
    }

    @Test
    public void test14241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14241");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn!", "!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!!!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!!!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!!!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!!!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!!!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!!!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!!!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14242");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14243");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "ijll\220nullnull\200~~ijll\220nullnull\200~~ijll\220nullnullijll\220nullnullijll\220nullnull\200~~ijll\220nullnull\200~~ijll\220nullnullijll\220nullnull!!ijll\220nullnull\200~~ijll\220nullnull\200~~ijll\220nullnullijll\220nullnullijll\220nullnull\200~~ijll\220nullnull\200~~ijll\220nullnullijll\220nullnull!!ijll\220nullnull\200~~ijll\220nullnull\200~~ijll\220nullnullijll\220nullnullijll\220nullnull\200~~ijll\220nullnull\200~~ijll\220nullnullijll\220nullnullijll\220nullnull\200~~ijll\220nullnull\200~~ijll\220nullnullijll\220nullnullijll\220nullnull\200~~ijll\220nullnull\200~~ijll\220nullnullijll\220nullnull!!ijll\220nullnull\200~~ijll\220nullnull\200~~ijll\220nullnullijll\220nullnullijll\220nullnull\200~~ijll\220nullnull\200~~ijll\220nullnullijll\220nullnull!!ijll\220nullnull\200~~ijll\220nullnull\200~~ijll\220nullnullijll\220nullnullijll\220nullnull\200~~ijll\220nullnull\200~~ijll\220nullnullijll\220nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test14244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14244");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!", "nullnullnullnullnull~~nullnullnullnullnull~~nullnullnullnullnull~~nullnullnullnullnull~~nullnullnullnullnull~~nullnullnullnullnull~~nullnullnullnullnull~~nullnullnullnullnull~~!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\356\356\356\u0348\u0348!\356\356\356\u0348\u0348!!!\356\356\356\u0348\u0348!\356\356\356\u0348\u0348!!!\356\356\356\u0348\u0348!\356\356\356\u0348\u0348!\356\356\356\u0348\u0348!\356\356\356\u0348\u0348!!!\356\356\356\u0348\u0348!\356\356\356\u0348\u0348!!!\356\356\356\u0348\u0348!\356\356\356\u0348\u0348!" + "'", str2, "!\356\356\356\u0348\u0348!\356\356\356\u0348\u0348!!!\356\356\356\u0348\u0348!\356\356\356\u0348\u0348!!!\356\356\356\u0348\u0348!\356\356\356\u0348\u0348!\356\356\356\u0348\u0348!\356\356\356\u0348\u0348!!!\356\356\356\u0348\u0348!\356\356\356\u0348\u0348!!!\356\356\356\u0348\u0348!\356\356\356\u0348\u0348!");
    }

    @Test
    public void test14245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14245");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216!!\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216!!\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216!!\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216!!\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216!", "\230nullnullnull!\230nullnullnull\230nullnullnull\230nullnullnull\230nullnullnull!!\230nullnullnull\230nullnullnull!!\230nullnullnull\230nullnullnull!!\230nullnullnull\230nullnullnull!!\230nullnullnull!\230nullnullnull\230nullnullnull\230nullnullnull\230nullnullnull!!\230nullnullnull\230nullnullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216!!\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216!!\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216!!\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216!!\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216!" + "'", str2, "\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216!!\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216!!\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216!!\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216!!\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216\220\220\216\216\200~~\220\220\216\216\200~~\220\220\216\216\220\220\216\216!");
    }

    @Test
    public void test14246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14246");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("}!\200\200}!\200\200}!\200\200}!\200\200\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215}!\200\200}!\200\200}!\200\200}!\200\200\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215!", "\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}!\200\200}!\200\200}!\200\200}!\200\200\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215}!\200\200}!\200\200}!\200\200}!\200\200\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215!" + "'", str2, "}!\200\200}!\200\200}!\200\200}!\200\200\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215}!\200\200}!\200\200}!\200\200}!\200\200\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215\230!\215\215!");
    }

    @Test
    public void test14247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14247");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!\200}}`
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\200}}`!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!]]!" + "'", str2, "!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\200}}`!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!]]!");
    }

    @Test
    public void test14248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14248");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!U!~~U!~~!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test14249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14249");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0366\u0365\u0368\u0368\353!!!\353!!!\200\200\u0346\u0348\u0348!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\216\254\254nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\216\254\254nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\216\254\254nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\216\254\254nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368L!!!L!!!\200\200\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368L!!!L!!!\200\200\u0346\u0348\u0348!");
    }

    @Test
    public void test14250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14250");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0366\u0365\u0368\uu0346\u0348\u
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\uu0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241!!\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241!!\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241!!\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\236\237\241\241\u0346\u0348\u0348!");
    }

    @Test
    public void test14251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14251");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253!", "\u02ebnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253!nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253!nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253!nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253!nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253!nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253!nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253!" + "'", str2, "nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253!nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253!nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253!nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253!nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253!nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253!nlllnlll\253\253nlllnlll\253\253nlllnlll\253\253!");
    }

    @Test
    public void test14252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14252");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("", "OO]]OO]]OO]]OO]]~}}^OO]]OO]]OO]]OO]]]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14253");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!", "\376\340\340\340\376\340\340\340!!\376\340\340\340\376\340\340\340!!\376\340\340\340\376\340\340\340!!\376\340\340\340\376\340\340\340!!\376\340\340\340\376\340\340\340!!\376\340\340\340\376\340\340\340!!\376\340\340\340\376\340\340\340!!\376\340\340\340\376\340\340\340!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!" + "'", str2, "\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!!\201\201!");
    }

    @Test
    public void test14254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14254");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014enullnull!!!", "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!!" + "'", str2, "uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!uuUNLLUNLLuuUNLLUNLL!!!");
    }

    @Test
    public void test14255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14255");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!UU!!!UU!!UU!!!", "~}\200\200~}\200\200`!!!!`!!!`!!!`!!!!`!!!`!!!!`!!!`!!`!!!!`!!!`!!!`!!!!`!!!`!!!!`!!!`!!~}\200\200~}\200\200`!!!!`!!!`!!!`!!!!`!!!`!!!!`!!!`!!`!!!!`!!!`!!!`!!!!`!!!`!!!!`!!!`!!~}\200\200~}\200\200`!!!!`!!!`!!!`!!!!`!!!`!!!!`!!!`!!`!!!!`!!!`!!!`!!!!`!!!`!!!!`!!!`!!~}\200\200~}\200\200`!!!!`!!!`!!!`!!!!`!!!`!!!!`!!!`!!`!!!!`!!!`!!!`!!!!`!!!`!!!!`!!!`!!~}\200\200~}\200\200`!!!!`!!!`!!!`!!!!`!!!`!!!!`!!!`!!`!!!!`!!!`!!!`!!!!`!!!`!!!!`!!!`!!~}\200\200~}\200\200`!!!!`!!!`!!!`!!!!`!!!`!!!!`!!!`!!`!!!!`!!!`!!!`!!!!`!!!`!!!!`!!!`!!~}\200\200~}\200\200`!!!!`!!!`!!!`!!!!`!!!`!!!!`!!!`!!`!!!!`!!!`!!!`!!!!`!!!`!!!!`!!!`!!~}\200\200~}\200\200`!!!!`!!!`!!!`!!!!`!!!`!!!!`!!!`!!`!!!!`!!!`!!!`!!!!`!!!`!!!!`!!!`!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!!" + "'", str2, "nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!!");
    }

    @Test
    public void test14256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14256");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("UU!!UU!!LLUU!!UU!!LL!", "EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnull!" + "'", str2, "nullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnull!");
    }

    @Test
    public void test14257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14257");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" + "'", str2, "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    @Test
    public void test14258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14258");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\253\253\253\253\253\253\253\253!", "~}\200\200~}\200\200LNNNnullnullnullLNNNnullnullnull\230\230LNNNnullnullnullLNNNnullnullnull\230\230~}\200\200~}\200\200LNNNnullnullnullLNNNnullnullnull\230\230LNNNnullnullnullLNNNnullnullnull\230\230~}\200\200~}\200\200LNNNnullnullnullLNNNnullnullnull\230\230LNNNnullnullnullLNNNnullnullnull\230\230~}\200\200~}\200\200LNNNnullnullnullLNNNnullnullnull\230\230LNNNnullnullnullLNNNnullnullnull\230\230~}\200\200~}\200\200LNNNnullnullnullLNNNnullnullnull\230\230LNNNnullnullnullLNNNnullnullnull\230\230~}\200\200~}\200\200LNNNnullnullnullLNNNnullnullnull\230\230LNNNnullnullnullLNNNnullnullnull\230\230~}\200\200~}\200\200LNNNnullnullnullLNNNnullnullnull\230\230LNNNnullnullnullLNNNnullnullnull\230\230~}\200\200~}\200\200LNNNnullnullnullLNNNnullnullnull\230\230LNNNnullnullnullLNNNnullnullnull\230\230!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\253\253\253\253\253\253\253!" + "'", str2, "\253\253\253\253\253\253\253\253!");
    }

    @Test
    public void test14259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14259");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a\u014a!!!!", "");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!!" + "'", str2, "nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!nullnull!!!null!!!null!!!!");
    }

    @Test
    public void test14260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14260");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0366\u0365\u0368\u0368\u028b\u028b\u028b\u028b\u028b\u028b\u028b\u028b!!!!\200\200\u0346\u0348\u0348!", "");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368nullnull!!nullnull!!!!nullnull!!nullnull!!!!\200\200\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368nullnull!!nullnull!!!!nullnull!!nullnull!!!!\200\200\u0346\u0348\u0348!");
    }

    @Test
    public void test14261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14261");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL!", "~}\200\200~}\200\200null}\200\200null}\200\200\230\230null}\200\200null}\200\200\230\230~}\200\200~}\200\200null}\200\200null}\200\200\230\230null}\200\200null}\200\200\230\230~}\200\200~}\200\200null}\200\200null}\200\200\230\230null}\200\200null}\200\200\230\230~}\200\200~}\200\200null}\200\200null}\200\200\230\230null}\200\200null}\200\200\230\230~}\200\200~}\200\200null}\200\200null}\200\200\230\230null}\200\200null}\200\200\230\230~}\200\200~}\200\200null}\200\200null}\200\200\230\230null}\200\200null}\200\200\230\230~}\200\200~}\200\200null}\200\200null}\200\200\230\230null}\200\200null}\200\200\230\230~}\200\200~}\200\200null}\200\200null}\200\200\230\230null}\200\200null}\200\200\230\230!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL!" + "'", str2, "\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL!");
    }

    @Test
    public void test14262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14262");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!", "\225\230\230\230\225\230\230\230!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!" + "'", str2, "!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!!\256!!!!\254\254\256!!!!\254\254!");
    }

    @Test
    public void test14263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14263");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8\u01c5\u01c6\u01c8\u01c8~~!", "!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!!!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!!!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!!!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!!!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]\200~~!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]\200~~]\200~~!!]\200~~~~]\200~~]\200~~!!]\200~~~~]\200~~]\200~~!!]\200~~~~]\200~~]\200~~!!]\200~~~~]\200~~]\200~~!!]\200~~~~]\200~~]\200~~!!]\200~~~~]\200~~]\200~~!!]\200~~~~]\200~~]\200~~!!]\200~~~~!" + "'", str2, "]\200~~]\200~~!!]\200~~~~]\200~~]\200~~!!]\200~~~~]\200~~]\200~~!!]\200~~~~]\200~~]\200~~!!]\200~~~~]\200~~]\200~~!!]\200~~~~]\200~~]\200~~!!]\200~~~~]\200~~]\200~~!!]\200~~~~]\200~~]\200~~!!]\200~~~~!");
    }

    @Test
    public void test14264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14264");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\275\276\u0111\u0112\u0114\u0114\u0111\u0112\u0114\u0114\275\276\u0111\u0112\u0114\u0114\u0111\u0112\u0114\u0114\225\225\275\276\u0111\u0112\u0114\u0114\u0111\u0112\u0114\u0114\275\276\u0111\u0112\u0114\u0114\u0111\u0112\u0114\u0114\225\225\275\276\u0111\u0112\u0114\u0114\u0111\u0112\u0114\u0114\275\276\u0111\u0112\u0114\u0114\u0111\u0112\u0114\u0114\225\225\275\276\u0111\u0112\u0114\u0114\u0111\u0112\u0114\u0114\275\276\u0111\u0112\u0114\u0114\u0111\u0112\u0114\u0114\225\225\275\276\u0111\u0112\u0114\u0114\u0111\u0112\u0114\u0114\275\276\u0111\u0112\u0114\u0114\u0111\u0112\u0114\u0114\225\225\275\276\u0111\u0112\u0114\u0114\u0111\u0112\u0114\u0114\275\276\u0111\u0112\u0114\u0114\u0111\u0112\u0114\u0114\225\225\275\276\u0111\u0112\u0114\u0114\u0111\u0112\u0114\u0114\275\276\u0111\u0112\u0114\u0114\u0111\u0112\u0114\u0114\225\225\275\276\u0111\u0112\u0114\u0114\u0111\u0112\u0114\u0114\275\276\u0111\u0112\u0114\u0114\u0111\u0112\u0114\u0114\225\225!", "!T!!!T!!!!!T!!!T!!!!!T!!!T!!!T!!!T!!!!!T!!!T!!!!!T!!!T!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\225\225\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\225\225\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\225\225\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\225\225\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\225\225\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\225\225\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\225\225\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\225\225!" + "'", str2, "\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\225\225\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\225\225\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\225\225\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\225\225\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\225\225\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\225\225\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\225\225\275\276nullnullnullnullnullnullnullnull\275\276nullnullnullnullnullnullnullnull\225\225!");
    }

    @Test
    public void test14265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14265");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode}\275\200\200}\275\200\200}\275\200\200}\275\200\200\200\u0108\u0108\u0108\200\u0108\u0108\u0108\200\u0108\u0108\u0108\200\u0108\u0108\u0108}\275\200\200}\275\200\200}\275\200\200}\275\200\200\200\u0108\u0108\u0108\200\u0108\u0108\u0108!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14266");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("````````````````````````````````````````````````````````````````````````````````!", "~}\200\200~}\200\200XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX~}\200\200~}\200\200XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX~}\200\200~}\200\200XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX~}\200\200~}\200\200XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX~}\200\200~}\200\200XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX~}\200\200~}\200\200XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX~}\200\200~}\200\200XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX~}\200\200~}\200\200XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "````````````````````````````````````````````````````````````````````````````````!" + "'", str2, "````````````````````````````````````````````````````````````````````````````````!");
    }

    @Test
    public void test14267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14267");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200T!~~!nullnullT!~~T!~~nullnullT!~~T!~~nullnullT!~~T!~~nullnullT!~~!nullnullT!~~T!~~nullnullT!~~T!~~nullnullT!~~T!~~nullnull}~\200\200}~\200\200T!~~!nullnullT!~~T!~~nullnullT!~~T!~~nullnullT!~~T!~~nullnullT!~~!nullnullT!~~T!~~nullnullT!~~T!~~nullnullT!~~T!~~nullnull}~\200\200}~\200\200T!~~!nullnullT!~~T!~~nullnullT!~~T!~~nullnullT!~~T!~~nullnullT!~~!nullnullT!~~T!~~nullnullT!~~T!~~nullnullT!~~T!~~nullnull}~\200\200}~\200\200\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!!" + "'", str2, "!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!TL~~TL~~!!!");
    }

    @Test
    public void test14268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14268");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262!", "\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14269");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("UUUUUUUUUUUUUUUUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUUUUUUUUUUUUUUUUUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UU!", "\u01d7\u01d8\u01da\u01da\u01d7\u01d8\u01da\u01da\u01d7\u01d8\u01da\u01da\u01d7\u01d8\u01da\u01da\200\200!!\200\200!!\200\200!!\200\200!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!");
    }

    @Test
    public void test14270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14270");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!", "!M\253\253!M\253\253!!!M\253\253!M\253\253!!!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!!!M\253\253!M\253\253!!!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!!!M\253\253!M\253\253!!!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!!!M\253\253!M\253\253!!!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!!!M\253\253!M\253\253!!!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!!!M\253\253!M\253\253!!!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!!!M\253\253!M\253\253!!!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!!!M\253\253!M\253\253!!!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!M\253\253!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!" + "'", str2, "!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!");
    }

    @Test
    public void test14271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14271");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("}null!!!\200\200}null!!!\200\200}null!!!\200\200}null!!!\200\200null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~}null!!!\200\200}null!!!\200\200}null!!!\200\200}null!!!\200\200null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~!", "}\200\200\200nullnullnull}\200\200\200nullnullnull}\200\200\200nullnullnull}\200\200\200nullnullnull}\200\200\200nullnullnull}\200\200\200nullnullnull}\200\200\200nullnullnull}\200\200\200nullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}UNLL!!!\200\200}UNLL!!!\200\200}UNLL!!!\200\200}UNLL!!!\200\200UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~}UNLL!!!\200\200}UNLL!!!\200\200}UNLL!!!\200\200}UNLL!!!\200\200UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~!" + "'", str2, "}UNLL!!!\200\200}UNLL!!!\200\200}UNLL!!!\200\200}UNLL!!!\200\200UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~}UNLL!!!\200\200}UNLL!!!\200\200}UNLL!!!\200\200}UNLL!!!\200\200UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~UNLL!~~!");
    }

    @Test
    public void test14272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14272");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e!", "`!XX`!XX`!XX`!XX`!XX`!XX`!XX`!XX!!`!XX`!XX`!XX`!XX`!XX`!XX`!XX`!XX!!`!XX`!XX`!XX`!XX`!XX`!XX`!XX`!XX`!XX`!XX`!XX`!XX`!XX`!XX`!XX`!XX!!`!XX`!XX`!XX`!XX`!XX`!XX`!XX`!XX!!`!XX`!XX`!XX`!XX`!XX`!XX`!XX`!XX!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "XX!!XX!!nullnullnullnullnullnullnullnullXX!!XX!!nullnullnullnullnullnullnullnullXX!!XX!!nullnullnullnullnullnullnullnullXX!!XX!!nullnullnullnullnullnullnullnullXX!!XX!!nullnullnullnullnullnullnullnullXX!!XX!!nullnullnullnullnullnullnullnullXX!!XX!!nullnullnullnullnullnullnullnullXX!!XX!!nullnullnullnullnullnullnullnull!" + "'", str2, "XX!!XX!!nullnullnullnullnullnullnullnullXX!!XX!!nullnullnullnullnullnullnullnullXX!!XX!!nullnullnullnullnullnullnullnullXX!!XX!!nullnullnullnullnullnullnullnullXX!!XX!!nullnullnullnullnullnullnullnullXX!!XX!!nullnullnullnullnullnullnullnullXX!!XX!!nullnullnullnullnullnullnullnullXX!!XX!!nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14273");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256!", "EFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHHEFHHFHH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256!" + "'", str2, "~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256~}\200\200~}\200\200\253\254\256\256\253\254\256\256!");
    }

    @Test
    public void test14274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14274");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("~}}}L~NN~}}}~}}}~}}}L~NN~}}}~}}}~}}}~}}}~}}}L~NN~}}}~}}}~}}}L~NN~}}}~}}}~}}}~}}}~}}}~}}}L~NN~}}}~}}}~}}}~}}}~}}}~}}}L~NN~}}}~}}}~}}}~}}}~}}}~}}}L~NN~}}}~}}}~}}}~}}}~}}}~}}}L~NN~}}}~}}}~}}}~}}}~}}}L~NN~}}}~}}}~}}}L~NN~}}}~}}}~}}}~}}}~}}}L~NN~}}}~}}}~}}}L~NN~}}}~}}}~}}}~}}}!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}}}null~nullnull~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}~}}}!" + "'", str2, "~}}}null~nullnull~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}null~nullnull~}}}~}}}~}}}~}}}!");
    }

    @Test
    public void test14275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14275");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14276");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("EE!!EE!!!", "U!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNN!!U!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNN!!U!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNN!!U!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNN!!U!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNNU!LLU!LLLLNNLLNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UU!!UU!!!" + "'", str2, "UU!!UU!!!");
    }

    @Test
    public void test14277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14277");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225\u0100\377\u0102\u0102~\225\225\230\230\225\225\230\230\225\225\230\230\225\225!", "\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239\u023b\u023b\u0239\u0239!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull~\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnull~\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnull~\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnull~\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnull~\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnull~\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnull~\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnull~\225\225\230\230\225\225\230\230\225\225\230\230\225\225!" + "'", str2, "nullnullnullnull~\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnull~\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnull~\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnull~\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnull~\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnull~\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnull~\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnull~\225\225\230\230\225\225\230\230\225\225\230\230\225\225!");
    }

    @Test
    public void test14278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14278");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("LL!!````````````LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!````````````LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!", "!!!!!!!!!!!!!!!!\200}}`!!!!!!!!!!!!!!!!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!````````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" + "'", str2, "!!!!````````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!````````````!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    @Test
    public void test14279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14279");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "\u023e\u023e\u023e\u023e!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test14280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14280");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228\u0228!", "~}\200\200~}\200\200HHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HHHHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HH~}\200\200~}\200\200HHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HHHHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HH~}\200\200~}\200\200HHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HHHHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HH~}\200\200~}\200\200HHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HHHHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HH~}\200\200~}\200\200HHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HHHHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HH~}\200\200~}\200\200HHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HHHHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HH~}\200\200~}\200\200HHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HHHHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HH~}\200\200~}\200\200HHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HHHHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HH!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnull!" + "'", str2, "nullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnull!");
    }

    @Test
    public void test14281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14281");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0366\u0365\u0368\u0368!]!!!]!!\200\200\u0346\u0348\u0348!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull}}nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull}}!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368!]!!!]!!\200\200\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368!]!!!]!!\200\200\u0346\u0348\u0348!");
    }

    @Test
    public void test14282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14282");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!!LL!!LLLL!!LL!!LL!!LL!" + "'", str
    }

    @Test
    public void test14283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14283");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decodeu028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14284");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("", "!!!!nullnull\344\342\342nullnullnullnull\344\342\342nullnull!!nullnull\344\342\342nullnullnullnull\344\342\342nullnull!!!!nullnull\344\342\342nullnullnullnull\344\342\342nullnull!!nullnull\344\342\342nullnullnullnull\344\342\342nullnull!!!!nullnull\344\342\342nullnullnullnull\344\342\342nullnull!!nullnull\344\342\342nullnullnullnull\344\342\342nullnull!!!!nullnull\344\342\342nullnullnullnull\344\342\342nullnull!!nullnull\344\342\342nullnullnullnull\344\342\342nullnull!!!!nullnull\344\342\342nullnullnullnull\344\342\342nullnull!!nullnull\344\342\342nullnullnullnull\344\342\342nullnull!!!!nullnull\344\342\342nullnullnullnull\344\342\342nullnull!!nullnull\344\342\342nullnullnullnull\344\342\342nullnull!!!!nullnull\344\342\342nullnullnullnull\344\342\342nullnull!!nullnull\344\342\342nullnullnullnull\344\342\342nullnull!!!!nullnull\344\342\342nullnullnullnull\344\342\342nullnull!!nullnull\344\342\342nullnullnullnull\344\342\342nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14285");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!", "~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!" + "'", str2, "\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!");
    }

    @Test
    public void test14286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14286");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("~}\200\200~}\200\200ULLL!ULLLULLLULLL!ULLLULLLLLUULLUUULLL!ULLLULLLULLL!ULLLULLLLLUULLUU~}\200\200~}\200\200ULLL!ULLLULLLULLL!ULLLULLLLLUULLUUULLL!ULLLULLLULLL!ULLLULLLLLUULLUU~}\200\200~}\200\200ULLL!ULLLULLLULLL!ULLLULLLLLUULLUUULLL!ULLLULLLULLL!ULLLULLLLLUULLUU~}\200\200~}\200\200ULLL!ULLLULLLULLL!ULLLULLLLLUULLUUULLL!ULLLULLLULLL!ULLLULLLLLUULLUU~}\200\200~}\200\200ULLL!ULLLULLLULLL!ULLLULLLLLUULLUUULLL!ULLLULLLULLL!ULLLULLLLLUULLUU~}\200\200~}\200\200ULLL!ULLLULLLULLL!ULLLULLLLLUULLUUULLL!ULLLULLLULLL!ULLLULLLLLUULLUU~}\200\200~}\200\200ULLL!ULLLULLLULLL!ULLLULLLLLUULLUUULLL!ULLLULLLULLL!ULLLULLLLLUULLUU~}\200\200~}\200\200ULLL!ULLLULLLULLL!ULLLULLLLLUULLUUULLL!ULLLULLLULLL!ULLLULLLLLUULLUU!", "LNUULNUU!!LNUULNUU!!LNUULNUULNUULNUU!!LNUULNUU!!LNUULNUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200LNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLLLNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLL~}\200\200~}\200\200LNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLLLNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLL~}\200\200~}\200\200LNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLLLNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLL~}\200\200~}\200\200LNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLLLNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLL~}\200\200~}\200\200LNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLLLNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLL~}\200\200~}\200\200LNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLLLNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLL~}\200\200~}\200\200LNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLLLNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLL~}\200\200~}\200\200LNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLLLNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLL!" + "'", str2, "~}\200\200~}\200\200LNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLLLNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLL~}\200\200~}\200\200LNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLLLNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLL~}\200\200~}\200\200LNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLLLNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLL~}\200\200~}\200\200LNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLLLNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLL~}\200\200~}\200\200LNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLLLNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLL~}\200\200~}\200\200LNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLLLNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLL~}\200\200~}\200\200LNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLLLNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLL~}\200\200~}\200\200LNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLLLNNN!LNNNLNNNLNNN!LNNNLNNNNNLLNNLL!");
    }

    @Test
    public void test14287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14287");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200~!nullnull~!nullnull!!\220\220\200~!nullnull~!nullnull!!\220\220\200~!nullnull~!nullnull!!\220\220\200~!nullnull~!nullnull!!\220\220\200~!nullnull~!nullnull!!\220\220\200~!nullnull~!nullnull!!\220\220\200~!nullnull~!nullnull!!\220\220\200~!nullnull~!nullnull!!\220\220!" + "'", str2, "\200~!nullnull~!nullnull!!\220\220\200~!nullnull~!nullnull!!\220\220\200~!nullnull~!nullnull!!\220\220\200~!nullnull~!nullnull!!\220\220\200~!nullnull~!nullnull!!\220\220\200~!nullnull~!nullnull!!\220\220\200~!nullnull~!nullnull!!\220\220\200~!nullnull~!nullnull!!\220\220!");
    }

    @Test
    public void test14288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14288");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("", "\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348!!\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348!!\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348!!\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348!!\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14289");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~\215\216\230\230nullnull~~nullnull~~nullnull~~!", "]]\300\300]]\300\300!!]]\300\300]]\300\300!!]]\300\300]]\300\300]]\300\300]]\300\300!!]]\300\300]]\300\300!!]]\300\300]]\300\300!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\215\216\230\230\300]]]\300]]]~~\300]]]\300]]]~~\300]]]\300]]]~~\215\216\230\230\300]]]\300]]]~~\300]]]\300]]]~~\300]]]\300]]]~~\215\216\230\230\300]]]\300]]]~~\300]]]\300]]]~~\300]]]\300]]]~~\215\216\230\230\300]]]\300]]]~~\300]]]\300]]]~~\300]]]\300]]]~~\215\216\230\230\300]]]\300]]]~~\300]]]\300]]]~~\300]]]\300]]]~~\215\216\230\230\300]]]\300]]]~~\300]]]\300]]]~~\300]]]\300]]]~~\215\216\230\230\300]]]\300]]]~~\300]]]\300]]]~~\300]]]\300]]]~~\215\216\230\230\300]]]\300]]]~~\300]]]\300]]]~~\300]]]\300]]]~~!" + "'", str2, "\215\216\230\230\300]]]\300]]]~~\300]]]\300]]]~~\300]]]\300]]]~~\215\216\230\230\300]]]\300]]]~~\300]]]\300]]]~~\300]]]\300]]]~~\215\216\230\230\300]]]\300]]]~~\300]]]\300]]]~~\300]]]\300]]]~~\215\216\230\230\300]]]\300]]]~~\300]]]\300]]]~~\300]]]\300]]]~~\215\216\230\230\300]]]\300]]]~~\300]]]\300]]]~~\300]]]\300]]]~~\215\216\230\230\300]]]\300]]]~~\300]]]\300]]]~~\300]]]\300]]]~~\215\216\230\230\300]]]\300]]]~~\300]]]\300]]]~~\300]]]\300]]]~~\215\216\230\230\300]]]\300]]]~~\300]]]\300]]]~~\300]]]\300]]]~~!");
    }

    @Test
    public void test14290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14290");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!\255RRLLRRLL!\255RRLLRRLL!\255RRLLRRLL!\255RRLLRRLL!\255RRLLRRLL!", "\u0272\u0272\u0272\u0272\u0272\u0272\u0272\u0272\u0272\u0272\u0272\u0272\u0272\u0272\u0272\u0272\u0272\u0272\u0272\u0272\u0272\u0272\u0272\u0272nullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\255\u019d\u019d\u019d\u019d!\255\u019d\u019d\u019d\u019d!\255\u019d\u019d\u019d\u019d!\255\u019d\u019d\u019d\u019d!\255\u019d\u019d\u019d\u019d!" + "'", str2, "!\255\u019d\u019d\u019d\u019d!\255\u019d\u019d\u019d\u019d!\255\u019d\u019d\u019d\u019d!\255\u019d\u019d\u019d\u019d!\255\u019d\u019d\u019d\u019d!");
    }

    @Test
    public void test14291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14291");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!!]]!!]]L!!!L!!!!!]]!!]]L!!!L!!!!", "\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016enullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0108\u0108\u0108\u0108!!!!" + "'", str2, "\u0108\u0108\u0108\u0108!!!!");
    }

    @Test
    public void test14292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14292");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0366\u0365\u0368\u0368!!\216\216\u0346\u0348\u0348!", "}null\200\200}null\200\200}null\200\200}null\200\200\u029e\u029e\u029e\u029enullnullnull}null\200\200}null\200\200}null\200\200}null\200\200\u029e\u029enullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368!!\216\216\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368!!\216\216\u0346\u0348\u0348!");
    }

    @Test
    public void test14293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14293");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\215}\215\215\215}\215\215\u03ff\u0400\u0402\u0402\u03ff\u0400\u0402\u0402\u03ff\u0400\u0402\u0402\u03ff\u0400\u0402\u0402\u03ff\u0400\u0402\u0402\u03ff\u0400\u0402\u0402\u03ff\u0400\u0402\u0402\u03ff\u0400\u0402\u0402!!\215}\215\215\215}\215\215!", "N~LLN~LL!!N~LLN~LL!!N~LLN~LLN~LLN~LL!!N~LLN~LL!!N~LLN~LL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\215}\215\215\215}\215\215nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!\215}\215\215\215}\215\215!" + "'", str2, "\215}\215\215\215}\215\215nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!\215}\215\215\215}\215\215!");
    }

    @Test
    public void test14294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14294");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!!", "}nullnull\340\340\200\200}nullnull\340\340\200\200}nullnull\340\340\200\200}nullnull\340\340\200\200\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~}nullnull\340\340\200\200}nullnull\340\340\200\200}nullnull\340\340\200\200}nullnull\340\340\200\200\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!!" + "'", str2, "^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!!");
    }

    @Test
    public void test14295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14295");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0366\u0365\u0368\u0368\300\u0346\u0348\u0348!", "nullnullnullnullnullnullnullnullnullnull\214\214nullnull\214\214nullnullnullnullnullnullnullnullnullnull\214\214nullnull\214\214nullnullnullnullnullnullnullnullnullnull\214\214nullnull\214\214nullnullnullnullnullnullnullnullnullnull\214\214nullnull\214\214nullnullnullnullnullnullnullnullnullnull\214\214nullnull\214\214nullnullnullnullnullnullnullnullnullnull\214\214nullnull\214\214nullnullnullnullnullnullnullnullnullnull\214\214nullnull\214\214nullnullnullnullnullnullnullnullnullnull\214\214nullnull\214\214!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u01fb\u01fc\u01fe\u01fe\u01fb\u01fc\u01fe\u01fe\u01fb\u01fc\u01fe\u01fe\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u01fb\u01fc\u01fe\u01fe\u01fb\u01fc\u01fe\u01fe\u01fb\u01fc\u01fe\u01fe\u0346\u0348\u0348!");
    }

    @Test
    public void test14296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14296");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("nullnullnullnullnullnullnullnull!!LL!!LLnullnullnullnullnullnullnullnull!!LL!!LL!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnull!");
    }

    @Test
    public void test14297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14297");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!LLUULLUULLUULLUU!", "\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214\352\350\352\352\352\350\352\352\u010a\u0105\u0108\u0108\352\214\214\u010a\u0105\u0108\u0108\352\214\214!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0108\u0108\214\214\u0108\u0108\214\214\u0108\u0108\214\214\u0108\u0108\214\214!" + "'", str2, "\u0108\u0108\214\214\u0108\u0108\214\214\u0108\u0108\214\214\u0108\u0108\214\214!");
    }

    @Test
    public void test14298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14298");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!!", "OOOOOOOO\214\214OOOOOOOO\214\214OOOOOOOO\214\214OOOOOOOO\214\214OOOOOOOO\214\214OOOOOOOO\214\214OOOOOOOO\214\214OOOOOOOO\214\214!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!");
    }

    @Test
    public void test14299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14299");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decodeu01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae\u01ae!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253]]\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253]]\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253]]\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253]]]\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253]]\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253\253!\253\253]]!" + "'", str
    }

    @Test
    public void test14300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14300");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0104\u0108\u0108\u0108\u0104\u0108\u0108\u0108\u0104\u0108\u0108\u0108\u0104\u0108\u0108\u0108\u0104\u0108\u0108\u0108\u0104\u0108\u0108\u0108\u0104\u0108\u0108\u0108\u0104\u0108\u0108\u0108!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14301");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("null!!!null!!!!null!!!null!!null!!!null!!!!null!!!null!!null!!!null!!!!null!!!null!!null!!!null!!!!null!!!null!!null!!!null!!!!null!!!null!!null!!!null!!!!null!!!null!!null!!!null!!!!null!!!null!!null!!!null!!!!null!!!null!!!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull!!!nullnullnullnull!!!!nullnullnullnull!!!nullnullnullnull!!nullnullnullnull!!!nullnullnullnull!!!!nullnullnullnull!!!nullnullnullnull!!nullnullnullnull!!!nullnullnullnull!!!!nullnullnullnull!!!nullnullnullnull!!nullnullnullnull!!!nullnullnullnull!!!!nullnullnullnull!!!nullnullnullnull!!nullnullnullnull!!!nullnullnullnull!!!!nullnullnullnull!!!nullnullnullnull!!nullnullnullnull!!!nullnullnullnull!!!!nullnullnullnull!!!nullnullnullnull!!nullnullnullnull!!!nullnullnullnull!!!!nullnullnullnull!!!nullnullnullnull!!nullnullnullnull!!!nullnullnullnull!!!!nullnullnullnull!!!nullnullnullnull!!!" + "'", str2, "nullnullnullnull!!!nullnullnullnull!!!!nullnullnullnull!!!nullnullnullnull!!nullnullnullnull!!!nullnullnullnull!!!!nullnullnullnull!!!nullnullnullnull!!nullnullnullnull!!!nullnullnullnull!!!!nullnullnullnull!!!nullnullnullnull!!nullnullnullnull!!!nullnullnullnull!!!!nullnullnullnull!!!nullnullnullnull!!nullnullnullnull!!!nullnullnullnull!!!!nullnullnullnull!!!nullnullnullnull!!nullnullnullnull!!!nullnullnullnull!!!!nullnullnullnull!!!nullnullnullnull!!nullnullnullnull!!!nullnullnullnull!!!!nullnullnullnull!!!nullnullnullnull!!nullnullnullnull!!!nullnullnullnull!!!!nullnullnullnull!!!nullnullnullnull!!!");
    }

    @Test
    public void test14302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14302");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c\u014c!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test14303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14303");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||\253\253\253\200}}`!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||\253\253\253]]!", "~}\200\200~}\200\200HHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HHHHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HH~}\200\200~}\200\200HHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HHHHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HH~}\200\200~}\200\200HHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HHHHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HH~}\200\200~}\200\200HHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HHHHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HH~}\200\200~}\200\200HHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HHHHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HH~}\200\200~}\200\200HHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HHHHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HH~}\200\200~}\200\200HHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HHHHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HH~}\200\200~}\200\200HHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HHHHHH!HHHHHHHHHHHH!HHHHHHHH!^HH!^HH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||\253\253\253\200}}`!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||\253\253\253]]!" + "'", str2, "!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||\253\253\253\200}}`!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||!!||\253\253\253]]!");
    }

    @Test
    public void test14304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14304");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!~null\242\225\225null\242\225\225!~null\242\225\225null\242\225\225!~null\242\225\225null\242\225\225!~null\242\225\225null\242\225\225!~null\242\225\225null\242\225\225!~null\242\225\225null\242\225\225!~null\242\225\225null\242\225\225!~null\242\225\225null\242\225\225!!!~null\242\225\225null\242\225\225!~null\242\225\225null\242\225\225!~null\242\225\225null\242\225\225!~null\242\225\225null\242\225\225!~null\242\225\225null\242\225\225!~null\242\225\225null\242\225\225!~null\242\225\225null\242\225\225!~null\242\225\225null\242\225\225!!!", "JLLLJLLLJLLLJLLLJLLLJLLLJLLLJLLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!!!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!!!" + "'", str2, "!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!!!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!~nullnull\200\200\242\225\225nullnull\200\200\242\225\225!!!");
    }

    @Test
    public void test14305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14305");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u035d\u035e\u0360\u0360\u035d\u035e\u0360\u0360\u035d\u035e\u0360\u0360\u035d\u035e\u0360\u0360\u035d\u035e\u0360\u0360\u035d\u035e\u0360\u0360!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u035d\u035e\u0360\u0360\u035d\u035e\u0360\u0360\u035d\u035e\u0360\u0360\u035d\u035e\u0360\u0360\u035d\u035e\u0360\u0360\u035d\u035e\u0360\u0360!" + "'", str2, "\u035d\u035e\u0360\u0360\u035d\u035e\u0360\u0360\u035d\u035e\u0360\u0360\u035d\u035e\u0360\u0360\u035d\u035e\u0360\u0360\u035d\u035e\u0360\u0360!");
    }

    @Test
    public void test14306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14306");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("UU!!UU!!UUUUUUUUUU!!UU!!UUUUUUUUUU!!UU!!UUUUUUUUUU!!UU!!UUUUUUUUUU!!UU!!UUUUUUUUUU!!UU!!UUUUUUUUUU!!UU!!UUUUUUUUUU!!UU!!UUUUUUUU!", "\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnull!" + "'", str2, "nullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14307");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!HH!!!HH!!HH!!HH!!!HH!!HH!!HH!!!HH!!HH!!HH!!!HH!!HH!!HH!!!HH!!HH!!HH!!!HH!!HH!!HH!!!HH!!HH!!HH!!!HH!!HH!!HH!!!HH!!HH!!HH!!!HH!!HH!!HH!!!HH!!HH!!HH!!!HH!!HH!!HH!!!HH!!HH!!HH!!!HH!!HH!!HH!!!HH!!HH!!HH!!!HH!!HH!!HH!!!HH!!HH!!HH!!!HH!!HH!!HH!!!HH!!HH!!HH!!!HH!!HH!", "\275L!NNL!NNL!NN\276L!NN\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!" + "'", str2, "!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!!NN!!!NN!!NN!");
    }

    @Test
    public void test14308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14308");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\200\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6]]!", "\u0140\u0140\u0140\u0140\u035e\u035e\u0140\u0140\u0140\u0140\u035e\u035e\u0140\u0140\u0140\u0140\u035e\u035e\u0140\u0140\u0140\u0140\u035e\u035e!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!");
    }

    @Test
    public void test14309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14309");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!nullnullnullnull
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14310");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!!!!!!!!!!!!!!!!!!", "!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!\200}}`!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!!!!``!!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!!!!!!!!!!" + "'", str2, "!!!!!!!!!!!!!!!!!!");
    }

    @Test
    public void test14311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14311");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\253\u0128\u0128\u0128\u0348\u0348\253\u0128\u0128\u0128\u0348\u0348!!\253\u0128\u0128\u0128\u0348\u0348\253\u0128\u0128\u0128\u0348\u0348!!\253\u0128\u0128\u0128\u0348\u0348\253\u0128\u0128\u0128\u0348\u0348\253\u0128\u0128\u0128\u0348\u0348\253\u0128\u0128\u0128\u0348\u0348!!\253\u0128\u0128\u0128\u0348\u0348\253\u0128\u0128\u0128\u0348\u0348!!\253\u0128\u0128\u0128\u0348\u0348\253\u0128\u0128\u0128\u0348\u
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\u0348\u0348\253\u0348\u0348!!\253\u0348\u0348\253\u0348\u0348!!\253\u0348\u0348\253\u0348\u0348\253\u0348\u0348\253\u0348\u0348!!\253\u0348\u0348\253\u0348\u0348!!\253\u0348\u0348\253\u0348\u0348!" + "'", str2, "\253\u0348\u0348\253\u0348\u0348!!\253\u0348\u0348\253\u0348\u0348!!\253\u0348\u0348\253\u0348\u0348\253\u0348\u0348\253\u0348\u0348!!\253\u0348\u0348\253\u0348\u0348!!\253\u0348\u0348\253\u0348\u0348!");
    }

    @Test
    public void test14312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14312");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!hikkhikk!!hikkhikk!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!" + "'", str2, "!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14313");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encodenull~nullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!null~nullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!null~nullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!null~nullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!null~nullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14314");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("FHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHH!", "!\270!!!\270!!!!!\270!!!\270!!!!!\270!!!\270!!!!!\270!!!\270!!!!!\270!!!\270!!!!!\270!!!\270!!!!!\270!!!\270!!!!!\270!!!\270!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\270!!!\270!!!\270!!!\270!!!\270!!!\270!!!\270!!!\270!!!!" + "'", str2, "\270!!!\270!!!\270!!!\270!!!\270!!!\270!!!\270!!!\270!!!!");
    }

    @Test
    public void test14315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14315");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnullnullnullnullnull!", "LLLL\276LLLLLLL\276\276LLLLL\276\276LLLLL\276\276LLLLL\276\276LLLL\276LLLLLLL\276\276LLLLL\276\276!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226!" + "'", str2, "\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226!");
    }

    @Test
    public void test14316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14316");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0366\u0365\u0368\u0368\u02cc\u02cc\u02cc\u02cc\u02cc\u02cc\u0346\u0348\u0348!", "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test14317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14317");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!!\256NN\200\200\254\254\256NN\200\200\254\254!!\256NN\200\200\254\254\256NN\200\200\254\254!!\256NN\200\200\254\254\256NN\200\200\254\254!!\256NN\200\200\254\254\256NN\200\200\254\254!!\256NN\200\200\254\254\256NN\200\200\254\254!!\256NN\200\200\254\254\256NN\200\200\254\254!!\256NN\200\200\254\254\256NN\200\200\254\254!!\256NN\200\200\254\254\256NN\200\200\254\254!", "\u0244\u0246\u0246\u0244\u0246\u0246\u0244\u0246\u0246\u0244\u0246\u0246\256\u0244\u0246\u0246\u0244\u0246\u0246\u0244\u0246\u0246\u0244\u0246\u0246\u0244\u0246\u0246\u0244\u0246\u0246\u0244\u0246\u0246\u0244\u0246\u0246\u0244\u0246\u0246\u0244\u0246\u0246\u0244\u0246\u0246\u0244\u0246\u0246!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!" + "'", str2, "!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!");
    }

    @Test
    public void test14318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14318");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!!ll\340\340ll\340\340!!ll\340\340ll\340\340!!ll\340\340ll\340\340!!ll\340\340ll\340\340!!ll\340\340ll\340\340!!ll\340\340ll\340\340!!ll\340\340ll\340\340!!ll\340\340ll\340\340!", "ULLLULLLULLLULLLULLLULLLULLLULLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\200\200nullnull\200\200nullnull!!\200\200nullnull\200\200nullnull!!\200\200nullnull\200\200nullnull!!\200\200nullnull\200\200nullnull!!\200\200nullnull\200\200nullnull!!\200\200nullnull\200\200nullnull!!\200\200nullnull\200\200nullnull!!\200\200nullnull\200\200nullnull!" + "'", str2, "!!\200\200nullnull\200\200nullnull!!\200\200nullnull\200\200nullnull!!\200\200nullnull\200\200nullnull!!\200\200nullnull\200\200nullnull!!\200\200nullnull\200\200nullnull!!\200\200nullnull\200\200nullnull!!\200\200nullnull\200\200nullnull!!\200\200nullnull\200\200nullnull!");
    }

    @Test
    public void test14319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14319");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0346\u0348\u0348\u0348}~\200\200}~\200\200nullqnullnullnullqnullnull}~\200\200}~\200\200nullqnullnullnullqnullnull}~\200\200}~\200\200nullqnullnullnullqnullnull}~\200\200}~\200\200\u0348\u0346\u0346!", "~}\200\200~}\200\200UELLUELLuuUELLUELLuu~}\200\200~}\200\200UELLUELLuuUELLUELLuu~}\200\200~}\200\200UELLUELLuuUELLUELLuu~}\200\200~}\200\200UELLUELLuuUELLUELLuu~}\200\200~}\200\200UELLUELLuuUELLUELLuu~}\200\200~}\200\200UELLUELLuuUELLUELLuu~}\200\200~}\200\200UELLUELLuuUELLUELLuu~}\200\200~}\200\200UELLUELLuuUELLUELLuu!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348}~\200\200}~\200\200\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e}~\200\200}~\200\200\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e}~\200\200}~\200\200\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e}~\200\200}~\200\200\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348}~\200\200}~\200\200\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e}~\200\200}~\200\200\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e}~\200\200}~\200\200\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e}~\200\200}~\200\200\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0140\u013e\u013e\u0348\u0346\u0346!");
    }

    @Test
    public void test14320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14320");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("nullvvvnullvvvnullvvvnullvvv\200}}`nullvvvnullvvvnullvvvnullvvv]]!", "U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212!!U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212!!U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212!!U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212!!U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\210\210UUUUU\210\210UUUUU\210\210UUUUU\210\210UUUUU\200}}`\210\210UUUUU\210\210UUUUU\210\210UUUUU\210\210UUUUU]]!" + "'", str2, "\210\210UUUUU\210\210UUUUU\210\210UUUUU\210\210UUUUU\200}}`\210\210UUUUU\210\210UUUUU\210\210UUUUU\210\210UUUUU]]!");
    }

    @Test
    public void test14321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14321");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("`\231\231\220\220\231\231\220\220\231\231\220\220`\231\231\220\220\231\231\220\220\231\231\220\220!", "!!\256\u01dc\u01df\u01dc\u01dc\254\254\256\u01dc\u01df\u01dc\u01dc\254\254!!\256\u01dc\u01df\u01dc\u01dc\254\254\256\u01dc\u01df\u01dc\u01dc\254\254!!\256\u01dc\u01df\u01dc\u01dc\254\254\256\u01dc\u01df\u01dc\u01dc\254\254!!\256\u01dc\u01df\u01dc\u01dc\254\254\256\u01dc\u01df\u01dc\u01dc\254\254!!\256\u01dc\u01df\u01dc\u01dc\254\254\256\u01dc\u01df\u01dc\u01dc\254\254!!\256\u01dc\u01df\u01dc\u01dc\254\254\256\u01dc\u01df\u01dc\u01dc\254\254!!\256\u01dc\u01df\u01dc\u01dc\254\254\256\u01dc\u01df\u01dc\u01dc\254\254!!\256\u01dc\u01df\u01dc\u01dc\254\254\256\u01dc\u01df\u01dc\u01dc\254\254!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`\231\231\220\220\231\231\220\220\231\231\220\220`\231\231\220\220\231\231\220\220\231\231\220\220!" + "'", str2, "`\231\231\220\220\231\231\220\220\231\231\220\220`\231\231\220\220\231\231\220\220\231\231\220\220!");
    }

    @Test
    public void test14322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14322");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!nullnull
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!\336\336\336\336\336\336\336\336!!!!!\336\336\336\336\336\336\336\336!!!!!\336\336\336\336\336\336\336\336!!!!!\336\336\336\336\336\336\336\336!!!!!\336\336\336\336\336\336\336\336!!!!!\336\336\336\336\336\336\336\336!!!!!\336\336\336\336\336\336\336\336!!!!!\336\336\336\336\336\336\336\336!" + "'", str2, "!!!!!\336\336\336\336\336\336\336\336!!!!!\336\336\336\336\336\336\336\336!!!!!\336\336\336\336\336\336\336\336!!!!!\336\336\336\336\336\336\336\336!!!!!\336\336\336\336\336\336\336\336!!!!!\336\336\336\336\336\336\336\336!!!!!\336\336\336\336\336\336\336\336!!!!!\336\336\336\336\336\336\336\336!");
    }

    @Test
    public void test14323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14323");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253\253!", "!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14324");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("XX!!XX!!XX!!XX!!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!!", "\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\260\255\255\225\230\230\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\260\255\255\225\230\230\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\260\255\255\225\230\230\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\260\255\255\225\230\230\200\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\260\255\255\225\230\230\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\260\255\255\225\230\230\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\260\255\255\225\230\230\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\u019f\u019f\u019d\u019d\260\255\255\225\230\230]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!" + "'", str2, "nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!");
    }

    @Test
    public void test14325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14325");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!!u!\276\276u!\276\276!!u!\276\276u!\276\276!!!!u!\276\276u!\276\276!!u!\276\276u!\276\276!!!!u!\276\276u!\276\276!!u!\276\276u!\276\276!!!!u!\276\276u!\276\276!!u!\276\276u!\276\276!!!!u!\276\276u!\276\276!!u!\276\276u!\276\276!!!!u!\276\276u!\276\276!!u!\276\276u!\276\276!!!!u!\276\276u!\276\276!!u!\276\276u!\276\276!!!!u!\276\276u!\276\276!!u!\276\276u!\276\276!!!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200hfhhhfhh\223\223hfhhhfhhhfhhhfhhhfhh\223\223hfhhhfhhhfhh}~\200\200}~\200\200hfhhhfhh\223\223hfhhhfhhhfhhhfhhhfhh\223\223hfhhhfhhhfhh}~\200\200}~\200\200hfhhhfhh\223\223hfhhhfhhhfhhhfhhhfhh\223\223hfhhhfhhhfhh}~\200\200}~\200\200hfhhhfhh\223\223hfhhhfhhhfhhhfhhhfhh\223\223\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!null!\276\276null!\276\276!!null!\276\276null!\276\276!!!!null!\276\276null!\276\276!!null!\276\276null!\276\276!!!!null!\276\276null!\276\276!!null!\276\276null!\276\276!!!!null!\276\276null!\276\276!!null!\276\276null!\276\276!!!!null!\276\276null!\276\276!!null!\276\276null!\276\276!!!!null!\276\276null!\276\276!!null!\276\276null!\276\276!!!!null!\276\276null!\276\276!!null!\276\276null!\276\276!!!!null!\276\276null!\276\276!!null!\276\276null!\276\276!!!" + "'", str2, "!!null!\276\276null!\276\276!!null!\276\276null!\276\276!!!!null!\276\276null!\276\276!!null!\276\276null!\276\276!!!!null!\276\276null!\276\276!!null!\276\276null!\276\276!!!!null!\276\276null!\276\276!!null!\276\276null!\276\276!!!!null!\276\276null!\276\276!!null!\276\276null!\276\276!!!!null!\276\276null!\276\276!!null!\276\276null!\276\276!!!!null!\276\276null!\276\276!!null!\276\276null!\276\276!!!!null!\276\276null!\276\276!!null!\276\276null!\276\276!!!");
    }

    @Test
    public void test14326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14326");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("}~\200\200}~\200\200\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338}~\200\200}~\200\200\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338!", "``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~\200\200}~\200\200\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338}~\200\200}~\200\200\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338!" + "'", str2, "}~\200\200}~\200\200\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338}~\200\200}~\200\200\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338!");
    }

    @Test
    public void test14327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14327");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!", "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\214\214UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\214\214UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\214\214UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\214\214UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\214\214UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\214\214UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\214\214UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\214\214!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!" + "'", str2, "\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!");
    }

    @Test
    public void test14328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14328");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6!", "~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```~~~~~~~~~~~~~~~~!!!```!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6!" + "'", str2, "``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6``\230\u02d6\u02d6\230\u02d6\u02d6!");
    }

    @Test
    public void test14329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14329");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("ualluallualluallualluall!!!!ualluallualluallualluall!!!!!!ualluallualluallualluall!!!!ualluallualluallualluall!!!!!!ualluallualluallualluall!!!!ualluallualluallualluall!!!!!!ualluallualluallualluall!!!!ualluallualluallualluall!!!!!!ualluallualluallualluall!!!!ualluallualluallualluall!!!!!!ualluallualluallualluall!!!!ualluallualluallualluall!!!!!!ualluallualluallualluall!!!!ualluallualluallualluall!!!!!!ualluallualluallualluall!!!!ualluallualluallualluall!!!!!!!", "MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!\214\214MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!\214\214MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!\214\214MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!\214\214MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!\214\214MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!\214\214MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!\214\214MM!!MM!!MM!!MM!!MM!!MM!!MM!!MM!!\214\214!");
        org.junit.Assert.assertEquals("'" + strstr2, "!\214MM!\214MM!\214MM!\214MM!\214MM!\214MM!!!!!\214MM!\214MM!\214MM!\214MM!\214MM!\214MM!!!!!!!\214MM!\214MM!\214MM!\214MM!\214MM!\214MM!!!!!\214MM!\214MM!\214MM!\214MM!\214MM!\214MM!!!!!!!\214MM!\214MM!\214MM!\214MM!\214MM!\214MM!!!!!\214MM!\214MM!\214MM!\214MM!\214MM!\214MM!!!!!!!\214MM!\214MM!\214MM!\214MM!\214MM!\214MM!!!!!\214MM!\214MM!\214MM!\214MM!\214MM!\214MM!!!!!!!\214MM!\214MM!\214MM!\214MM!\214MM!\214MM!!!!!\214MM!\214MM!\214MM!\214MM!\214MM!\214MM!!!!!!!\214MM!\214MM!\214MM!\214MM!\214MM!\214MM!!!!!\214MM!\214MM!\214MM!\214MM!\214MM!\214MM!!!!!!!\214MM!\214MM!\214MM!\214MM!\214MM!\214MM!!!!!\214MM!\214MM!\214MM!\214MM!\214MM!\214MM!!!!!!!\214MM!\214MM!\214MM!\214MM!\214MM!\214MM!!!!!\214MM!\214MM!\214MM!\214MM!\214MM!\214MM!!!!!!!");
    }

    @Test
    public void test14330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14330");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("", "null\220~~null\220~~!!null\220~~null\220~~!!null\220~~null\220~~!!null\220~~null\220~~!!null\220~~null\220~~!!null\220~~null\220~~!!null\220~~null\220~~!!null\220~~null\220~~!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14331");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("]LNLLLNLLLNLLLNLLLNLL]]LNLLLNLL]]LNLLLNLL]]LNLLLNLL]]]LNLLLNLLLNLLLNLLLNLL]]LNLLLNLL]]!", "\253!!!\253!!!\253\253\253!!!\253!!!\253\253!!\253!!!\253!!!\253\253\253!!!\253!!!\253\253!!\253!!!\253!!!\253\253\253!!!\253!!!\253\253!!\253!!!\253!!!\253\253\253!!!\253!!!\253\253!!\253!!!\253!!!\253\253\253!!!\253!!!\253\253!!\253!!!\253!!!\253\253\253!!!\253!!!\253\253!!\253!!!\253!!!\253\253\253!!!\253!!!\253\253!!\253!!!\253!!!\253\253\253!!!\253!!!\253\253!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]!" + "'", str2, "]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]!");
    }

    @Test
    public void test14332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14332");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!", "`!!\275\275!!\275\275!!\275\275`!!\275\275!!\275\275!!\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275!" + "'", str2, "\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275\275!");
    }

    @Test
    public void test14333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14333");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\200\200\u0348\u0348\200\200\u0348\u0348!!\200\200\u0348\u0348\200\200\u0348\u0348!!\200\200\u0348\u0348\200\200\u0348\u0348\200\200\u0348\u0348\200\200\u0348\u0348!!\200\200\u0348\u0348\200\200\u0348\u0348!!\200\200\u0348\u0348\200\200\u0348\u0348!", "!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!\200}}`!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!!PORR!!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200\200\u0348\u0348\200\200\u0348\u0348!!\200\200\u0348\u0348\200\200\u0348\u0348!!\200\200\u0348\u0348\200\200\u0348\u0348\200\200\u0348\u0348\200\200\u0348\u0348!!\200\200\u0348\u0348\200\200\u0348\u0348!!\200\200\u0348\u0348\200\200\u0348\u0348!" + "'", str2, "\200\200\u0348\u0348\200\200\u0348\u0348!!\200\200\u0348\u0348\200\200\u0348\u0348!!\200\200\u0348\u0348\200\200\u0348\u0348\200\200\u0348\u0348\200\200\u0348\u0348!!\200\200\u0348\u0348\200\200\u0348\u0348!!\200\200\u0348\u0348\200\200\u0348\u0348!");
    }

    @Test
    public void test14334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14334");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!!nullnull!", "\276!\275\275\276!\275\275\276!\275\275\276!\275\275\276!\275\275\276!\275\275\276!\275\275\276!\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!\276\275\275!\276\275\275!" + "'", str2, "!!!!\276\275\275!\276\275\275!");
    }

    @Test
    public void test14335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14335");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("}UN``!!!\200\200}UN``!!!\200\200}UN``!!!\200\200}UN``!!!\200\200UN``!~~UN``!~~UN``!~~UN``!~~UN``!~~UN``!~~UN``!~~UN``!~~UN``!~~UN``!~~UN``!~~UN``!~~UN``!~~UN``!~~UN``!~~UN``!~~}UN``!!!\200\200}UN``!!!\200\200}UN``!!!\200\200}UN``!!!\200\200UN``!~~UN``!~~UN``!~~UN``!~~UN``!~~UN``!~~UN``!~~UN``!~~!", "nullnullUUUUUUUUnullnullUUUUUUUUnullnullUUUUUUUUnullnullUUUUUUUUnullnullUUUUUUUUnullnullUUUUUUUUnullnullUUUUUUUUnullnullUUUUUUUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}NU``!!!\200\200}NU``!!!\200\200}NU``!!!\200\200}NU``!!!\200\200NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~}NU``!!!\200\200}NU``!!!\200\200}NU``!!!\200\200}NU``!!!\200\200NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~!" + "'", str2, "}NU``!!!\200\200}NU``!!!\200\200}NU``!!!\200\200}NU``!!!\200\200NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~}NU``!!!\200\200}NU``!!!\200\200}NU``!!!\200\200}NU``!!!\200\200NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~NU``!~~!");
    }

    @Test
    public void test14336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14336");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!", "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!" + "'", str2, "!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!");
    }

    @Test
    public void test14337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14337");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d!", "!\331\330\333\333\331\330\333\333\331\330\333\333\331\330\333\333!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14338");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUnullUUUUUUUUUUUUnullUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUnullUUUUUUUUUUUUnullUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUnullUUUUUUUUUUUUnullUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUnullUUUUUUUUUUUUnullUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUnullUUUUUUUUUUUUnullUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUnullUUUUUUUUUUUUnullUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUnullUUUUUUUUUUUUnullUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUnullUUUUUUUUUUUUnullUUUUUUUU!", "\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvnull\226\223\223vvvvvvvv!" + "'", str2, "vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvnull\226\223\223vvvvvvvvvvvvnull\226\223\223vvvvvvvv!");
    }

    @Test
    public void test14339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14339");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("", "\u023e\u023e\u023e\u023e!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14340");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!~\200\u0183\u0184\u0188\u0188~~\200\u0183\u0184\u0188\u0188~~!~\200\u0183\u0184\u0188\u0188~~\200\u0183\u0184\u0188\u0188~~!!!~\200\u0183\u0184\u0188\u0188~~\200\u0183\u0184\u0188\u0188~~!~\200\u0183\u0184\u0188\u0188~~\200\u0183\u0184\u0188\u0188~~!!!~\200\u0183\u0184\u0188\u0188~~\200\u0183\u0184\u0188\u0188~~!~\200\u0183\u0184\u0188\u0188~~\200\u0183\u0184\u0188\u0188~~!~\200\u0183\u0184\u0188\u0188~~\200\u0183\u0184\u0188\u0188~~!~\200\u0183\u0184\u0188\u0188~~\200\u0183\u0184\u0188\u0188~~!!!~\200\u0183\u0184\u0188\u0188~~\200\u0183\u0184\u0188\u0188~~!~\200\u0183\u0184\u0188\u0188~~\200\u0183\u0184\u0188\u0188~~!!!~\200\u0183\u0184\u0188\u0188~~\200\u0183\u0184\u0188\u0188~~!~\200\u0183\u0184\u0188\u0188~~\200\u0183\u0184\u0188\u0188~~!", "LLLL!LLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLL!LLLLLLLLLLLLLLLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!!!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!!!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!!!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!!!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!" + "'", str2, "!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!!!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!!!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!!!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!!!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!");
    }

    @Test
    public void test14341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14341");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\204LNUU\204\204\204LNUU\204\204!!\204LNUU\204\204\204LNUU\204\204!!\204LNUU\204\204\204LNUU\204\204\204LNUU\204\204\204LNUU\204\204!!\204LNUU\204\204\204LNUU\204\204!!\204LNUU\204\204\204LNUU\204\204!", "!NNN!NNN!NNN!NNN!NNN!NNN!!!NNN!NNN!!!!!!!NNN!NNN!NNN!NNN!NNN!NNN!!!NNN!NNN!!!!!!!!!NNN!NNN!NNN!NNN!NNN!NNN!!!NNN!NNN!!!!!!!NNN!NNN!NNN!NNN!NNN!NNN!!!NNN!NNN!!!!!!!!!NNN!NNN!NNN!NNN!NNN!NNN!!!NNN!NNN!!!!!!!NNN!NNN!NNN!NNN!NNN!NNN!!!NNN!NNN!!!!!!!!!NNN!NNN!NNN!NNN!NNN!NNN!!!NNN!NNN!!!!!!!NNN!NNN!NNN!NNN!NNN!NNN!!!NNN!NNN!!!!!!!!!NNN!NNN!NNN!NNN!NNN!NNN!!!NNN!NNN!!!!!!!NNN!NNN!NNN!NNN!NNN!NNN!!!NNN!NNN!!!!!!!!!NNN!NNN!NNN!NNN!NNN!NNN!!!NNN!NNN!!!!!!!NNN!NNN!NNN!NNN!NNN!NNN!!!NNN!NNN!!!!!!!!!NNN!NNN!NNN!NNN!NNN!NNN!!!NNN!NNN!!!!!!!NNN!NNN!NNN!NNN!NNN!NNN!!!NNN!NNN!!!!!!!!!NNN!NNN!NNN!NNN!NNN!NNN!!!NNN!NNN!!!!!!!NNN!NNN!NNN!NNN!NNN!NNN!!!NNN!NNN!!!!!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\204\u02c8nullnull\204\204\204\u02c8nullnull\204\204!!\204\u02c8nullnull\204\204\204\u02c8nullnull\204\204!!\204\u02c8nullnull\204\204\204\u02c8nullnull\204\204\204\u02c8nullnull\204\204\204\u02c8nullnull\204\204!!\204\u02c8nullnull\204\204\204\u02c8nullnull\204\204!!\204\u02c8nullnull\204\204\204\u02c8nullnull\204\204!" + "'", str2, "\204\u02c8nullnull\204\204\204\u02c8nullnull\204\204!!\204\u02c8nullnull\204\204\204\u02c8nullnull\204\204!!\204\u02c8nullnull\204\204\204\u02c8nullnull\204\204\204\u02c8nullnull\204\204\204\u02c8nullnull\204\204!!\204\u02c8nullnull\204\204\204\u02c8nullnull\204\204!!\204\u02c8nullnull\204\204\204\u02c8nullnull\204\204!");
    }

    @Test
    public void test14342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14342");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode}~\200\200}~\200\200LUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMM}~\200\200}~\200\200LUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMMLUMM!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14343");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU!", "\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282\u027f\u0280\u0282\u0282nullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6!" + "'", str2, "\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6\275\276\u01a6\u01a6\u01a6\u01a6!");
    }

    @Test
    public void test14344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14344");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("HEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHHHEFFHEFFHH!", "UNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLL!" + "'", str2, "LUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLL!");
    }

    @Test
    public void test14345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14345");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\275UUU\275UUU!", "\u0366\u0365\u0368\u0368null\213\213\213\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275nullnullnull\275nullnullnull!" + "'", str2, "\275nullnullnull\275nullnullnull!");
    }

    @Test
    public void test14346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14346");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("^}\214\214^}\214\214~~^}\214\214^}\214\214~~!", "\u0170\u016c\u016e\u016e\276\276\276\u0170\u016c\u016e\u016e\276\276\276\276\276\u0170\u016c\u016e\u016e\276\276\276\u0170\u016c\u016e\u016e\276\276\276\276\276\u0170\u016c\u016e\u016e\276\276\276\u0170\u016c\u016e\u016e\276\276\276\276\276\u0170\u016c\u016e\u016e\276\276\276\u0170\u016c\u016e\u016e\276\276\276\276\276\u0170\u016c\u016e\u016e\276\276\276\u0170\u016c\u016e\u016e\276\276\276\276\276\u0170\u016c\u016e\u016e\276\276\276\u0170\u016c\u016e\u016e\276\276\276\276\276\u0170\u016c\u016e\u016e\276\276\276\u0170\u016c\u016e\u016e\276\276\276\276\276\u0170\u016c\u016e\u016e\276\276\276\u0170\u016c\u016e\u016e\276\276\276\276\276!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^}\214\214^}\214\214~~^}\214\214^}\214\214~~!" + "'", str2, "^}\214\214^}\214\214~~^}\214\214^}\214\214~~!");
    }

    @Test
    public void test14347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14347");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("wy!!wy!!\226\227\231\231!\214\214\226\227\231\231!\214\214wy!!wy!!\226\227\231\231!\214\214\226\227\231\231!\214\214wy!!wy!!\226\227\231\231!\214\214\226\227\231\231!\214\214wy!!wy!!\226\227\231\231!\214\214\226\227\231\231!\214\214wy!!wy!!\226\227\231\231!\214\214\226\227\231\231!\214\214wy!!wy!!\226\227\231\231!\214\214\226\227\231\231!\214\214wy!!wy!!\226\227\231\231!\214\214\226\227\231\231!\214\214wy!!wy!!\226\227\231\231!\214\214\226\227\231\231!\214\214!", "\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NL!!NL!!\226\227\231\231!\214\214\226\227\231\231!\214\214NL!!NL!!\226\227\231\231!\214\214\226\227\231\231!\214\214NL!!NL!!\226\227\231\231!\214\214\226\227\231\231!\214\214NL!!NL!!\226\227\231\231!\214\214\226\227\231\231!\214\214NL!!NL!!\226\227\231\231!\214\214\226\227\231\231!\214\214NL!!NL!!\226\227\231\231!\214\214\226\227\231\231!\214\214NL!!NL!!\226\227\231\231!\214\214\226\227\231\231!\214\214NL!!NL!!\226\227\231\231!\214\214\226\227\231\231!\214\214!" + "'", str2, "NL!!NL!!\226\227\231\231!\214\214\226\227\231\231!\214\214NL!!NL!!\226\227\231\231!\214\214\226\227\231\231!\214\214NL!!NL!!\226\227\231\231!\214\214\226\227\231\231!\214\214NL!!NL!!\226\227\231\231!\214\214\226\227\231\231!\214\214NL!!NL!!\226\227\231\231!\214\214\226\227\231\231!\214\214NL!!NL!!\226\227\231\231!\214\214\226\227\231\231!\214\214NL!!NL!!\226\227\231\231!\214\214\226\227\231\231!\214\214NL!!NL!!\226\227\231\231!\214\214\226\227\231\231!\214\214!");
    }

    @Test
    public void test14348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14348");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\253\254\256\256``^^``^^``^^``^^\253\254\256\256``^^``^^!", "E\220UU\200~~E\220UU\200~~E\220UUE\220UUE\220UU\200~~E\220UU\200~~E\220UUE\220UU!!E\220UU\200~~E\220UU\200~~E\220UUE\220UUE\220UU\200~~E\220UU\200~~E\220UUE\220UU!!E\220UU\200~~E\220UU\200~~E\220UUE\220UUE\220UU\200~~E\220UU\200~~E\220UUE\220UUE\220UU\200~~E\220UU\200~~E\220UUE\220UUE\220UU\200~~E\220UU\200~~E\220UUE\220UU!!E\220UU\200~~E\220UU\200~~E\220UUE\220UUE\220UU\200~~E\220UU\200~~E\220UUE\220UU!!E\220UU\200~~E\220UU\200~~E\220UUE\220UUE\220UU\200~~E\220UU\200~~E\220UUE\220UU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\254\256\256``^^``^^``^^``^^\253\254\256\256``^^``^^!" + "'", str2, "\253\254\256\256``^^``^^``^^``^^\253\254\256\256``^^``^^!");
    }

    @Test
    public void test14349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14349");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\275``uuuuuuuu``uuuuuuuu``uuuuuuuu\276``uuuuuuuu\275\275!", "]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275``UUUUUUUU``UUUUUUUU``UUUUUUUU\276``UUUUUUUU\275\275!" + "'", str2, "\275``UUUUUUUU``UUUUUUUU``UUUUUUUU\276``UUUUUUUU\275\275!");
    }

    @Test
    public void test14350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14350");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u01bc\u01bc\u01ba\u01ba\u01bc\u01bc\u01bc\u01ba\u01ba\u01bc\u01bc\u01bc\u01ba\u01ba\u01bc\u01bc\u01bc\u01ba\u01ba\u01bc\u01bc\u01bc\u01ba\u01ba\u01bc\u01bc\u01bc\u01ba\u01ba\u01bc\u01bc\u01bc\u01ba\u01ba\u01bc\u01bc\u01bc\u01ba\u01ba\u01bc~~!", "ss!!ss!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnull~~nullnullnullnullnull~~nullnullnullnullnull~~nullnullnullnullnull~~nullnullnullnullnull~~nullnullnullnullnull~~nullnullnullnullnull~~nullnullnullnullnull~~!" + "'", str2, "nullnullnullnullnull~~nullnullnullnullnull~~nullnullnullnullnull~~nullnullnullnullnull~~nullnullnullnullnull~~nullnullnullnullnull~~nullnullnullnullnull~~nullnullnullnullnull~~!");
    }

    @Test
    public void test14351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14351");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u016e\u016e\u016e\u016eUU\256\254\254\u016e\u016e\u016e\u016eUU\256\254\254\u016e\u016e\u016e\u016eUU\256\254\254\u016e\u016e\u016e\u016eUU\256\254\254\u016e\u016e\u016e\u016eUU\256\254\254\u016e\u016e\u016e\u016eUU\256\254\254\u016e\u016e\u016e\u016eUU\256\254\254\u016e\u016e\u016e\u016eUU\256\254\254\u016e\u016e\u016e\u016eUU\256\254\254\u016e\u016e\u016e\u016eUU\256\254\254\u016e\u016e\u016e\u016eUU\256\254\254\u016e\u016e\u016e\u016eUU\256\254\254\u016e\u016e\u016e\u016eUU\256\254\254\u016e\u016e\u016e\u016eUU\256\254\254\u016e\u016e\u016e\u016eUU\256\254\254\u016e\u016e\u016e\u016eUU\256\254\254!!!", "\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LnullNNLnullNNLnullNNLnullNN\256\254\254LnullNNLnullNNLnullNNLnullNN\256\254\254!!LnullNNLnullNNLnullNNLnullNN\256\254\254LnullNNLnullNNLnullNNLnullNN\256\254\254!!LnullNNLnullNNLnullNNLnullNN\256\254\254LnullNNLnullNNLnullNNLnullNN\256\254\254!!LnullNNLnullNNLnullNNLnullNN\256\254\254LnullNNLnullNNLnullNNLnullNN\256\254\254!!LnullNNLnullNNLnullNNLnullNN\256\254\254LnullNNLnullNNLnullNNLnullNN\256\254\254!!LnullNNLnullNNLnullNNLnullNN\256\254\254LnullNNLnullNNLnullNNLnullNN\256\254\254!!LnullNNLnullNNLnullNNLnullNN\256\254\254LnullNNLnullNNLnullNNLnullNN\256\254\254!!LnullNNLnullNNLnullNNLnullNN\256\254\254LnullNNLnullNNLnullNNLnullNN\256\254\254!!!" + "'", str2, "LnullNNLnullNNLnullNNLnullNN\256\254\254LnullNNLnullNNLnullNNLnullNN\256\254\254!!LnullNNLnullNNLnullNNLnullNN\256\254\254LnullNNLnullNNLnullNNLnullNN\256\254\254!!LnullNNLnullNNLnullNNLnullNN\256\254\254LnullNNLnullNNLnullNNLnullNN\256\254\254!!LnullNNLnullNNLnullNNLnullNN\256\254\254LnullNNLnullNNLnullNNLnullNN\256\254\254!!LnullNNLnullNNLnullNNLnullNN\256\254\254LnullNNLnullNNLnullNNLnullNN\256\254\254!!LnullNNLnullNNLnullNNLnullNN\256\254\254LnullNNLnullNNLnullNNLnullNN\256\254\254!!LnullNNLnullNNLnullNNLnullNN\256\254\254LnullNNLnullNNLnullNNLnullNN\256\254\254!!LnullNNLnullNNLnullNNLnullNN\256\254\254LnullNNLnullNNLnullNNLnullNN\256\254\254!!!");
    }

    @Test
    public void test14352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14352");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!\214\214LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!\214\214LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!\214\214LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!\214\214LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!\214\214LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!\214\214LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!\214\214LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!\214\214!", "~}\200\200~}\200\200FHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHEEFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHEE~}\200\200~}\200\200FHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHEEFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHEE~}\200\200~}\200\200FHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHEEFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHEE~}\200\200~}\200\200FHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHEEFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHEE~}\200\200~}\200\200FHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHEEFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHEE~}\200\200~}\200\200FHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHEEFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHEE~}\200\200~}\200\200FHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHEEFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHEE~}\200\200~}\200\200FHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHEEFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHEE!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!\214\214HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!\214\214HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!\214\214HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!\214\214HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!\214\214HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!\214\214HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!\214\214HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!\214\214!" + "'", str2, "HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!\214\214HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!\214\214HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!\214\214HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!\214\214HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!\214\214HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!\214\214HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!\214\214HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!\214\214!");
    }

    @Test
    public void test14353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14353");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("}]]]~null}]]]nullnullnull}]]]nullnull}]]]~null}]]]nullnullnull}]]]nullnull!!}]]]~null}]]]nullnullnull}]]]nullnull}]]]~null}]]]nullnullnull}]]]nullnull!!}]]]~null}]]]nullnullnull}]]]nullnull}]]]~null}]]]nullnullnull}]]]nullnull}]]]~null}]]]nullnullnull}]]]nullnull}]]]~null}]]]nullnullnull}]]]nullnull!!}]]]~null}]]]nullnullnull}]]]nullnull}]]]~null}]]]nullnullnull}]]]nullnull!!}]]]~null}]]]nullnullnull}]]]nullnull}]]]~null}]]]nullnullnull}]]]nullnull!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull}~\200\200}~\200\200nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull}~\200\200}~\200\200nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull}~\200\200}~\200\200\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL!!}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL!!}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL!!}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL!!}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL!" + "'", str2, "}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL!!}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL!!}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL!!}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL!!}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL}]]]~UNLL}]]]UNLLUNLLUNLL}]]]UNLLUNLL!");
    }

    @Test
    public void test14354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14354");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("FF!!FF!!!", "\254\254!!\254\254!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\254\254!!\254\254!!!" + "'", str2, "\254\254!!\254\254!!!");
    }

    @Test
    public void test14355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14355");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("}}}}}}}}}}}}}}}}\200}}`}}}}}}}}}}}}}}}}]]!", "\276X\266\266~XX\276X\266\266~XX!!\276X\266\266~XX\276X\266\266~XX!!\276X\266\266~XX\276X\266\266~XX\276X\266\266~XX\276X\266\266~XX!!\276X\266\266~XX\276X\266\266~XX!!\276X\266\266~XX\276X\266\266~XX!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}}}}}}}}}}}}}}}}\200}}`}}}}}}}}}}}}}}}}]]!" + "'", str2, "}}}}}}}}}}}}}}}}\200}}`}}}}}}}}}}}}}}}}]]!");
    }

    @Test
    public void test14356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14356");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!!", "LLLLLLLLLLLLLLLLL!!!L!!!L!!!L!!!LLLLLLLLLLLLLLLLL!!!L!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!!" + "'", str2, "\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!\275\275!!\275\275!!!!\275\275!!\275\275!!!!!!!");
    }

    @Test
    public void test14357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14357");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("", "\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d\u021d!nullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14358");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("]]nullnull]]nullnull!!]]nullnull]]nullnull!!]]nullnull]]nullnull]]nullnull]]nullnull!!]]nullnull]]nullnull!!]]nullnull]]nullnull!", "\276\300\266\266~\300\300\276\300\266\266~\300\300!!\276\300\266\266~\300\300\276\300\266\266~\300\300!!\276\300\266\266~\300\300\276\300\266\266~\300\300\276\300\266\266~\300\300\276\300\266\266~\300\300!!\276\300\266\266~\300\300\276\300\266\266~\300\300!!\276\300\266\266~\300\300\276\300\266\266~\300\300!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!" + "'", str2, "]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14359");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("hnullffhnullffhnullffhnullffhnullffhnullffhnullffhnullffhnullffhnullffhnullffhnullffhnullffhnullff!", "\u0366\u0365\u0368\u0368\215\215!!\215\215!!\215\215!!\215\215!!\213\213\213\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14360");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("nullnullnullnullnullnullnullnull\374\u0128\u0128\374\u0128\u0128nullnullnullnullnullnullnullnull\374\u0128\u0128\374\u0128\u0128nullnullnullnullnullnullnullnull\374\u0128\u0128\374\u0128\u0128nullnullnullnullnullnullnullnull\374\u0128\u0128\374\u0128\u0128nullnullnullnullnullnullnullnull\374\u0128\u0128\374\u0128\u0128nullnullnullnullnullnullnullnull\374\u0128\u0128\374\u0128\u0128nullnullnullnullnullnullnullnull\374\u0128\u0128\374\u0128\u0128nullnullnullnullnullnullnullnull\374\u0128\u0128\374\u0128\u0128!", "\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225null!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224nullnull!" + "'", str2, "\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224\u0224nullnull!");
    }

    @Test
    public void test14361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14361");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```dddd```!", "\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016enullnullnullnullnullnullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```!" + "'", str2, "LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```!");
    }

    @Test
    public void test14362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14362");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!", "\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010d\u010dnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!" + "'", str2, "\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!");
    }

    @Test
    public void test14363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14363");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("", "\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14364");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0366\u0365\u0368\u0368\u041b\u041c\u041c\u041c\u0346\u0348\u0348!", "\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test14365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14365");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0228\u0228null!!!", "\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200\u01fd\u01fe\u0200\u0200!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnull!!nullnullnullnullnull!!!" + "'", str2, "nullnullnullnullnull!!nullnullnullnullnull!!!");
    }

    @Test
    public void test14366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14366");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!", "LL!!UULLUULLUULLLL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!UULLUULLUULLLL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!!" + "'", str2, "!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!!");
    }

    @Test
    public void test14367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14367");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u043d\u043e\u0440\u0440\u0420\u0420\u043d\u043e\u0440\u0440\u0420\u0420\u043d\u043e\u0440\u0440\u0420\u0420\u043d\u043e\u0440\u0440\u0420\u0420\u043d\u043e\u0440\u0440\u0420\u0420\u043d\u043e\u0440\u0440\u0420\u0420\u043d\u043e\u0440\u0440\u0420\u0420\u043d\u043e\u0440\u0440\u0420\u0420\u043d\u043e\u0440\u0440\u0420\u0420\u043d\u043e\u0440\u0440\u0420\u0420\u043d\u043e\u0440\u0440\u0420\u0420\u043d\u043e\u0440\u0440\u0420\u0420\u043d\u043e\u0440\u0440\u0420\u0420\u043d\u043e\u0440\u0440\u0420\u0420\u043d\u043e\u0440\u0440\u0420\u0420\u043d\u043e\u0440\u0440\u0420\u0420!!!", "]!null!!!null!!!null!!!null!!!null!!]]!null!!!null!!]]!null!!!null!!]]!null!!!null!!]]]!null!!!null!!!null!!!null!!!null!!]]!null!!!null!!]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\345\346\350\350nullnullnullnullnullnull\345\346\350\350nullnullnullnullnullnull!!\345\346\350\350nullnullnullnullnullnull\345\346\350\350nullnullnullnullnullnull!!\345\346\350\350nullnullnullnullnullnull\345\346\350\350nullnullnullnullnullnull!!\345\346\350\350nullnullnullnullnullnull\345\346\350\350nullnullnullnullnullnull!!\345\346\350\350nullnullnullnullnullnull\345\346\350\350nullnullnullnullnullnull!!\345\346\350\350nullnullnullnullnullnull\345\346\350\350nullnullnullnullnullnull!!\345\346\350\350nullnullnullnullnullnull\345\346\350\350nullnullnullnullnullnull!!\345\346\350\350nullnullnullnullnullnull\345\346\350\350nullnullnullnullnullnull!!!" + "'", str2, "\345\346\350\350nullnullnullnullnullnull\345\346\350\350nullnullnullnullnullnull!!\345\346\350\350nullnullnullnullnullnull\345\346\350\350nullnullnullnullnullnull!!\345\346\350\350nullnullnullnullnullnull\345\346\350\350nullnullnullnullnullnull!!\345\346\350\350nullnullnullnullnullnull\345\346\350\350nullnullnullnullnullnull!!\345\346\350\350nullnullnullnullnullnull\345\346\350\350nullnullnullnullnullnull!!\345\346\350\350nullnullnullnullnullnull\345\346\350\350nullnullnullnullnullnull!!\345\346\350\350nullnullnullnullnullnull\345\346\350\350nullnullnullnullnullnull!!\345\346\350\350nullnullnullnullnullnull\345\346\350\350nullnullnullnullnullnull!!!");
    }

    @Test
    public void test14368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14368");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!~\307\307!~\307\307\220\220!~\307\307!~\307\307\220\220\220!~\307\307\220\220\220!~\307\307\220\220\220!~\307\307\220\220\220!~\307\307\220\220!~\307\307!~\307\307\220\220!~\307\307!~\307\307\220\220!", "\256\204\256\256\256\204\256\256\256\204\256\256\256\204\256\256\256\256\256\256\256\256\256\256\256\256\256\256\256\256\256\256\256\204\256\256\256\204\256\256\256\204\256\256\256\204\256\256\256\256\256\256\256\256\256\256!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~nullnull!~nullnull\220\220!~nullnull!~nullnull\220\220\220!~nullnull\220\220\220!~nullnull\220\220\220!~nullnull\220\220\220!~nullnull\220\220!~nullnull!~nullnull\220\220!~nullnull!~nullnull\220\220!" + "'", str2, "!~nullnull!~nullnull\220\220!~nullnull!~nullnull\220\220\220!~nullnull\220\220\220!~nullnull\220\220\220!~nullnull\220\220\220!~nullnull\220\220!~nullnull!~nullnull\220\220!~nullnull!~nullnull\220\220!");
    }

    @Test
    public void test14369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14369");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("XWZZXWZZ!!XWZZXWZZ!!XWZZXWZZ!!XWZZXWZZ!!XWZZXWZZ!!XWZZXWZZ!!XWZZXWZZ!!XWZZXWZZ!!!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!!" + "'", str2, "LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!!");
    }

    @Test
    public void test14370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14370");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\215}\215\215\215}\215\215UUUU!!!UUUU!!!UUUU!!!UUUU!!!\215}\215\215\215}\215\215!", "~}\200\200~}\200\200NN~~}\200\200NN~~}\200\200\230\230NN~~}\200\200NN~~}\200\200\230\230~}\200\200~}\200\200NN~~}\200\200NN~~}\200\200\230\230NN~~}\200\200NN~~}\200\200\230\230~}\200\200~}\200\200NN~~}\200\200NN~~}\200\200\230\230NN~~}\200\200NN~~}\200\200\230\230~}\200\200~}\200\200NN~~}\200\200NN~~}\200\200\230\230NN~~}\200\200NN~~}\200\200\230\230~}\200\200~}\200\200NN~~}\200\200NN~~}\200\200\230\230NN~~}\200\200NN~~}\200\200\230\230~}\200\200~}\200\200NN~~}\200\200NN~~}\200\200\230\230NN~~}\200\200NN~~}\200\200\230\230~}\200\200~}\200\200NN~~}\200\200NN~~}\200\200\230\230NN~~}\200\200NN~~}\200\200\230\230~}\200\200~}\200\200NN~~}\200\200NN~~}\200\200\230\230NN~~}\200\200NN~~}\200\200\230\230!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\215}\215\215\215}\215\215nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215}\215\215\215}\215\215!" + "'", str2, "\215}\215\215\215}\215\215nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215}\215\215\215}\215\215!");
    }

    @Test
    public void test14371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14371");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("U!!!]U!!!U!!!!U!!!]U!!!U!!!U!!!]U!!!U!!!U!!!]U!!!U!!!!U!!!]U!!!U!!!U!!!]U!!!U!!!U!!!]U!!!U!!!!U!!!]U!!!U!!!U!!!]U!!!U!!!U!!!]U!!!U!!!!U!!!]U!!!U!!!U!!!]U!!!U!!!U!!!]U!!!U!!!!U!!!]U!!!U!!!U!!!]U!!!U!!!U!!!]U!!!U!!!!U!!!]U!!!U!!!U!!!]U!!!U!!!U!!!]U!!!U!!!!U!!!]U!!!U!!!U!!!]U!!!U!!!U!!!]U!!!U!!!!U!!!]U!!!U!!!U!!!]U!!!U!!!!", "\215\216\230\230\276U!UUU!UUU!UU\276U!UUU!UUU!UU\276U!UUU!UUU!UU\215\216\230\230\276U!UUU!UUU!UU\276U!UUU!UUU!UU\276U!UUU!UUU!UU\215\216\230\230\276U!UUU!UUU!UU\276U!UUU!UUU!UU\276U!UUU!UUU!UU\215\216\230\230\276U!UUU!UUU!UU\276U!UUU!UUU!UU\276U!UUU!UUU!UU\215\216\230\230\276U!UUU!UUU!UU\276U!UUU!UUU!UU\276U!UUU!UUU!UU\215\216\230\230\276U!UUU!UUU!UU\276U!UUU!UUU!UU\276U!UUU!UUU!UU\215\216\230\230\276U!UUU!UUU!UU\276U!UUU!UUU!UU\276U!UUU!UUU!UU\215\216\230\230\276U!UUU!UUU!UU\276U!UUU!UUU!UU\276U!UUU!UUU!UU!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198!!!!" + "'", str2, "\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198!!!!");
    }

    @Test
    public void test14372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14372");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN!", "UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!" + "'", str2, "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!");
    }

    @Test
    public void test14373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14373");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!\254!", "FFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHH!!FFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHH!!FFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHH!!FFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHH!!FFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\254!" + "'", str2, "!\254!");
    }

    @Test
    public void test14374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14374");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\226!U\226LLU\226LL\226!U\226LLU\226LL\226!U\226LLU\226LL\226!U\226LLU\226LL\226!U\226LLU\226LL\226!U\226LLU\226LL\226!U\226LLU\226LL\226!U\226LLU\226LL!", "\253\254\256\256\u035c\u035c\u035c\u035c\u035c\u035c\u035c\u035c\u035c\u035c\u035c\u035c\253\254\256\256\u035c\u035c\u035c\u035c\u035c\u035c!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\226!null\226nullnullnull\226nullnull\226!null\226nullnullnull\226nullnull\226!null\226nullnullnull\226nullnull\226!null\226nullnullnull\226nullnull\226!null\226nullnullnull\226nullnull\226!null\226nullnullnull\226nullnull\226!null\226nullnullnull\226nullnull\226!null\226nullnullnull\226nullnull!" + "'", str2, "\226!null\226nullnullnull\226nullnull\226!null\226nullnullnull\226nullnull\226!null\226nullnullnull\226nullnull\226!null\226nullnullnull\226nullnull\226!null\226nullnullnull\226nullnull\226!null\226nullnullnull\226nullnull\226!null\226nullnullnull\226nullnull\226!null\226nullnullnull\226nullnull!");
    }

    @Test
    public void test14375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14375");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("nullnull!!!!nullnull!", "\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226!!\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14376");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225!", "LLLLLLLLLLLLLLLLLLLLLLLL\204\204LLLLLLLL\204\204LLLLLLLL\204\204LLLLLLLL\204\204LLLLLLLLLLLLLLLLLLLLLLLL\204\204LLLLLLLL\204\204!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225!" + "'", str2, "^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225!");
    }

    @Test
    public void test14377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14377");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368!" + "'", str2, "\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368!");
    }

    @Test
    public void test14378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14378");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("FHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHH!", "\275ZZZ\275ZZZ\275ZZZ\275ZZZ\275ZZZ\275ZZZ\275ZZZ\275ZZZ!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14379");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!\260!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}~\200\200}~\200\200]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}~\200\200}~\200\200]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}~\200\200}~\200\200\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\260!" + "'", str2, "!\260!");
    }

    @Test
    public void test14380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14380");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("", "\u0366\u0365\u0368\u0368UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!\200\200\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14381");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!LLLLLLLLLLLLLLLL!", "\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118!" + "'", str2, "\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118\u0118!");
    }

    @Test
    public void test14382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14382");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0346\u0348\u0348\u0348\u0348\u0346\u0346!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test14383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14383");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!!!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!!!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!!!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!!!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!", "]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!!!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!!!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!!!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!!!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!" + "'", str2, "!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!!!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!!!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!!!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!!!~\200\276\276\276\276~~\200\276\276\276\276~~!~\200\276\276\276\276~~\200\276\276\276\276~~!");
    }

    @Test
    public void test14384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14384");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("", "NULLNULLNULLNULLNULLNULLNULLNULL!!NULLNULLNULLNULLNULLNULLNULLNULL!!NULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL!!NULLNULLNULLNULLNULLNULLNULLNULL!!NULLNULLNULLNULLNULLNULLNULLNULL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14385");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0346\u0348\u0348\u0348\u0348\u0346\u0346!", "\253\253\253\253\253\253\253\253!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test14386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14386");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "N!!!N!!!NNN!!!N!!!NNN!!!N!!!NNN!!!N!!!NNN!!!N!!!NNN!!!N!!!NNN!!!N!!!NNN!!!N!!!NN!" + "'", str2, "N!!!N!!!NNN!!!N!!!NNN!!!N!!!NNN!!!N!!!NNN!!!N!!!NNN!!!N!!!NNN!!!N!!!NNN!!!N!!!NN!");
    }

    @Test
    public void test14387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14387");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("", "\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346ll!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14388");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!!", "!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!!" + "'", str2, "^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!!");
    }

    @Test
    public void test14389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14389");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("bnullnullnullbnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnull!", "\u0366\u0365\u0368\u0368\215\215!!\215\215!!\215\215!!\215\215!!\213\213\213\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14390");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380!", "\253\254\256\256\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108!!!\253\254\256\256\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380!" + "'", str2, "\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380\u0108\u037e\u0380\u0380!");
    }

    @Test
    public void test14391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14391");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!~nullnull!~nullnull\220\220!~nullnull!~nullnull\220\220\220!~nullnull\220\220\220!~nullnull\220\220\220!~nullnull\220\220\220!~nullnull\220\220!~nullnull!~nullnull\220\220!~nullnull!~nullnull\220\220!", "!!\240\240!!\240\240!!\240\240!!\240\240!!\240\240!!\240\240!!\240\240!!\240\240!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull\220\220!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull\220\220\220!~nullnullnullnullnullnullnullnull\220\220\220!~nullnullnullnullnullnullnullnull\220\220\220!~nullnullnullnullnullnullnullnull\220\220\220!~nullnullnullnullnullnullnullnull\220\220!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull\220\220!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull\220\220!" + "'", str2, "!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull\220\220!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull\220\220\220!~nullnullnullnullnullnullnullnull\220\220\220!~nullnullnullnullnullnullnullnull\220\220\220!~nullnullnullnullnullnullnullnull\220\220\220!~nullnullnullnullnullnullnullnull\220\220!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull\220\220!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull\220\220!");
    }

    @Test
    public void test14392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14392");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!!~!!!!!!~!!!!!!!!~!!!!!!~!!!!!!!!~!!!!!!~!!!!!!~!!!!!!~!!!!!!!!~!!!!!!~!!!!!!!!~!!!!!!~!!!!!", "\u0198\u0199\u019b\u019b\u0198\u0199\u019b\u019b\u0198\u0199\u019b\u019b\u0198\u0199\u019b\u019b!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!~!!!!!!~!!!!!!!!~!!!!!!~!!!!!!!!~!!!!!!~!!!!!!~!!!!!!~!!!!!!!!~!!!!!!~!!!!!!!!~!!!!!!~!!!!!" + "'", str2, "!!~!!!!!!~!!!!!!!!~!!!!!!~!!!!!!!!~!!!!!!~!!!!!!~!!!!!!~!!!!!!!!~!!!!!!~!!!!!!!!~!!!!!!~!!!!!");
    }

    @Test
    public void test14393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14393");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("]!!!!!]]!!]]!!]]!!]]]!!!!!]]!!]]!", "!LLNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]!!!!!]]!!]]!!]]!!]]]!!!!!]]!!]]!" + "'", str2, "]!!!!!]]!!]]!!]]!!]]]!!!!!]]!!]]!");
    }

    @Test
    public void test14394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14394");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("", "}~\200\200}~\200\200\u0348\u0348\u0348\u0348}~\200\200}~\200\200\u0348\u0348\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14395");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("giiigiiiiigiiigiiiiigiiigiiiiigiiigiiiiigiiigiiiiigiiigiiiiigiiigiiiiigiiigiiiii!", "\316\316\316\316\236\276\276\316\316\316\316\236\276\276!!\316\316\316\316\236\276\276\316\316\316\316\236\276\276!!\316\316\316\316\236\276\276\316\316\316\316\236\276\276\316\316\316\316\236\276\276\316\316\316\316\236\276\276!!\316\316\316\316\236\276\276\316\316\316\316\236\276\276!!\316\316\316\316\236\276\276\316\316\316\316\236\276\276!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14396");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("~~!!null~~~null~~~null~~~~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!null~~~null~~~null~~~~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!!", "\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0\u01a0nullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u01b5\u01b6\u01b8\u01b8\u01b5\u01b6\u01b8\u01b8\u01b5\u01b6\u01b8\u01b8\u01b5\u01b6\u01b8\u01b8\u01b5\u01b6\u01b8\u01b8\u01b5\u01b6\u01b8\u01b8~~~~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!!" + "'", str2, "\u01b5\u01b6\u01b8\u01b8\u01b5\u01b6\u01b8\u01b8\u01b5\u01b6\u01b8\u01b8\u01b5\u01b6\u01b8\u01b8\u01b5\u01b6\u01b8\u01b8\u01b5\u01b6\u01b8\u01b8~~~~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!!");
    }

    @Test
    public void test14397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14397");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348!!\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348!!\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348!!\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348!!\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348!", "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348!!\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348!!\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348!!\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348!!\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348!" + "'", str2, "\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348!!\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348!!\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348!!\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348!!\200\u0366\u0365\u0368\u0368\u0348\u0348\200\u0366\u0365\u0368\u0368\u0348\u0348!");
    }

    @Test
    public void test14398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14398");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("`!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN`!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!", "!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!!NnullNNNnullNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL`!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!" + "'", str2, "`!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL`!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!");
    }

    @Test
    public void test14399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14399");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\335\336\340\340\335\336\340\340nullnull\335\336\340\340\335\336\340\340nullnull!!\335\336\340\340\335\336\340\340nullnull\335\336\340\340\335\336\340\340nullnull!!\335\336\340\340\335\336\340\340nullnull\335\336\340\340\335\336\340\340nullnull\335\336\340\340\335\336\340\340nullnull\335\336\340\340\335\336\340\340nullnull!!\335\336\340\340\335\336\340\340nullnull\335\336\340\340\335\336\340\340nullnull!!\335\336\340\340\335\336\340\340nullnull\335\336\340\340\335\336\340\340nullnull!", "\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull\275\200nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NULLNULLLNUULNUUNULLNULLLNUULNUU!!NULLNULLLNUULNUUNULLNULLLNUULNUU!!NULLNULLLNUULNUUNULLNULLLNUULNUUNULLNULLLNUULNUUNULLNULLLNUULNUU!!NULLNULLLNUULNUUNULLNULLLNUULNUU!!NULLNULLLNUULNUUNULLNULLLNUULNUU!" + "'", str2, "NULLNULLLNUULNUUNULLNULLLNUULNUU!!NULLNULLLNUULNUUNULLNULLLNUULNUU!!NULLNULLLNUULNUUNULLNULLLNUULNUUNULLNULLLNUULNUUNULLNULLLNUULNUU!!NULLNULLLNUULNUUNULLNULLLNUULNUU!!NULLNULLLNUULNUUNULLNULLLNUULNUU!");
    }

    @Test
    public void test14400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14400");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("LLLLLLLLNNLLNNLLLLLLLLLLNNLLNNLLLLLLLLLLNNLLNNLLLLLLLLLLNNLLNNLLLLLLLLLLNNLLNNLLLLLLLLLLNNLLNNLLLLLLLLLLNNLLNNLLLLLLLLLLNNLLNNLL!", "\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU!!\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU!!\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU!!\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU!!\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200\200\200\200\200\200\200\200~~\200\200~~\200\200\200\200\200\200\200\200\200\200~~\200\200~~\200\200\200\200\200\200\200\200\200\200~~\200\200~~\200\200\200\200\200\200\200\200\200\200~~\200\200~~\200\200\200\200\200\200\200\200\200\200~~\200\200~~\200\200\200\200\200\200\200\200\200\200~~\200\200~~\200\200\200\200\200\200\200\200\200\200~~\200\200~~\200\200\200\200\200\200\200\200\200\200~~\200\200~~\200\200!" + "'", str2, "\200\200\200\200\200\200\200\200~~\200\200~~\200\200\200\200\200\200\200\200\200\200~~\200\200~~\200\200\200\200\200\200\200\200\200\200~~\200\200~~\200\200\200\200\200\200\200\200\200\200~~\200\200~~\200\200\200\200\200\200\200\200\200\200~~\200\200~~\200\200\200\200\200\200\200\200\200\200~~\200\200~~\200\200\200\200\200\200\200\200\200\200~~\200\200~~\200\200\200\200\200\200\200\200\200\200~~\200\200~~\200\200!");
    }

    @Test
    public void test14401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14401");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198!!!!", "!!~nullnull!!!!~nullnull!!!!!!~nullnull!!!!~nullnull!!!!!!~nullnull!!!!~nullnull!!!!~nullnull!!!!~nullnull!!!!!!~nullnull!!!!~nullnull!!!!!!~nullnull!!!!~nullnull!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!" + "'", str2, "null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!");
    }

    @Test
    public void test14402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14402");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\253\254\256\256!nullnullnull!nullnullnull!nullnullnull!nullnullnull\253\254\256\256!nullnullnull!nullnullnull!", "\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225!!!!\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\254\256\256!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull\253\254\256\256!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "\253\254\256\256!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull\253\254\256\256!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14403");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\275XXXXXXXXXXX!!!!\275XXXXXXXXXXX!!!!!!\275XXXXXXXXXXX!!!!\275XXXXXXXXXXX!!!!!!\275XXXXXXXXXXX!!!!\275XXXXXXXXXXX!!!!!!\275XXXXXXXXXXX!!!!\275XXXXXXXXXXX!!!!!!\275XXXXXXXXXXX!!!!\275XXXXXXXXXXX!!!!!!\275XXXXXXXXXXX!!!!\275XXXXXXXXXXX!!!!!!\275XXXXXXXXXXX!!!!\275XXXXXXXXXXX!!!!!!\275XXXXXXXXXXX!!!!\275XXXXXXXXXXX!!!!!!!", "\200\200\u01d0\u01d0\200\200\u01d0\u01d0!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!!" + "'", str2, "\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!\275nullnullnullnullnullnullnullnullnullnullnull!!!!!!!");
    }

    @Test
    public void test14404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14404");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\215}\215\215\215}\215\215]]]]]]]]]]]]]]]]\215}\215\215\215}\215\215!", "!!!!!!!!!!!!!!!!!!!!!!\256\254\254!!!!!!!!!!!!!!!!!!!!!!\256\254\254!!!!!!!!!!!!!!!!!!!!!!!!\256\254\254!!!!!!!!!!!!!!!!!!!!!!\256\254\254!!!!!!!!!!!!!!!!!!!!!!!!\256\254\254!!!!!!!!!!!!!!!!!!!!!!\256\254\254!!!!!!!!!!!!!!!!!!!!!!!!\256\254\254!!!!!!!!!!!!!!!!!!!!!!\256\254\254!!!!!!!!!!!!!!!!!!!!!!!!\256\254\254!!!!!!!!!!!!!!!!!!!!!!\256\254\254!!!!!!!!!!!!!!!!!!!!!!!!\256\254\254!!!!!!!!!!!!!!!!!!!!!!\256\254\254!!!!!!!!!!!!!!!!!!!!!!!!\256\254\254!!!!!!!!!!!!!!!!!!!!!!\256\254\254!!!!!!!!!!!!!!!!!!!!!!!!\256\254\254!!!!!!!!!!!!!!!!!!!!!!\256\254\254!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\215}\215\215\215}\215\215]]]]]]]]]]]]]]]]\215}\215\215\215}\215\215!" + "'", str2, "\215}\215\215\215}\215\215]]]]]]]]]]]]]]]]\215}\215\215\215}\215\215!");
    }

    @Test
    public void test14405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14405");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("", "mnppmnppmnppmnppmnppmnppmnppmnpp!!mnppmnppmnppmnppmnppmnppmnppmnpp!!!!mnppmnppmnppmnppmnppmnppmnppmnpp!!mnppmnppmnppmnppmnppmnppmnppmnpp!!!!mnppmnppmnppmnppmnppmnppmnppmnpp!!mnppmnppmnppmnppmnppmnppmnppmnpp!!!!mnppmnppmnppmnppmnppmnppmnppmnpp!!mnppmnppmnppmnppmnppmnppmnppmnpp!!!!mnppmnppmnppmnppmnppmnppmnppmnpp!!mnppmnppmnppmnppmnppmnppmnppmnpp!!!!mnppmnppmnppmnppmnppmnppmnppmnpp!!mnppmnppmnppmnppmnppmnppmnppmnpp!!!!mnppmnppmnppmnppmnppmnppmnppmnpp!!mnppmnppmnppmnppmnppmnppmnppmnpp!!!!mnppmnppmnppmnppmnppmnppmnppmnpp!!mnppmnppmnppmnppmnppmnppmnppmnpp!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14406");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u011e\u011e!", "\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa\u03aa!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!nullnull!" + "'", str2, "!!!nullnull!");
    }

    @Test
    public void test14407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14407");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14408");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!O!!!O!!nullorrnullorrnullorrnullorrnullorrnullorrnullorrnullorr!O!!!O!!nullorrnullorrnullorrnullorrnullorrnullorrnullorrnullorr!O!!!O!!nullorrnullorrnullorrnullorrnullorrnullorrnullorrnullorr!O!!!O!!nullorrnullorrnullorrnullorrnullorrnullorrnullorrnullorr!O!!!O!!nullorrnullorrnullorrnullorrnullorrnullorrnullorrnullorr!O!!!O!!nullorrnullorrnullorrnullorrnullorrnullorrnullorrnullorr!O!!!O!!nullorrnullorrnullorrnullorrnullorrnullorrnullorrnullorr!O!!!O!!nullorrnullorrnullorrnullorrnullorrnullorrnullorrnullorr!", "fehhfehh!!fehhfehh!!fehhfehh!!fehhfehh!!fehhfehh!!fehhfehh!!fehhfehh!!fehhfehh!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!F!!!F!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!!F!!!F!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!!F!!!F!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!!F!!!F!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!!F!!!F!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!!F!!!F!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!!F!!!F!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!!F!!!F!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!!" + "'", str2, "!F!!!F!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!!F!!!F!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!!F!!!F!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!!F!!!F!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!!F!!!F!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!!F!!!F!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!!F!!!F!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!!F!!!F!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!EHHHH!!!");
    }

    @Test
    public void test14409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14409");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "LL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\300nullnullnull\300nullnullnull\300nullnullnull\300nullnullnull\300nullnullnull\300nullnullnull\300nullnullnull\300\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\300nullnullnull\300nullnullnull\300nullnullnull\300nullnullnull\300nullnullnull\300nullnullnull\300nullnullnull\300\u0346\u0348\u0348!");
    }

    @Test
    public void test14410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14410");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("", "}~\200\200}~\200\200\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!}~\200\200}~\200\200\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!\276\300!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14411");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decodeu0346\u0348\u0348\u0348\342\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14412");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("NULLLLLNULLLLLNULLLLLNULLLLLNULLLLLNULLLLLNULLLLLNULLLLL!", "LLUU\275\275\275LLUU\275\275\275!!LLUU\275\275\275LLUU\275\275\275!!LLUU\275\275\275LLUU\275\275\275LLUU\275\275\275LLUU\275\275\275!!LLUU\275\275\275LLUU\275\275\275!!LLUU\275\275\275LLUU\275\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null\231\227\227\227\227\227null\231\227\227\227\227\227null\231\227\227\227\227\227null\231\227\227\227\227\227null\231\227\227\227\227\227null\231\227\227\227\227\227null\231\227\227\227\227\227null\231\227\227\227\227\227!" + "'", str2, "null\231\227\227\227\227\227null\231\227\227\227\227\227null\231\227\227\227\227\227null\231\227\227\227\227\227null\231\227\227\227\227\227null\231\227\227\227\227\227null\231\227\227\227\227\227null\231\227\227\227\227\227!");
    }

    @Test
    public void test14413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14413");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!!\300\300!!\300\300!!\300\300!!\300\300!!\300\300!!\300\300!!\300\300!!\300\300!", "\u0366\u0365\u0368\u0368\u0220\u021d\u021d\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!" + "'", str2, "!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!");
    }

    @Test
    public void test14414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14414");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200]]]]!", "LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200]]]]!" + "'", str2, "\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200\u0348\u0348~~\200\200\200]]]]!");
    }

    @Test
    public void test14415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14415");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!", "\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368nullnullnullnull!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u02cc\u02cc\u02cc\u02cc\u02cc\u02cc\u02cc\u02cc!!!" + "'", str2, "\u02cc\u02cc\u02cc\u02cc\u02cc\u02cc\u02cc\u02cc!!!");
    }

    @Test
    public void test14416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14416");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!NLL!NLL!!!NLL!NLL!!!", "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0102\u0105\u0105\u0102\u0105\u0105\u0102\u0105\u0105\u0102\u0105\u0105!!!" + "'", str2, "\u0102\u0105\u0105\u0102\u0105\u0105\u0102\u0105\u0105\u0102\u0105\u0105!!!");
    }

    @Test
    public void test14417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14417");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0346\u0348\u0348\u0348\u0348\u0346\u0346!", "\216!~~\216!~~\216!~~\216!~~\216!~~\216!~~\216!~~\216!~~VSTTVSTTVSTTVSTTVSTTVSTTVSTTVSTT\216!~~\216!~~\216!~~\216!~~\216!~~\216!~~\216!~~\216!~~VSTTVSTTVSTTVSTTVSTTVSTTVSTTVSTT!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test14418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14418");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("n\273\273\273\273LLNN\270\270\273LLNN\270\270!!!!n\273\273\273\273LLNN\270\270\273LLNN\270\270!!!!!!n\273\273\273\273LLNN\270\270\273LLNN\270\270!!!!n\273\273\273\273LLNN\270\270\273LLNN\270\270!!!!!!n\273\273\273\273LLNN\270\270\273LLNN\270\270!!!!n\273\273\273\273LLNN\270\270\273LLNN\270\270!!!!!!n\273\273\273\273LLNN\270\270\273LLNN\270\270!!!!n\273\273\273\273LLNN\270\270\273LLNN\270\270!!!!!!n\273\273\273\273LLNN\270\270\273LLNN\270\270!!!!n\273\273\273\273LLNN\270\270\273LLNN\270\270!!!!!!n\273\273\273\273LLNN\270\270\273LLNN\270\270!!!!n\273\273\273\273LLNN\270\270\273LLNN\270\270!!!!!!n\273\273\273\273LLNN\270\270\273LLNN\270\270!!!!n\273\273\273\273LLNN\270\270\273LLNN\270\270!!!!!!n\273\273\273\273LLNN\270\270\273LLNN\270\270!!!!n\273\273\273\273LLNN\270\270\273LLNN\270\270!!!!!!!", "!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!null!]!!nullnullnull!]!!nullnull!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!null!]!!nullnullnull!]!!nullnull!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!null!]!!nullnullnull!]!!nullnull!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!null!]!!nullnullnull!]!!nullnull!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!null!]!!nullnullnull!]!!nullnull!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!null!]!!nullnullnull!]!!nullnull!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!null!]!!nullnullnull!]!!nullnull!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!null!]!!nullnullnull!]!!nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "U\273\273\273\273!!]]\270\270\273!!]]\270\270!!!!U\273\273\273\273!!]]\270\270\273!!]]\270\270!!!!!!U\273\273\273\273!!]]\270\270\273!!]]\270\270!!!!U\273\273\273\273!!]]\270\270\273!!]]\270\270!!!!!!U\273\273\273\273!!]]\270\270\273!!]]\270\270!!!!U\273\273\273\273!!]]\270\270\273!!]]\270\270!!!!!!U\273\273\273\273!!]]\270\270\273!!]]\270\270!!!!U\273\273\273\273!!]]\270\270\273!!]]\270\270!!!!!!U\273\273\273\273!!]]\270\270\273!!]]\270\270!!!!U\273\273\273\273!!]]\270\270\273!!]]\270\270!!!!!!U\273\273\273\273!!]]\270\270\273!!]]\270\270!!!!U\273\273\273\273!!]]\270\270\273!!]]\270\270!!!!!!U\273\273\273\273!!]]\270\270\273!!]]\270\270!!!!U\273\273\273\273!!]]\270\270\273!!]]\270\270!!!!!!U\273\273\273\273!!]]\270\270\273!!]]\270\270!!!!U\273\273\273\273!!]]\270\270\273!!]]\270\270!!!!!!!" + "'", str
    }

    @Test
    public void test14419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14419");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!!ll!", "\u016a\u016a\u016a\u016a\u016a\u016aLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!ll!" + "'", str2, "!!!ll!");
    }

    @Test
    public void test14420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14420");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0366\u0365\u0368\u0368null!!!null!!!\200\200\u0346\u0348\u0348!", "NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368N!!!!!!N!!!!!!\200\200\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368N!!!!!!N!!!!!!\200\200\u0346\u0348\u0348!");
    }

    @Test
    public void test14421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14421");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("nullnull\253\254\256\256\253\254\256\256nullnull\253\254\256\256\253\254\256\256nullnull\253\254\256\256\253\254\256\256nullnull\253\254\256\256\253\254\256\256nullnull\253\254\256\256\253\254\256\256nullnull\253\254\256\256\253\254\256\256nullnull\253\254\256\256\253\254\256\256nullnull\253\254\256\256\253\254\256\256!", "nullnullnullnullnullnullnullnullhhnullnullnullnullnullnullnullnullhhnullnullnullnullnullnullnullnullhhnullnullnullnullnullnullnullnullhhnullnullnullnullnullnullnullnullhhnullnullnullnullnullnullnullnullhhnullnullnullnullnullnullnullnullhhnullnullnullnullnullnullnullnullhh!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\253\254\256\256\253\254\256\256\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\253\254\256\256\253\254\256\256\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\253\254\256\256\253\254\256\256\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\253\254\256\256\253\254\256\256\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\253\254\256\256\253\254\256\256\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\253\254\256\256\253\254\256\256\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\253\254\256\256\253\254\256\256\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\253\254\256\256\253\254\256\256!" + "'", str2, "\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\253\254\256\256\253\254\256\256\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\253\254\256\256\253\254\256\256\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\253\254\256\256\253\254\256\256\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\253\254\256\256\253\254\256\256\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\253\254\256\256\253\254\256\256\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\253\254\256\256\253\254\256\256\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\253\254\256\256\253\254\256\256\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\253\254\256\256\253\254\256\256!");
    }

    @Test
    public void test14422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14422");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!]]!!]]L!!!L!!!!!]]!!]]L!!!L!!!!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200nullnull}~\200\200}~\200\200nullnull}~\200\200}~\200\200nullnull}~\200\200}~\200\200\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!]]!!]]\200!!!\200!!!!!]]!!]]\200!!!\200!!!!" + "'", str2, "!!]]!!]]\200!!!\200!!!!!]]!!]]\200!!!\200!!!!");
    }

    @Test
    public void test14423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14423");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\200\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6\u01f6]]!", "}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!");
    }

    @Test
    public void test14424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14424");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\276\276~nullnull\276\276\276\276~nullnull\276\276!!\276\276~nullnull\276\276\276\276~nullnull\276\276!!\276\276~nullnull\276\276\276\276~nullnull\276\276!!\276\276~nullnull\276\276\276\276~nullnull\276\276!!\276\276~nullnull\276\276\276\276~nullnull\276\276!!\276\276~nullnull\276\276\276\276~nullnull\276\276!!\276\276~nullnull\276\276\276\276~nullnull\276\276!!\276\276~nullnull\276\276\276\276~nullnull\276\276!!!", "\340nullnullnullnullnull\300\300nullnull\300\300!!!!\340nullnullnullnullnull\300\300nullnull\300\300!!!!!!\340nullnullnullnullnull\300\300nullnull\300\300!!!!\340nullnullnullnullnull\300\300nullnull\300\300!!!!!!\340nullnullnullnullnull\300\300nullnull\300\300!!!!\340nullnullnullnullnull\300\300nullnull\300\300!!!!!!\340nullnullnullnullnull\300\300nullnull\300\300!!!!\340nullnullnullnullnull\300\300nullnull\300\300!!!!!!\340nullnullnullnullnull\300\300nullnull\300\300!!!!\340nullnullnullnullnull\300\300nullnull\300\300!!!!!!\340nullnullnullnullnull\300\300nullnull\300\300!!!!\340nullnullnullnullnull\300\300nullnull\300\300!!!!!!\340nullnullnullnullnull\300\300nullnull\300\300!!!!\340nullnullnullnullnull\300\300nullnull\300\300!!!!!!\340nullnullnullnullnull\300\300nullnull\300\300!!!!\340nullnullnullnullnull\300\300nullnull\300\300!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276\276~LLUULLUU\276\276\276\276~LLUULLUU\276\276!!\276\276~LLUULLUU\276\276\276\276~LLUULLUU\276\276!!\276\276~LLUULLUU\276\276\276\276~LLUULLUU\276\276!!\276\276~LLUULLUU\276\276\276\276~LLUULLUU\276\276!!\276\276~LLUULLUU\276\276\276\276~LLUULLUU\276\276!!\276\276~LLUULLUU\276\276\276\276~LLUULLUU\276\276!!\276\276~LLUULLUU\276\276\276\276~LLUULLUU\276\276!!\276\276~LLUULLUU\276\276\276\276~LLUULLUU\276\276!!!" + "'", str2, "\276\276~LLUULLUU\276\276\276\276~LLUULLUU\276\276!!\276\276~LLUULLUU\276\276\276\276~LLUULLUU\276\276!!\276\276~LLUULLUU\276\276\276\276~LLUULLUU\276\276!!\276\276~LLUULLUU\276\276\276\276~LLUULLUU\276\276!!\276\276~LLUULLUU\276\276\276\276~LLUULLUU\276\276!!\276\276~LLUULLUU\276\276\276\276~LLUULLUU\276\276!!\276\276~LLUULLUU\276\276\276\276~LLUULLUU\276\276!!\276\276~LLUULLUU\276\276\276\276~LLUULLUU\276\276!!!");
    }

    @Test
    public void test14425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14425");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200L\226LLL\226LL\223\223L\226LLL\226LLL\226LLL\226LLL\226LL\223\223L\226LLL\226LLL\226LL}~\200\200}~\200\200L\226LLL\226LL\223\223L\226LLL\226LLL\226LLL\226LLL\226LL\223\223L\226LLL\226LLL\226LL}~\200\200}~\200\200L\226LLL\226LL\223\223L\226LLL\226LLL\226LLL\226LLL\226LL\223\223L\226LLL\226LLL\226LL}~\200\200}~\200\200L\226LLL\226LL\223\223L\226LLL\226LLL\226LLL\226LLL\226LL\223\223L\226LLL\226LLL\226\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL!" + "'", str2, "\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL!");
    }

    @Test
    public void test14426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14426");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("LNLLLNLL!!LNLLLNLL!!LNLLLNLLLNLLLNLL!!LNLLLNLL!!LNLLLNLL!", "\u0260\u0260\u0260\u0260\u0260nullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "rorrrorr!!rorrrorr!!rorrrorrrorrrorr!!rorrrorr!!rorrrorr!" + "'", str2, "rorrrorr!!rorrrorr!!rorrrorrrorrrorr!!rorrrorr!!rorrrorr!");
    }

    @Test
    public void test14427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14427");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e\u010a\u010b\u010e\u010e~~~~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!!", "!~UU!~UU\220\220!~UU!~UU\220\220\220!~UU\220\220\220!~UU\220\220\220!~UU\220\220\220!~UU\220\220!~UU!~UU\220\220!~UU!~UU\220\220!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~~!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~~~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~~~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~~~~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~~~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~~~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~~~~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!!" + "'", str2, "~~!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~~~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~~~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~~~~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~~~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~~~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~~~~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!!");
    }

    @Test
    public void test14428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14428");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!!", "nullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FFnullnullH~FFH~FF!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!!" + "'", str2, "\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!!");
    }

    @Test
    public void test14429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14429");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("}~!!!\200\200}~!!!\200\200}~!!!\200\200}~!!!\200\200~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~}~!!!\200\200}~!!!\200\200}~!!!\200\200}~!!!\200\200~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~!", "H!!HH!!H!!HH!!!!H!!HH!!H!!HH!!!!H!!HH!!H!!HH!!H!!HH!!H!!HH!!!!H!!HH!!H!!HH!!!!H!!HH!!H!!HH!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~!!!\200\200}~!!!\200\200}~!!!\200\200}~!!!\200\200~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~}~!!!\200\200}~!!!\200\200}~!!!\200\200}~!!!\200\200~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~!" + "'", str2, "}~!!!\200\200}~!!!\200\200}~!!!\200\200}~!!!\200\200~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~}~!!!\200\200}~!!!\200\200}~!!!\200\200}~!!!\200\200~!~~~!~~~!~~~!~~~!~~~!~~~!~~~!~~!");
    }

    @Test
    public void test14430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14430");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("", "\u0366\u0365\u0368\u0368\u020c\u020e\u020e\u020e\u020c\u020e\u020e\u020e\u020c\u020e\u020e\u020e\u020c\u020e\u020e\u020e!!\200\200\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14431");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!", "\276V\275\275\276V\275\275\276V\275\275\276V\275\275\276V\275\275\276V\275\275\276V\275\275\276V\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!!!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!!!" + "'", str2, "!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!!!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!!!");
    }

    @Test
    public void test14432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14432");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("^```^```^```^```^```^```^```^```^```^```\226]]LL\230\230\226]]LL\230\230^```^```\226]]LL\230\230\226]]LL\230\230^```^```^```^```^```^```^```^```^```^```\226]]LL\230\230\226]]LL\230\230^```^```\226]]LL\230\230\226]]LL\230\230^```^```^```^```^```^```^```^```^```^```\226]]LL\230\230\226]]LL\230\230^```^```\226]]LL\230\230\226]]LL\230\230^```^```^```^```^```^```^```^```^```^```\226]]LL\230\230\226]]LL\230\230^```^```\226]]LL\230\230\226]]LL\230\230^```^```^```^```^```^```^```^```^```^```\226]]LL\230\230\226]]LL\230\230^```^```\226]]LL\230\230\226]]LL\230\230^```^```^```^```^```^```^```^```^```^```\226]]LL\230\230\226]]LL\230\230^```^```\226]]LL\230\230\226]]LL\230\230^```^```^```^```^```^```^```^```^```^```\226]]LL\230\230\226]]LL\230\230^```^```\226]]LL\230\230\226]]LL\230\230^```^```^```^```^```^```^```^```^```^```\226]]LL\230\230\226]]LL\230\230^```^```\226]]LL\230\230\226]]LL\230\230!", "!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!\200}}`!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^```^```^```^```^```^```^```^```^```^```\226]]!!\230\230\226]]!!\230\230^```^```\226]]!!\230\230\226]]!!\230\230^```^```^```^```^```^```^```^```^```^```\226]]!!\230\230\226]]!!\230\230^```^```\226]]!!\230\230\226]]!!\230\230^```^```^```^```^```^```^```^```^```^```\226]]!!\230\230\226]]!!\230\230^```^```\226]]!!\230\230\226]]!!\230\230^```^```^```^```^```^```^```^```^```^```\226]]!!\230\230\226]]!!\230\230^```^```\226]]!!\230\230\226]]!!\230\230^```^```^```^```^```^```^```^```^```^```\226]]!!\230\230\226]]!!\230\230^```^```\226]]!!\230\230\226]]!!\230\230^```^```^```^```^```^```^```^```^```^```\226]]!!\230\230\226]]!!\230\230^```^```\226]]!!\230\230\226]]!!\230\230^```^```^```^```^```^```^```^```^```^```\226]]!!\230\230\226]]!!\230\230^```^```\226]]!!\230\230\226]]!!\230\230^```^```^```^```^```^```^```^```^```^```\226]]!!\230\230\226]]!!\230\230^```^```\226]]!!\230\230\226]]!!\230\230!" + "'", str2, "^```^```^```^```^```^```^```^```^```^```\226]]!!\230\230\226]]!!\230\230^```^```\226]]!!\230\230\226]]!!\230\230^```^```^```^```^```^```^```^```^```^```\226]]!!\230\230\226]]!!\230\230^```^```\226]]!!\230\230\226]]!!\230\230^```^```^```^```^```^```^```^```^```^```\226]]!!\230\230\226]]!!\230\230^```^```\226]]!!\230\230\226]]!!\230\230^```^```^```^```^```^```^```^```^```^```\226]]!!\230\230\226]]!!\230\230^```^```\226]]!!\230\230\226]]!!\230\230^```^```^```^```^```^```^```^```^```^```\226]]!!\230\230\226]]!!\230\230^```^```\226]]!!\230\230\226]]!!\230\230^```^```^```^```^```^```^```^```^```^```\226]]!!\230\230\226]]!!\230\230^```^```\226]]!!\230\230\226]]!!\230\230^```^```^```^```^```^```^```^```^```^```\226]]!!\230\230\226]]!!\230\230^```^```\226]]!!\230\230\226]]!!\230\230^```^```^```^```^```^```^```^```^```^```\226]]!!\230\230\226]]!!\230\230^```^```\226]]!!\230\230\226]]!!\230\230!");
    }

    @Test
    public void test14433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14433");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u016a\u016a\u016a\u016a\u016a\u016aLL!", "\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0!" + "'", str2, "\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0!");
    }

    @Test
    public void test14434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14434");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("~}\200\200~}\200\200NNNNNNNN~}\200\200~}\200\200NNNNNNNN~}\200\200~}\200\200NNNNNNNN~}\200\200~}\200\200NNNNNNNN~}\200\200~}\200\200NNNNNNNN~}\200\200~}\200\200NNNNNNNN~}\200\200~}\200\200NNNNNNNN~}\200\200~}\200\200NNNNNNNN!", "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLLLLL!LLLLLLLLLLLLLLL!LLLLLLLLLLLLLLL!LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!LLLLLLLLLLLLLLL!LLLLLLLLLLLLLLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL!" + "'", str2, "~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL!");
    }

    @Test
    public void test14435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14435");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14436");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380}~\200\200}~\200\200\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380}~\200\200}~\200\200\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380}~\200\200}~\200\200\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u037e\u0380\u0380\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!" + "'", str2, "]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!");
    }

    @Test
    public void test14437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14437");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\275\u0108\u0108\u0108\275\u0108\u0108\u0108!", "nullnull}}nullnull}}!!nullnull}}nullnull}}!!nullnull}}nullnull}}!!nullnull}}nullnull}}!!nullnull}}nullnull}}!!nullnull}}nullnull}}!!nullnull}}nullnull}}!!nullnull}}nullnull}}!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275nullnullnull\275nullnullnull!" + "'", str2, "\275nullnullnull\275nullnullnull!");
    }

    @Test
    public void test14438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14438");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u010e\u010c\u0110\u0110\u010e\u010c\u0110\u0110nullnull!", "UALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAA!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AUAAnullnullnullnullAUAAAUAAAUAAnullnullnullnullAUAAAUAA!" + "'", str2, "AUAAnullnullnullnullAUAAAUAAAUAAnullnullnullnullAUAAAUAA!");
    }

    @Test
    public void test14439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14439");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!", "nullnull}}nullnull}}!!nullnull}}nullnull}}!!nullnull}}nullnull}}!!nullnull}}nullnull}}!!nullnull}}nullnull}}!!nullnull}}nullnull}}!!nullnull}}nullnull}}!!nullnull}}nullnull}}!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!" + "'", str2, "!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!!\275\275!!\275\275!]!!!]!!!");
    }

    @Test
    public void test14440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14440");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0368\u0368~~!", "\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140\u0140!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0368\u0368~~!" + "'", str2, "\u0368\u0368~~!");
    }

    @Test
    public void test14441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14441");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("", "null!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnullnull!nullnullnull!nullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14442");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLL!!!LLLL!!!LLLL!!!LLLL!!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLL!!!LLLL!!!!", "nullnullnullnullnullnullnullnull\253\254\256\256\253\254\256\256nullnullnullnullnullnullnullnull\253\254\256\256\253\254\256\256nullnullnullnullnullnullnullnull\253\254\256\256\253\254\256\256nullnullnullnullnullnullnullnull\253\254\256\256\253\254\256\256nullnullnullnullnullnullnullnull\253\254\256\256\253\254\256\256nullnullnullnullnullnullnullnull\253\254\256\256\253\254\256\256nullnullnullnullnullnullnullnull\253\254\256\256\253\254\256\256nullnullnullnullnullnullnullnull\253\254\256\256\253\254\256\256!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178!!!!" + "'", str2, "\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178\u0178!!!!");
    }

    @Test
    public void test14443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14443");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!!", "\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ\275JJJ!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14444");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("LUUUUnullLLUnullLL!!!!LUUUUnullLLUnullLL!!!!!!LUUUUnullLLUnullLL!!!!LUUUUnullLLUnullLL!!!!!!LUUUUnullLLUnullLL!!!!LUUUUnullLLUnullLL!!!!!!LUUUUnullLLUnullLL!!!!LUUUUnullLLUnullLL!!!!!!LUUUUnullLLUnullLL!!!!LUUUUnullLLUnullLL!!!!!!LUUUUnullLLUnullLL!!!!LUUUUnullLLUnullLL!!!!!!LUUUUnullLLUnullLL!!!!LUUUUnullLLUnullLL!!!!!!LUUUUnullLLUnullLL!!!!LUUUUnullLLUnullLL!!!!!!!", "nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "N\200\200\200\200LNUUNN\200LNUUNN!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!!!!" + "'", str2, "N\200\200\200\200LNUUNN\200LNUUNN!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!N\200\200\200\200LNUUNN\200LNUUNN!!!!!!!");
    }

    @Test
    public void test14445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14445");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!~LUNNLUNN!!!!~LUNNLUNN!!!!!!~LUNNLUNN!!!!~LUNNLUNN!!!!!!~LUNNLUNN!!!!~LUNNLUNN!!!!~LUNNLUNN!!!!~LUNNLUNN!!!!!!~LUNNLUNN!!!!~LUNNLUNN!!!!!!~LUNNLUNN!!!!~LUNNLUNN!!!", "N````null```null``!!!!N````null```null``!!!!!!N````null```null``!!!!N````null```null``!!!!!!N````null```null``!!!!N````null```null``!!!!!!N````null```null``!!!!N````null```null``!!!!!!N````null```null``!!!!N````null```null``!!!!!!N````null```null``!!!!N````null```null``!!!!!!N````null```null``!!!!N````null```null``!!!!!!N````null```null``!!!!N````null```null``!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!~`!UU`!UU!!!!~`!UU`!UU!!!!!!~`!UU`!UU!!!!~`!UU`!UU!!!!!!~`!UU`!UU!!!!~`!UU`!UU!!!!~`!UU`!UU!!!!~`!UU`!UU!!!!!!~`!UU`!UU!!!!~`!UU`!UU!!!!!!~`!UU`!UU!!!!~`!UU`!UU!!!" + "'", str2, "!!~`!UU`!UU!!!!~`!UU`!UU!!!!!!~`!UU`!UU!!!!~`!UU`!UU!!!!!!~`!UU`!UU!!!!~`!UU`!UU!!!!~`!UU`!UU!!!!~`!UU`!UU!!!!!!~`!UU`!UU!!!!~`!UU`!UU!!!!!!~`!UU`!UU!!!!~`!UU`!UU!!!");
    }

    @Test
    public void test14446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14446");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("~LLL~LLL~LLLUU~LLL~LLLUU~LLL~LLLUU\200}}~LLL~LLL~LLLUU~LLL~LLLUU~LLL~LLLUU\200}}~LLL~LLL~LLLUU~LLL~LLLUU~LLL~LLLUU\200}}~LLL~LLL~LLLUU~LLL~LLLUU~LLL~LLLUU\200}}~LLL~LLL~LLLUU~LLL~LLLUU~LLL~LLLUU\200}}~LLL~LLL~LLLUU~LLL~LLLUU~LLL~LLLUU\200}}~LLL~LLL~LLLUU~LLL~LLLUU~LLL~LLLUU\200}}~LLL~LLL~LLLUU~LLL~LLLUU~LLL~LLLUU\200}}!", "\200\250nullnull\200~~\200\250nullnull\200~~\200\250nullnull\200\250nullnull\200\250nullnull\200~~\200\250nullnull\200~~\200\250nullnull\200\250nullnull!!\200\250nullnull\200~~\200\250nullnull\200~~\200\250nullnull\200\250nullnull\200\250nullnull\200~~\200\250nullnull\200~~\200\250nullnull\200\250nullnull!!\200\250nullnull\200~~\200\250nullnull\200~~\200\250nullnull\200\250nullnull\200\250nullnull\200~~\200\250nullnull\200~~\200\250nullnull\200\250nullnull\200\250nullnull\200~~\200\250nullnull\200~~\200\250nullnull\200\250nullnull\200\250nullnull\200~~\200\250nullnull\200~~\200\250nullnull\200\250nullnull!!\200\250nullnull\200~~\200\250nullnull\200~~\200\250nullnull\200\250nullnull\200\250nullnull\200~~\200\250nullnull\200~~\200\250nullnull\200\250nullnull!!\200\250nullnull\200~~\200\250nullnull\200~~\200\250nullnull\200\250nullnull\200\250nullnull\200~~\200\250nullnull\200~~\200\250nullnull\200\250nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~~~~~~~~~~~~UU~~~~~~~~UU~~~~~~~~UU\200}}~~~~~~~~~~~~UU~~~~~~~~UU~~~~~~~~UU\200}}~~~~~~~~~~~~UU~~~~~~~~UU~~~~~~~~UU\200}}~~~~~~~~~~~~UU~~~~~~~~UU~~~~~~~~UU\200}}~~~~~~~~~~~~UU~~~~~~~~UU~~~~~~~~UU\200}}~~~~~~~~~~~~UU~~~~~~~~UU~~~~~~~~UU\200}}~~~~~~~~~~~~UU~~~~~~~~UU~~~~~~~~UU\200}}~~~~~~~~~~~~UU~~~~~~~~UU~~~~~~~~UU\200}}!" + "'", str2, "~~~~~~~~~~~~UU~~~~~~~~UU~~~~~~~~UU\200}}~~~~~~~~~~~~UU~~~~~~~~UU~~~~~~~~UU\200}}~~~~~~~~~~~~UU~~~~~~~~UU~~~~~~~~UU\200}}~~~~~~~~~~~~UU~~~~~~~~UU~~~~~~~~UU\200}}~~~~~~~~~~~~UU~~~~~~~~UU~~~~~~~~UU\200}}~~~~~~~~~~~~UU~~~~~~~~UU~~~~~~~~UU\200}}~~~~~~~~~~~~UU~~~~~~~~UU~~~~~~~~UU\200}}~~~~~~~~~~~~UU~~~~~~~~UU~~~~~~~~UU\200}}!");
    }

    @Test
    public void test14447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14447");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!!!!\236\276\276!!!!\236\276\276!!!!!!\236\276\276!!!!\236\276\276!!!!!!\236\276\276!!!!\236\276\276!!!!\236\276\276!!!!\236\276\276!!!!!!\236\276\276!!!!\236\276\276!!!!!!\236\276\276!!!!\236\276\276!", "}~\200\200}~\200\200FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF}~\200\200}~\200\200FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!\236\276\276!!!!\236\276\276!!!!!!\236\276\276!!!!\236\276\276!!!!!!\236\276\276!!!!\236\276\276!!!!\236\276\276!!!!\236\276\276!!!!!!\236\276\276!!!!\236\276\276!!!!!!\236\276\276!!!!\236\276\276!" + "'", str2, "!!!!\236\276\276!!!!\236\276\276!!!!!!\236\276\276!!!!\236\276\276!!!!!!\236\276\276!!!!\236\276\276!!!!\236\276\276!!!!\236\276\276!!!!!!\236\276\276!!!!\236\276\276!!!!!!\236\276\276!!!!\236\276\276!");
    }

    @Test
    public void test14448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14448");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", "u\200uuuuuu\200uuuuuu\200uuuuuu\200uuuuuu\200uuuuuu\200uuuuuu\200uuuuuu\200uuuuu!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" + "'", str2, "~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~}\200\200~}\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    @Test
    public void test14449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14449");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0346\u0348\u0348\u0348}~\200\200}~\200\200nullqnullnullnullqnullnull}~\200\200}~\200\200nullqnullnullnullqnullnull}~\200\200}~\200\200nullqnullnullnullqnullnull}~\200\200}~\200\200\u0348\u0346\u0346!", "NULLNULLNULLNULLNULLNULLNULLNULL!L!!!L!!NULLNULLNULLNULLNULLNULLNULLNULL!L!!!L!!NULLNULLNULLNULLNULLNULLNULLNULL!L!!!L!!NULLNULLNULLNULLNULLNULLNULLNULL!L!!!L!!NULLNULLNULLNULLNULLNULLNULLNULL!L!!!L!!NULLNULLNULLNULLNULLNULLNULLNULL!L!!!L!!NULLNULLNULLNULLNULLNULLNULLNULL!L!!!L!!NULLNULLNULLNULLNULLNULLNULLNULL!L!!!L!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348}~\200\200}~\200\200UNLLNUNLLUNLLUNLLNUNLLUNLL}~\200\200}~\200\200UNLLNUNLLUNLLUNLLNUNLLUNLL}~\200\200}~\200\200UNLLNUNLLUNLLUNLLNUNLLUNLL}~\200\200}~\200\200\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348}~\200\200}~\200\200UNLLNUNLLUNLLUNLLNUNLLUNLL}~\200\200}~\200\200UNLLNUNLLUNLLUNLLNUNLLUNLL}~\200\200}~\200\200UNLLNUNLLUNLLUNLLNUNLLUNLL}~\200\200}~\200\200\u0348\u0346\u0346!");
    }

    @Test
    public void test14450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14450");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u02eb\u02ec\u02ee\u02ee\u02cc\u02cb\u02ce\u02ce!", "^```^```^```^```^```^```^```^```^```^```\200\200\200\200\200\200\200\200^```^```\200\200\200\200\200\200\200\200^```^```^```^```^```^```^```^```^```^```\200\200\200\200\200\200\200\200^```^```\200\200\200\200\200\200\200\200^```^```^```^```^```^```^```^```^```^```\200\200\200\200\200\200\200\200^```^```\200\200\200\200\200\200\200\200^```^```^```^```^```^```^```^```^```^```\200\200\200\200\200\200\200\200^```^```\200\200\200\200\200\200\200\200^```^```^```^```^```^```^```^```^```^```\200\200\200\200\200\200\200\200^```^```\200\200\200\200\200\200\200\200^```^```^```^```^```^```^```^```^```^```\200\200\200\200\200\200\200\200^```^```\200\200\200\200\200\200\200\200^```^```^```^```^```^```^```^```^```^```\200\200\200\200\200\200\200\200^```^```\200\200\200\200\200\200\200\200^```^```^```^```^```^```^```^```^```^```\200\200\200\200\200\200\200\200^```^```\200\200\200\200\200\200\200\200!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u02ebnullnullnullnullnullnullnull!" + "'", str2, "\u02ebnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14451");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u014e\u014c\u014e\u014e\u014e\u014c\u014e\u014e\u014e\u014c\u014e\u014e\u014e\u014c\u014e\u014e\u014e\u014c\u014e\u014e\u014e\u014c\u014e\u014e\u014e\u014c\u014e\u014e\u014e\u014c\u014e\u014e\u014e\u014c\u014e\u014e\u014e\u014c\u014e\u014e\u014e\u014c\u014e\u014e\u014e\u014c\u014e\u014e!", "\275!~!!!~!!!~!!\276!~!!\275\275!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14452");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!\200}}`!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!]]!", "\275\u0109\u010a\u010c\u010c\u0109\u010a\u010c\u010c\u0109\u010a\u010c\u010c\275\u0109\u010a\u010c\u010c\u0109\u010a\u010c\u010c\u0109\u010a\u010c\u010c!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c!!\200\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c!!]]!" + "'", str2, "\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c!!\200\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c\u010c!!]]!");
    }

    @Test
    public void test14453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14453");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encodeu0346\u0348\u0348\u0348\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14454");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("XXXX\200}}`XXXX]]!", "P\220NN\200~~P\220NN\200~~P\220NNP\220NNP\220NN\200~~P\220NN\200~~P\220NNP\220NN!!P\220NN\200~~P\220NN\200~~P\220NNP\220NNP\220NN\200~~P\220NN\200~~P\220NNP\220NN!!P\220NN\200~~P\220NN\200~~P\220NNP\220NNP\220NN\200~~P\220NN\200~~P\220NNP\220NNP\220NN\200~~P\220NN\200~~P\220NNP\220NNP\220NN\200~~P\220NN\200~~P\220NNP\220NN!!P\220NN\200~~P\220NN\200~~P\220NNP\220NNP\220NN\200~~P\220NN\200~~P\220NNP\220NN!!P\220NN\200~~P\220NN\200~~P\220NNP\220NNP\220NN\200~~P\220NN\200~~P\220NNP\220NN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\220\220\220\220\200}}`\220\220\220\220]]!" + "'", str2, "\220\220\220\220\200}}`\220\220\220\220]]!");
    }

    @Test
    public void test14455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14455");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("LLNNLLNNNNLLNNLLNNNN!", "EHHHEHHHEHHHEHHHEHHHEHHHEHHHEHHH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HHHHHHHHHHHHHHHHHHHH!" + "'", str2, "HHHHHHHHHHHHHHHHHHHH!");
    }

    @Test
    public void test14456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14456");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!!", "\u0164!!\216\254\254\u0164!!\216\254\254\u0164\u0164\u0164\u0164\u0164\u0164\u0164\u0164\u0164!!\216\254\254\u0164!!\216\254\254\u0164\u0164\u0164\u0164\u0164\u0164\u0164\u0164\u0164!!\216\254\254\u0164!!\216\254\254\u0164\u0164\u0164\u0164\u0164\u0164\u0164\u0164\u0164!!\216\254\254\u0164!!\216\254\254\u0164\u0164\u0164\u0164\u0164\u0164\u0164\u0164\u0164!!\216\254\254\u0164!!\216\254\254\u0164\u0164\u0164\u0164\u0164\u0164\u0164\u0164\u0164!!\216\254\254\u0164!!\216\254\254\u0164\u0164\u0164\u0164\u0164\u0164\u0164\u0164\u0164!!\216\254\254\u0164!!\216\254\254\u0164\u0164\u0164\u0164\u0164\u0164\u0164\u0164\u0164!!\216\254\254\u0164!!\216\254\254\u0164\u0164\u0164\u0164\u0164\u0164\u0164\u0164!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!!" + "'", str2, "\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253\256~\253\253!!!");
    }

    @Test
    public void test14457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14457");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("F!HHF!HHF!HHF!HHF!HHF!HHF!HHF!HH!", "\253\254\256\256``^^``^^``^^``^^\253\254\256\256``^^``^^!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`!^^`!^^`!^^`!^^`!^^`!^^`!^^`!^^!" + "'", str2, "`!^^`!^^`!^^`!^^`!^^`!^^`!^^`!^^!");
    }

    @Test
    public void test14458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14458");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe!!\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe!!\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe!!\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe!!\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe!!\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe!!\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe!!\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe!!\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe!" + "'", str2, "\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe!!\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe!!\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe!!\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe!!\276\u02fe\266\266\u02fe\u02fe\276\u02fe\266\266\u02fe\u02fe!");
    }

    @Test
    public void test14459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14459");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!!!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!!!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!!!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!!!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!", "\u0128\u0128\u0126\u0126\u0128\u0128\u0126\u0126\u0108\u0108\u0106\u0106\u0108\u0108\u0106\u0106\u0128\u0128\u0126\u0126\u0128\u0128\u0126\u0126\u0108\u0108\u0106\u0106\u0108\u0108\u0106\u0106\u0128\u0128\u0126\u0126\u0128\u0128\u0126\u0126\u0108\u0108\u0106\u0106\u0108\u0108\u0106\u0106\u0128\u0128\u0126\u0126\u0128\u0128\u0126\u0126\u0108\u0108\u0106\u0106\u0108\u0108\u0106\u0106\u0128\u0128\u0126\u0126\u0128\u0128\u0126\u0126\u0108\u0108\u0106\u0106\u0108\u0108\u0106\u0106\u0128\u0128\u0126\u0126\u0128\u0128\u0126\u0126\u0108\u0108\u0106\u0106\u0108\u0108\u0106\u0106\u0128\u0128\u0126\u0126\u0128\u0128\u0126\u0126\u0108\u0108\u0106\u0106\u0108\u0108\u0106\u0106\u0128\u0128\u0126\u0126\u0128\u0128\u0126\u0126\u0108\u0108\u0106\u0106\u0108\u0108\u0106\u0106!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126!" + "'", str2, "\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126!");
    }

    @Test
    public void test14460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14460");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\275\276EE\275\276EE\275\276EE\275\276EE\275\276EE\275\276EE\275\276EE\275\276EE\275\276EE\275\276EE\275\276EE\275\276EE\275\276EE\275\276EE\275\276EE\275\276EE\275\276EE\275\276EE\275\276EE\275\276EE!", "nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull!" + "'", str2, "\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull\275\276nullnull!");
    }

    @Test
    public void test14461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14461");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("N\253\253\253\200}}`N\253\253\253]]!", "\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u029b\253\253\253\200\u029b\253\253\253]]!" + "'", str2, "\u029b\253\253\253\200\u029b\253\253\253]]!");
    }

    @Test
    public void test14462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14462");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("", "\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14463");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~NLLLNLLNLLLNLLNLLLNLL\200\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~NLLLNLLNLLLNLLNLLLNLL]]!", "LL!!~!!LL!!~!!!!LL!!~!!LL!!~!!!!LL!!~!!LL!!~!!LL!!~!!LL!!~!!!!LL!!~!!LL!!~!!!!LL!!~!!LL!!~!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~!~~~!~~!~~~!~~!~~~!~~\200\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~!~~~!~~!~~~!~~!~~~!~~]]!" + "'", str2, "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~!~~~!~~!~~~!~~!~~~!~~\200\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~!~~~!~~!~~~!~~!~~~!~~]]!");
    }

    @Test
    public void test14464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14464");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\u01cd\u01ce\u01d0\u01d0\u01cd\u01ce\u01d0\u01d0\u01cd\u01ce\u01d0\u01d0\u02fa\u01cd\u01ce\u01d0\u01d0\u01cd\u01ce\u01d0\u01d0\u01cd\u01ce\u01d0\u01d0\u02fa\u01cd\u01ce\u01d0\u01d0\u01cd\u01ce\u01d0\u01d0\u01cd\u01ce\u01d0\u01d0\u02fa\u01cd\u01ce\u01d0\u01d0\u01cd\u01ce\u01d0\u01d0\u01cd\u01ce\u01d0\u01d0\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\u01cd\u01ce\u01d0\u01d0\u01cd\u01ce\u01d0\u01d0\u01cd\u01ce\u01d0\u01d0\u02fa\u01cd\u01ce\u01d0\u01d0\u01cd\u01ce\u01d0\u01d0\u01cd\u01ce\u01d0\u01d0!", "L]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NNL]NN\220L]NNL]NNL]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NNL]NN\220L]NNL]NN!!L]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NNL]NN\220L]NNL]NNL]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NNL]NN\220L]NNL]NN!!L]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NNL]NN\220L]NNL]NNL]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NNL]NN\220L]NNL]NNL]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NNL]NN\220L]NNL]NNL]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NNL]NN\220L]NNL]NN!!L]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NNL]NN\220L]NNL]NNL]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NNL]NN\220L]NNL]NN!!L]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NNL]NN\220L]NNL]NNL]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NN\200~~L]NN\220L]NNL]NNL]NN\220L]NNL]NN!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\u02fa\u02fa\u02fa\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\u02fanullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\u02fa\u02fa\u02fa\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\u02fanullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14465");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\275RRRRRRRRRRRR\275RRRRRRRRRRRR\275RRRRRRRRRRRR\275RRRRRRRRRRRRRRRRRRRR\275\275RRRRRRRR\275\275RRRRRRRR\275\275RRRRRRRR\275\275\275RRRRRRRRRRRR\275RRRRRRRRRRRR\275RRRRRRRRRRRR\275RRRRRRRRRRRRRRRRRRRR\275\275RRRRRRRR\275\275!", "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275UUUUUUUUUUUU\275UUUUUUUUUUUU\275UUUUUUUUUUUU\275UUUUUUUUUUUUUUUUUUUU\275\275UUUUUUUU\275\275UUUUUUUU\275\275UUUUUUUU\275\275\275UUUUUUUUUUUU\275UUUUUUUUUUUU\275UUUUUUUUUUUU\275UUUUUUUUUUUUUUUUUUUU\275\275UUUUUUUU\275\275!" + "'", str2, "\275UUUUUUUUUUUU\275UUUUUUUUUUUU\275UUUUUUUUUUUU\275UUUUUUUUUUUUUUUUUUUU\275\275UUUUUUUU\275\275UUUUUUUU\275\275UUUUUUUU\275\275\275UUUUUUUUUUUU\275UUUUUUUUUUUU\275UUUUUUUUUUUU\275UUUUUUUUUUUUUUUUUUUU\275\275UUUUUUUU\275\275!");
    }

    @Test
    public void test14466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14466");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276LLLLL!!!", "uu}}uu}}uu}}uu}}!uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}!uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}!uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}!uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}!uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}!uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}!uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}!uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null}}}null}}}}}null}}}null}}}}}!!null}}}null}}}}}null}}}null}}}}}!!null}}}null}}}}}null}}}null}}}}}!!null}}}null}}}}}null}}}null}}}}}!!null}}}null}}}}}null}}}null}}}}}!!null}}}null}}}}}null}}}null}}}}}!!null}}}null}}}}}null}}}null}}}}}!!null}}}null}}}}}null}}}null}}}}}!!!" + "'", str2, "null}}}null}}}}}null}}}null}}}}}!!null}}}null}}}}}null}}}null}}}}}!!null}}}null}}}}}null}}}null}}}}}!!null}}}null}}}}}null}}}null}}}}}!!null}}}null}}}}}null}}}null}}}}}!!null}}}null}}}}}null}}}null}}}}}!!null}}}null}}}}}null}}}null}}}}}!!null}}}null}}}}}null}}}null}}}}}!!!");
    }

    @Test
    public void test14467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14467");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("XX!!XX!!XX!!XX!!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!!", "``EHHH!HHEHHH!HH``EHHH!HHEHHH!HH``EHHH!HHEHHH!HH``EHHH!HHEHHH!HH``EHHH!HHEHHH!HH``EHHH!HHEHHH!HH``EHHH!HHEHHH!HH``EHHH!HHEHHH!HH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HH!!HH!!HH!!HH!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!" + "'", str2, "HH!!HH!!HH!!HH!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!");
    }

    @Test
    public void test14468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14468");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("L\230\230\230\230null\226\226\230null\226\226!!!!L\230\230\230\230null\226\226\230null\226\226!!!!!!L\230\230\230\230null\226\226\230null\226\226!!!!L\230\230\230\230null\226\226\230null\226\226!!!!!!L\230\230\230\230null\226\226\230null\226\226!!!!L\230\230\230\230null\226\226\230null\226\226!!!!!!L\230\230\230\230null\226\226\230null\226\226!!!!L\230\230\230\230null\226\226\230null\226\226!!!!!!L\230\230\230\230null\226\226\230null\226\226!!!!L\230\230\230\230null\226\226\230null\226\226!!!!!!L\230\230\230\230null\226\226\230null\226\226!!!!L\230\230\230\230null\226\226\230null\226\226!!!!!!L\230\230\230\230null\226\226\230null\226\226!!!!L\230\230\230\230null\226\226\230null\226\226!!!!!!L\230\230\230\230null\226\226\230null\226\226!!!!L\230\230\230\230null\226\226\230null\226\226!!!!!!!", "!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!V!!!V!!!!VV!!VV!V!!!V!!!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!V!!!V!!!!VV!!VV!V!!!V!!!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!V!!!V!!!!VV!!VV!V!!!V!!!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!V!!!V!!!!VV!!VV!V!!!V!!!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!V!!!V!!!!VV!!VV!V!!!V!!!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!V!!!V!!!!VV!!VV!V!!!V!!!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!V!!!V!!!!VV!!VV!V!!!V!!!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!!VV!V!!!V!!!!VV!!VV!V!!!V!!!");
        org.junit.Assert.assertEquals("'" + strstr2, "V\230\230\230\230V!!!\226\226\230V!!!\226\226!!!!V\230\230\230\230V!!!\226\226\230V!!!\226\226!!!!!!V\230\230\230\230V!!!\226\226\230V!!!\226\226!!!!V\230\230\230\230V!!!\226\226\230V!!!\226\226!!!!!!V\230\230\230\230V!!!\226\226\230V!!!\226\226!!!!V\230\230\230\230V!!!\226\226\230V!!!\226\226!!!!!!V\230\230\230\230V!!!\226\226\230V!!!\226\226!!!!V\230\230\230\230V!!!\226\226\230V!!!\226\226!!!!!!V\230\230\230\230V!!!\226\226\230V!!!\226\226!!!!V\230\230\230\230V!!!\226\226\230V!!!\226\226!!!!!!V\230\230\230\230V!!!\226\226\230V!!!\226\226!!!!V\230\230\230\230V!!!\226\226\230V!!!\226\226!!!!!!V\230\230\230\230V!!!\226\226\230V!!!\226\226!!!!V\230\230\230\230V!!!\226\226\230V!!!\226\226!!!!!!V\230\230\230\230V!!!\226\226\230V!!!\226\226!!!!V\230\230\230\230V!!!\226\226\230V!!!\226\226!!!!!!!");
    }

    @Test
    public void test14469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14469");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\275\276]\225\225\276]\225\225\200\200\276]\225\225\276]\225\225\200\200\276]\225\225\276]\225\225\200\200\276\276]\225\225\276]\225\225\200\200\275\275!", "\215\213!!\215\213!!u!llu!llu!llu!llu!llu!llu!llu!ll\215\213!!\215\213!!u!llu!llu!llu!llu!llu!llu!llu!ll\215\213!!\215\213!!u!llu!llu!llu!llu!llu!llu!llu!ll\215\213!!\215\213!!u!llu!llu!llu!llu!llu!llu!llu!ll\215\213!!\215\213!!u!llu!llu!llu!llu!llu!llu!llu!ll\215\213!!\215\213!!u!llu!llu!llu!llu!llu!llu!llu!ll\215\213!!\215\213!!u!llu!llu!llu!llu!llu!llu!llu!ll\215\213!!\215\213!!u!llu!llu!llu!llu!llu!llu!llu!ll!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\276]\225\225\276]\225\225\200\200\276]\225\225\276]\225\225\200\200\276]\225\225\276]\225\225\200\200\276\276]\225\225\276]\225\225\200\200\275\275!" + "'", str2, "\275\276]\225\225\276]\225\225\200\200\276]\225\225\276]\225\225\200\200\276]\225\225\276]\225\225\200\200\276\276]\225\225\276]\225\225\200\200\275\275!");
    }

    @Test
    public void test14470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14470");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull\200}}`!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull]]!", "`}nullnullnullnullnullnullnullnull`}nullnullnullnullnullnullnullnull`}nullnullnullnullnullnullnullnull`}nullnullnullnullnullnullnullnull`}nullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL\200}}`!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL]]!" + "'", str2, "!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL\200}}`!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL!UNLLUNLLUNLL]]!");
    }

    @Test
    public void test14471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14471");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!", "EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!" + "'", str2, "!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!");
    }

    @Test
    public void test14472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14472");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("}~\200\200}~\200\200!L!!!L!!!L!!!L!!^!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!^!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!}~\200\200}~\200\200!L!!!L!!!L!!!L!!^!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!^!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~\200\200}~\200\200!null!!!null!!!null!!!null!!^!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!^!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!}~\200\200}~\200\200!null!!!null!!!null!!!null!!^!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!^!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!" + "'", str2, "}~\200\200}~\200\200!null!!!null!!!null!!!null!!^!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!^!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!}~\200\200}~\200\200!null!!!null!!!null!!!null!!^!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!^!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!");
    }

    @Test
    public void test14473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14473");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("L!LULLLULLL!LULLLULLL!LULLLULLL!LULLLULLL!LULLLULLL!LULLLULLL!LULLLULLL!LULLLULL!", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!!!!HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!!!!!!HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!!!!HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!!!!!!HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!!!!HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!!!!!!HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!!!!HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!!!!!!HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!!!!HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!!!!!!HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!!!!HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!!!!!!HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!!!!HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!!!!!!HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!!!!HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull!" + "'", str2, "null!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14474");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a\u0117\u0118\u011a\u011a!!!", "]]!!]]!!!!]]!!]]!!!!]]!!]]!!!!]]!!]]!!!!]]!!]]!!!!]]!!]]!!!!]]!!]]!!!!]]!!]]!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!!!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!!!" + "'", str2, "!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!!!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!~nullnullnullnullnullnullnullnull!!!");
    }

    @Test
    public void test14475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14475");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308}~\200\200}~\200\200\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308}~\200\200}~\200\200\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308}~\200\200}~\200\200\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\214\214\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\214\214\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\214\214\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\214\214\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\214\214\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\214\214\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\214\214\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\214\214!" + "'", str2, "\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\214\214\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\214\214\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\214\214\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\214\214\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\214\214\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\214\214\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\214\214\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\u01aa\214\214!");
    }

    @Test
    public void test14476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14476");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("}~\200\200}~\200\200null^\230\230null^\230\230}~\200\200}~\200\200null^\230\230null^\230\230!", "\u010a\u0109\u010e\u010e\u010a\u0109\u010e\u010e\u010a\u0109\u010e\u010e\u010a\u0109\u010e\u010e\u010a\u0109\u010e\u010e\u010a\u0109\u010e\u010e\u010a\u0109\u010e\u010e\u010a\u0109\u010e\u010e\u010a\u0109\u010e\u010e\u010a\u0109\u010e\u010e\u010a\u0109\u010e\u010e\u010a\u0109\u010e\u010e!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~\200\200}~\200\200\u010e\u010e\u010e^\230\230\u010e\u010e\u010e^\230\230}~\200\200}~\200\200\u010e\u010e\u010e^\230\230\u010e\u010e\u010e^\230\230!" + "'", str2, "}~\200\200}~\200\200\u010e\u010e\u010e^\230\230\u010e\u010e\u010e^\230\230}~\200\200}~\200\200\u010e\u010e\u010e^\230\230\u010e\u010e\u010e^\230\230!");
    }

    @Test
    public void test14477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14477");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\275``~~~~~~~~``~~~~~~~~``~~~~~~~~\276``~~~~~~~~\275\275!", "!!^^!!^^!!^^!!^^!!^^!!^^!!^^!!^^!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275``~~~~~~~~``~~~~~~~~``~~~~~~~~\276``~~~~~~~~\275\275!" + "'", str2, "\275``~~~~~~~~``~~~~~~~~``~~~~~~~~\276``~~~~~~~~\275\275!");
    }

    @Test
    public void test14478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14478");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!", "\u0366\u0365\u0368\u0368\231\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!" + "'", str2, "\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!");
    }

    @Test
    public void test14479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14479");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\215}\215\215\215}\215\215!!!!!!!!!!!!!!!!\215}\215\215\215}\215\215!", "\u0366\u0365\u0368\u0368LL!!\213\213\213\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\215}\215\215\215}\215\215!!!!!!!!!!!!!!!!\215}\215\215\215}\215\215!" + "'", str2, "\215}\215\215\215}\215\215!!!!!!!!!!!!!!!!\215}\215\215\215}\215\215!");
    }

    @Test
    public void test14480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14480");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLLL!NLLUUL!NLLUU!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLLL!NLLUUL!NLLUU!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLLL!NLLUUL!NLLUU!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLLL!NLLUUL!NLLUU!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLLL!NLLUUL!NLLUU!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLLL!NLLUUL!NLLUU!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLLL!NLLUUL!NLLUU!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLLL!NLLUUL!NLLUU!", "~nullnullnull~nullnullnull~nullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~nullnullnull~nullnullnull~nullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~LL!~LL!~LL!~LL!~LL!~LL!~LL!~LLL!~LLLLL!~LLLL!~LL!~LL!~LL!~LL!~LL!~LL!~LL!~LLL!~LLLLL!~LLLL!~LL!~LL!~LL!~LL!~LL!~LL!~LL!~LLL!~LLLLL!~LLLL!~LL!~LL!~LL!~LL!~LL!~LL!~LL!~LLL!~LLLLL!~LLLL!~LL!~LL!~LL!~LL!~LL!~LL!~LL!~LLL!~LLLLL!~LLLL!~LL!~LL!~LL!~LL!~LL!~LL!~LL!~LLL!~LLLLL!~LLLL!~LL!~LL!~LL!~LL!~LL!~LL!~LL!~LLL!~LLLLL!~LLLL!~LL!~LL!~LL!~LL!~LL!~LL!~LL!~LLL!~LLLLL!~LLLL!" + "'", str2, "!~LL!~LL!~LL!~LL!~LL!~LL!~LL!~LLL!~LLLLL!~LLLL!~LL!~LL!~LL!~LL!~LL!~LL!~LL!~LLL!~LLLLL!~LLLL!~LL!~LL!~LL!~LL!~LL!~LL!~LL!~LLL!~LLLLL!~LLLL!~LL!~LL!~LL!~LL!~LL!~LL!~LL!~LLL!~LLLLL!~LLLL!~LL!~LL!~LL!~LL!~LL!~LL!~LL!~LLL!~LLLLL!~LLLL!~LL!~LL!~LL!~LL!~LL!~LL!~LL!~LLL!~LLLLL!~LLLL!~LL!~LL!~LL!~LL!~LL!~LL!~LL!~LLL!~LLLLL!~LLLL!~LL!~LL!~LL!~LL!~LL!~LL!~LL!~LLL!~LLLLL!~LLLL!");
    }

    @Test
    public void test14481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14481");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u0366\u0365\u0368\u0368!\274\271\271\u0346\u0348\u0348!", "rrpprrppRRPPRRPPrrpprrppRRPPRRPPrrpprrppRRPPRRPPrrpprrppRRPPRRPPrrpprrppRRPPRRPPrrpprrppRRPPRRPPrrpprrppRRPPRRPPrrpprrppRRPPRRPP!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368!\274\271\271\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368!\274\271\271\u0346\u0348\u0348!");
    }

    @Test
    public void test14482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14482");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!!", "\u019f!\253\253\253\u019f!\253\253\u019f!\253\253\u019f!\253\253\253\u019f!\253\253\u019f!\253\253\u019f!\253\253\253\u019f!\253\253\u019f!\253\253\u019f!\253\253\253\u019f!\253\253\u019f!\253\253\u019f!\253\253\253\u019f!\253\253\u019f!\253\253\u019f!\253\253\253\u019f!\253\253\u019f!\253\253\u019f!\253\253\253\u019f!\253\253\u019f!\253\253\u019f!\253\253\253\u019f!\253\253\u019f!\253\253\u019f!\253\253\253\u019f!\253\253\u019f!\253\253\u019f!\253\253\253\u019f!\253\253\u019f!\253\253\u019f!\253\253\253\u019f!\253\253\u019f!\253\253\u019f!\253\253\253\u019f!\253\253\u019f!\253\253\u019f!\253\253\253\u019f!\253\253\u019f!\253\253\u019f!\253\253\253\u019f!\253\253\u019f!\253\253\u019f!\253\253\253\u019f!\253\253\u019f!\253\253\u019f!\253\253\253\u019f!\253\253\u019f!\253\253\u019f!\253\253\253\u019f!\253\253\u019f!\253\253\u019f!\253\253\253\u019f!\253\253\u019f!\253\253\u019f!\253\253\253\u019f!\253\253\u019f!\253\253\u019f!\253\253\253\u019f!\253\253\u019f!\253\253!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!!" + "'", str2, "\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!!");
    }

    @Test
    public void test14483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14483");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\214\214\214\214!!!" + "'", str2, "!!\214\214\214\214!!!");
    }

    @Test
    public void test14484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14484");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("ULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!", "!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!");
        org.junit.Assert.assertEquals("'" + strstr2, "!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254!\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254\254!");
    }

    @Test
    public void test14485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14485");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!N!", "}~\200\200}~\200\200L^\214\214L^\214\214}~\200\200}~\200\200L^\214\214L^\214\214!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!null!" + "'", str2, "!null!");
    }

    @Test
    public void test14486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14486");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("}nullnullnull~}}^}nullnullnull]]!", "PORRPORRRR\200~~PORRPORRRR\200~~PORRPORRRRPORRPORRRRPORRPORRRR\200~~PORRPORRRR\200~~PORRPORRRRPORRPORRRR!!PORRPORRRR\200~~PORRPORRRR\200~~PORRPORRRRPORRPORRRRPORRPORRRR\200~~PORRPORRRR\200~~PORRPORRRRPORRPORRRR!!PORRPORRRR\200~~PORRPORRRR\200~~PORRPORRRRPORRPORRRRPORRPORRRR\200~~PORRPORRRR\200~~PORRPORRRRPORRPORRRRPORRPORRRR\200~~PORRPORRRR\200~~PORRPORRRRPORRPORRRRPORRPORRRR\200~~PORRPORRRR\200~~PORRPORRRRPORRPORRRR!!PORRPORRRR\200~~PORRPORRRR\200~~PORRPORRRRPORRPORRRRPORRPORRRR\200~~PORRPORRRR\200~~PORRPORRRRPORRPORRRR!!PORRPORRRR\200~~PORRPORRRR\200~~PORRPORRRRPORRPORRRRPORRPORRRR\200~~PORRPORRRR\200~~PORRPORRRRPORRPORRRR!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}nullnullnullnullnullnullnullnullnullnullnullnull~}}^}nullnullnullnullnullnullnullnullnullnullnullnull]]!" + "'", str2, "}nullnullnullnullnullnullnullnullnullnullnullnull~}}^}nullnullnullnullnullnullnullnullnullnullnullnull]]!");
    }

    @Test
    public void test14487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14487");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("LLNNLLNNNNLLNNLLNNNN!", "~\200}}~\200}}~\200}}~\200}}!null~~!null~~!null~~!null~~!null~~!null~~!null~~!null~~!null~~!null~~!null~~!null~~!null~~!null~~!null~~!null~~~\200}}~\200}}~\200}}~\200}}!null~~!null~~!null~~!null~~!null~~!null~~!null~~!null~~!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0106\u0106\u0103\u0103\u0106\u0106\u0103\u0103\u0103\u0103\u0106\u0106\u0103\u0103\u0106\u0106\u0103\u0103\u0103\u0103!" + "'", str2, "\u0106\u0106\u0103\u0103\u0106\u0106\u0103\u0103\u0103\u0103\u0106\u0106\u0103\u0103\u0106\u0106\u0103\u0103\u0103\u0103!");
    }

    @Test
    public void test14488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14488");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\253\254\256\256\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\253\254\256\256\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!!", "null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!!null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!!null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!!null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!!null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!!null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!!null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!!null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\254\256\256L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!\253\254\256\256L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!!" + "'", str2, "\253\254\256\256L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!\253\254\256\256L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!!");
    }

    @Test
    public void test14489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14489");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("nullnull!!nullnull!!nullnullnullnull!\214\214nullnullnullnull!\214\214nullnull!!nullnull!!nullnullnullnull!\214\214nullnullnullnull!\214\214nullnull!!nullnull!!nullnullnullnull!\214\214nullnullnullnull!\214\214nullnull!!nullnull!!nullnullnullnull!\214\214nullnullnullnull!\214\214nullnull!!nullnull!!nullnullnullnull!\214\214nullnullnullnull!\214\214nullnull!!nullnull!!nullnullnullnull!\214\214nullnullnullnull!\214\214nullnull!!nullnull!!nullnullnullnull!\214\214nullnullnullnull!\214\214nullnull!!nullnull!!nullnullnullnull!\214\214nullnullnullnull!\214\214!", "\215}\215\215\215}\215\215\u014e\u014e\u014e\u014e!!!\215}\215\215\215}\215\215!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u014f\u014f\u014f\u014f\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f!!!\214\214!" + "'", str2, "\u014f\u014f\u014f\u014f\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f\u014f\u014f\u014f\u014f!!!\214\214\u014f\u014f\u014f\u014f!!!\214\214!");
    }

    @Test
    public void test14490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14490");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("`\275```\275```\275```\275```\275```\275```\275```\275\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368`\275```\275```\275```\275```\275```\275```\275```\275\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368!", "\253nullnullnull\253nullnullnull\253\253\253nullnullnull\253nullnullnull\253\253!!\253nullnullnull\253nullnullnull\253\253\253nullnullnull\253nullnullnull\253\253!!\253nullnullnull\253nullnullnull\253\253\253nullnullnull\253nullnullnull\253\253!!\253nullnullnull\253nullnullnull\253\253\253nullnullnull\253nullnullnull\253\253!!\253nullnullnull\253nullnullnull\253\253\253nullnullnull\253nullnullnull\253\253!!\253nullnullnull\253nullnullnull\253\253\253nullnullnull\253nullnullnull\253\253!!\253nullnullnull\253nullnullnull\253\253\253nullnullnull\253nullnullnull\253\253!!\253nullnullnull\253nullnullnull\253\253\253nullnullnull\253nullnullnull\253\253!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`\275```\275```\275```\275```\275```\275```\275```\275\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368`\275```\275```\275```\275```\275```\275```\275```\275\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368!" + "'", str2, "`\275```\275```\275```\275```\275```\275```\275```\275\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368`\275```\275```\275```\275```\275```\275```\275```\275\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368\u0365\u0368\u0368!");
    }

    @Test
    public void test14491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14491");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\225\225]]\200\200\200\200]\225\225]]\225\225]]\200]\225\225]]\225\225]]\200]\225\225]]\225\225]]\200]\225\225]]\225\225]]\225\225]]\200\200\200\200]\225\225]]\225\225]]\200]\225\225]]\225\225]]!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200\200!!\200\200!!\200\200!!\200\200!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\225\225]]\200\200\200\200]\225\225]]\225\225]]\200]\225\225]]\225\225]]\200]\225\225]]\225\225]]\200]\225\225]]\225\225]]\225\225]]\200\200\200\200]\225\225]]\225\225]]\200]\225\225]]\225\225]]!" + "'", str2, "\225\225]]\200\200\200\200]\225\225]]\225\225]]\200]\225\225]]\225\225]]\200]\225\225]]\225\225]]\200]\225\225]]\225\225]]\225\225]]\200\200\200\200]\225\225]]\225\225]]\200]\225\225]]\225\225]]!");
    }

    @Test
    public void test14492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14492");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!N!!!N!!!N!!!!!N!!!N!!!N!!!N!!!N!!!!!N!!!N!!!!!", "!\253\256\256\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!" + "'", str2, "!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!!!");
    }

    @Test
    public void test14493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14493");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e!", "\300\300\336\336\300\300\336\336!!\300\300\336\336\300\300\336\336!!\300\300\336\336\300\300\336\336!!\300\300\336\336\300\300\336\336!!\300\300\336\336\300\300\336\336!!\300\300\336\336\300\300\336\336!!\300\300\336\336\300\300\336\336!!\300\300\336\336\300\300\336\336!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull!!nullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull!!nullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull!!nullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull!!nullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull!!nullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull!!nullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull!!nullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull!!nullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14494");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("", "\335\336\340\340\220\335\336\340\340\335\336\340\340\200}}`\335\336\340\340\220\335\336\340\340\335\336\340\340]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14495");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("JnullJJJnullJJ!!JnullJJJnullJJ!!JnullJJJnullJJ!!JnullJJJnullJJ!!JnullJJJnullJJ!!JnullJJJnullJJ!!JnullJJJnullJJ!!JnullJJJnullJJ!!!", "\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016e\u016c\u016enullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null\376\377\u0101\u0101nullnullnull\376\377\u0101\u0101nullnull!!null\376\377\u0101\u0101nullnullnull\376\377\u0101\u0101nullnull!!null\376\377\u0101\u0101nullnullnull\376\377\u0101\u0101nullnull!!null\376\377\u0101\u0101nullnullnull\376\377\u0101\u0101nullnull!!null\376\377\u0101\u0101nullnullnull\376\377\u0101\u0101nullnull!!null\376\377\u0101\u0101nullnullnull\376\377\u0101\u0101nullnull!!null\376\377\u0101\u0101nullnullnull\376\377\u0101\u0101nullnull!!null\376\377\u0101\u0101nullnullnull\376\377\u0101\u0101nullnull!!!" + "'", str2, "null\376\377\u0101\u0101nullnullnull\376\377\u0101\u0101nullnull!!null\376\377\u0101\u0101nullnullnull\376\377\u0101\u0101nullnull!!null\376\377\u0101\u0101nullnullnull\376\377\u0101\u0101nullnull!!null\376\377\u0101\u0101nullnullnull\376\377\u0101\u0101nullnull!!null\376\377\u0101\u0101nullnullnull\376\377\u0101\u0101nullnull!!null\376\377\u0101\u0101nullnullnull\376\377\u0101\u0101nullnull!!null\376\377\u0101\u0101nullnullnull\376\377\u0101\u0101nullnull!!null\376\377\u0101\u0101nullnullnull\376\377\u0101\u0101nullnull!!!");
    }

    @Test
    public void test14496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14496");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.decode("\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!", "!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!" + "'", str2, "\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!");
    }

    @Test
    public void test14497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14497");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\276\276\276\276\275\275\275\276\276\276\276\275\275\275!!\276\276\276\276\275\275\275\276\276\276\276\275\275\275!!\276\276\276\276\275\275\275\276\276\276\276\275\275\275\276\276\276\276\275\275\275\276\276\276\276\275\275\275!!\276\276\276\276\275\275\275\276\276\276\276\275\275\275!!\276\276\276\276\275\275\275\276\276\276\276\275\275\275!", "`!!\275\275!!\275\275!!\275\275`!!\275\275!!\275\275!!\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276\276\276\276\275\275\275\276\276\276\276\275\275\275!!\276\276\276\276\275\275\275\276\276\276\276\275\275\275!!\276\276\276\276\275\275\275\276\276\276\276\275\275\275\276\276\276\276\275\275\275\276\276\276\276\275\275\275!!\276\276\276\276\275\275\275\276\276\276\276\275\275\275!!\276\276\276\276\275\275\275\276\276\276\276\275\275\275!" + "'", str2, "\276\276\276\276\275\275\275\276\276\276\276\275\275\275!!\276\276\276\276\275\275\275\276\276\276\276\275\275\275!!\276\276\276\276\275\275\275\276\276\276\276\275\275\275\276\276\276\276\275\275\275\276\276\276\276\275\275\275!!\276\276\276\276\275\275\275\276\276\276\276\275\275\275!!\276\276\276\276\275\275\275\276\276\276\276\275\275\275!");
    }

    @Test
    public void test14498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14498");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\257!\255\255\257!\255\255\257!\255\255\257!\255\255\257!\255\255\257!\255\255\257!\255\255\257!\255\255!", "nullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunll!!nullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunll!!nullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunll!!nullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunll!!nullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunllnullnullunllunll!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\257!\255\255\257!\255\255\257!\255\255\257!\255\255\257!\255\255\257!\255\255\257!\255\255\257!\255\255!" + "'", str2, "\257!\255\255\257!\255\255\257!\255\255\257!\255\255\257!\255\255\257!\255\255\257!\255\255\257!\255\255!");
    }

    @Test
    public void test14499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14499");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encode("\377\253\u017a\u017a\377\253\u017a\u017anullnullnullnullnullnullnullnull\377\253\u017a\u017a\377\253\u017a\u017anullnullnullnullnullnullnullnull\377\253\u017a\u017a\377\253\u017a\u017anullnullnullnullnullnullnullnull\377\253\u017a\u017a\377\253\u017a\u017anullnullnullnullnullnullnullnull\377\253\u017a\u017a\377\253\u017a\u017anullnullnullnullnullnullnullnull\377\253\u017a\u017a\377\253\u017a\u017anullnullnullnullnullnullnullnull\377\253\u017a\u017a\377\253\u017a\u017anullnullnullnullnullnullnullnull\377\253\u017a\u017a\377\253\u017a\u017anullnullnullnullnullnullnullnull!", "\215}\215\215\215}\215\215]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\215}\215\215\215}\215\215!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null\253nullnullnull\253nullnull]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]null\253nullnullnull\253nullnull]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]null\253nullnullnull\253nullnull]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]null\253nullnullnull\253nullnull]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]null\253nullnullnull\253nullnull]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]null\253nullnullnull\253nullnull]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]null\253nullnullnull\253nullnull]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]null\253nullnullnull\253nullnull]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]!" + "'", str2, "null\253nullnullnull\253nullnull]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]null\253nullnullnull\253nullnull]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]null\253nullnullnull\253nullnull]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]null\253nullnullnull\253nullnull]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]null\253nullnullnull\253nullnull]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]null\253nullnullnull\253nullnull]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]null\253nullnullnull\253nullnull]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]null\253nullnullnull\253nullnull]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]!");
    }

    @Test
    public void test14500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14500");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubCipher.encodenullnull]]nullnull]]\253\253\253\200}}`\220\220nullnull]]nullnull]]\253\253\253]]!");
        org.junit.Assert.assertEquals("'" + strstr
    }
}

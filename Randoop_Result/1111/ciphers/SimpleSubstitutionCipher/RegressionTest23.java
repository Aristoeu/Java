package ciphers.SimpleSubstitutionCipher;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest23 {

    public static boolean debug = false;

    @Test
    public void test11501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11501");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226!!\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226\312\316\316\316\230\226\226!!!", "!~jl\225\225jl\225\225!~jl\225\225jl\225\225!~jl\225\225jl\225\225!~jl\225\225jl\225\225!~jl\225\225jl\225\225!~jl\225\225jl\225\225!~jl\225\225jl\225\225!~jl\225\225jl\225\225!!!~jl\225\225jl\225\225!~jl\225\225jl\225\225!~jl\225\225jl\225\225!~jl\225\225jl\225\225!~jl\225\225jl\225\225!~jl\225\225jl\225\225!~jl\225\225jl\225\225!~jl\225\225jl\225\225!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226!!\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226!!!" + "'", str2, "\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226!!\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226\225\225\225\225\230\226\226!!!");
    }

    @Test
    public void test11502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11502");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("}null\200\200}null\200\200}null\200\200}null\200\200L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~}null\200\200}null\200\200}null\200\200}null\200\200L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~!", "~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL~}\200\200~}\200\200LLLLLLLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}nullnull\340\340\200\200}nullnull\340\340\200\200}nullnull\340\340\200\200}nullnull\340\340\200\200\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~}nullnull\340\340\200\200}nullnull\340\340\200\200}nullnull\340\340\200\200}nullnull\340\340\200\200\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~!" + "'", str2, "}nullnull\340\340\200\200}nullnull\340\340\200\200}nullnull\340\340\200\200}nullnull\340\340\200\200\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~}nullnull\340\340\200\200}nullnull\340\340\200\200}nullnull\340\340\200\200}nullnull\340\340\200\200\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~!");
    }

    @Test
    public void test11503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11503");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170!", "qrttqrttqrttqrttqrtt!!!qrttqrttqrttqrttqrttqrttqrttqrttqrttqrttqrttqrttqrtt!!!qrttqrttqrttqrttqrttqrttqrttqrtt!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11504");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("~}\200\200~}\200\200!!~}\200\200~}\200\200!!~}\200\200~}\200\200!!~}\200\200~}\200\200!!~}\200\200~}\200\200!!~}\200\200~}\200\200!!~}\200\200~}\200\200!!~}\200\200~}
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200!!~}\200\200~}\200\200!!~}\200\200~}\200\200!!~}\200\200~}\200\200!!~}\200\200~}\200\200!!~}\200\200~}\200\200!!~}\200\200~}\200\200!!~}\200\200~}\200\200!!!" + "'", str2, "~}\200\200~}\200\200!!~}\200\200~}\200\200!!~}\200\200~}\200\200!!~}\200\200~}\200\200!!~}\200\200~}\200\200!!~}\200\200~}\200\200!!~}\200\200~}\200\200!!~}\200\200~}\200\200!!!");
    }

    @Test
    public void test11505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11505");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348\u014e\u014b\u014b\u014b\u0348\u0346\u0346!", "}~\200\200}~\200\200LNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNN}~\200\200}~\200\200LNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNN!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test11506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11506");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LL\300\300LL\300\300LL\300\300LL\300\300LL\300\300LL\300\300LL\300\300LL\300\300!", "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\306\306nullnull\306\306nullnull\306\306nullnull\306\306nullnull\306\306nullnull\306\306nullnull\306\306nullnull\306\306nullnull!" + "'", str2, "\306\306nullnull\306\306nullnull\306\306nullnull\306\306nullnull\306\306nullnull\306\306nullnull\306\306nullnull\306\306nullnull!");
    }

    @Test
    public void test11507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11507");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!" + "'", str2, "!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!");
    }

    @Test
    public void test11508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11508");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200TT``TTT``TT``TT``TTT``TT``}~\200\200}~\200\200TT``TTT``TT``TT``TTT``TT``}~\200\200}~\200\200TT``TTT``TT``TT``TTT``TT``}~\200\200}~\200\200\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!!" + "'", str2, "\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!!");
    }

    @Test
    public void test11509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11509");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\275NNN\275NNN\275NNN\275NNN\275NNN\275NNN\275NNN\275NNN!", "!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!!" + "'", str2, "\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!!");
    }

    @Test
    public void test11510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11510");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11511");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\200}}`NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN]]!", "UUUUUUUUUUUUUUUUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUUUUUUUUUUUUUUUUUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\200}}`UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU]]!" + "'", str2, "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\200}}`UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU]]!");
    }

    @Test
    public void test11512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11512");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!\276\275\275!L~~!!L~~!L~~!L~~!L~~!\276\275\275!L~~!!L~~!L~~!L~~!L~~!!!\276\275\275!L~~!!L~~!L~~!L~~!L~~!\276\275\275!L~~!!L~~!L~~!L~~!L~~!!!\276\275\275!L~~!!L~~!L~~!L~~!L~~!\276\275\275!L~~!!L~~!L~~!L~~!L~~!!!\276\275\275!L~~!!L~~!L~~!L~~!L~~!\276\275\275!L~~!!L~~!L~~!L~~!L~~!!!\276\275\275!L~~!!L~~!L~~!L~~!L~~!\276\275\275!L~~!!L~~!L~~!L~~!L~~!!!\276\275\275!L~~!!L~~!L~~!L~~!L~~!\276\275\275!L~~!!L~~!L~~!L~~!L~~!!!\276\275\275!L~~!!L~~!L~~!L~~!L~~!\276\275\275!L~~!!L~~!L~~!L~~!L~~!!!\276\275\275!L~~!!L~~!L~~!L~~!L~~!\276\275\275!L~~!!L~~!L~~!L~~!L~~!!!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\276\275\275!null~~!!null~~!null~~!null~~!null~~!\276\275\275!null~~!!null~~!null~~!null~~!null~~!!!\276\275\275!null~~!!null~~!null~~!null~~!null~~!\276\275\275!null~~!!null~~!null~~!null~~!null~~!!!\276\275\275!null~~!!null~~!null~~!null~~!null~~!\276\275\275!null~~!!null~~!null~~!null~~!null~~!!!\276\275\275!null~~!!null~~!null~~!null~~!null~~!\276\275\275!null~~!!null~~!null~~!null~~!null~~!!!\276\275\275!null~~!!null~~!null~~!null~~!null~~!\276\275\275!null~~!!null~~!null~~!null~~!null~~!!!\276\275\275!null~~!!null~~!null~~!null~~!null~~!\276\275\275!null~~!!null~~!null~~!null~~!null~~!!!\276\275\275!null~~!!null~~!null~~!null~~!null~~!\276\275\275!null~~!!null~~!null~~!null~~!null~~!!!\276\275\275!null~~!!null~~!null~~!null~~!null~~!\276\275\275!null~~!!null~~!null~~!null~~!null~~!!!" + "'", str2, "!\276\275\275!null~~!!null~~!null~~!null~~!null~~!\276\275\275!null~~!!null~~!null~~!null~~!null~~!!!\276\275\275!null~~!!null~~!null~~!null~~!null~~!\276\275\275!null~~!!null~~!null~~!null~~!null~~!!!\276\275\275!null~~!!null~~!null~~!null~~!null~~!\276\275\275!null~~!!null~~!null~~!null~~!null~~!!!\276\275\275!null~~!!null~~!null~~!null~~!null~~!\276\275\275!null~~!!null~~!null~~!null~~!null~~!!!\276\275\275!null~~!!null~~!null~~!null~~!null~~!\276\275\275!null~~!!null~~!null~~!null~~!null~~!!!\276\275\275!null~~!!null~~!null~~!null~~!null~~!\276\275\275!null~~!!null~~!null~~!null~~!null~~!!!\276\275\275!null~~!!null~~!null~~!null~~!null~~!\276\275\275!null~~!!null~~!null~~!null~~!null~~!!!\276\275\275!null~~!!null~~!null~~!null~~!null~~!\276\275\275!null~~!!null~~!null~~!null~~!null~~!!!");
    }

    @Test
    public void test11513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11513");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256!", "\275\276n!ll!n!lln!lln!ll!n!lln!ll\275\276n!ll!n!lln!lln!ll!n!lln!ll\225\225\275\276n!ll!n!lln!lln!ll!n!lln!ll\275\276n!ll!n!lln!lln!ll!n!lln!ll\225\225\275\276n!ll!n!lln!lln!ll!n!lln!ll\275\276n!ll!n!lln!lln!ll!n!lln!ll\225\225\275\276n!ll!n!lln!lln!ll!n!lln!ll\275\276n!ll!n!lln!lln!ll!n!lln!ll\225\225\275\276n!ll!n!lln!lln!ll!n!lln!ll\275\276n!ll!n!lln!lln!ll!n!lln!ll\225\225\275\276n!ll!n!lln!lln!ll!n!lln!ll\275\276n!ll!n!lln!lln!ll!n!lln!ll\225\225\275\276n!ll!n!lln!lln!ll!n!lln!ll\275\276n!ll!n!lln!lln!ll!n!lln!ll\225\225\275\276n!ll!n!lln!lln!ll!n!lln!ll\275\276n!ll!n!lln!lln!ll!n!lln!ll\225\225!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256!" + "'", str2, "````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256````````````````````````````````\253\254\256\256\253\254\256\256!");
    }

    @Test
    public void test11514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11514");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!~HHH~~!!!!~HHH~~!!!!!!~HHH~~!!!!~HHH~~!!!!!!~HHH~~!!!!~HHH~~!!!!!!~HHH~~!!!!~HHH~~!!!!!!~HHH~~!!!!~HHH~~!!!!!!~HHH~~!!!!~HHH~~!!!!!!~HHH~~!!!!~HHH~~!!!!!!~HHH~~!!!!~HHH~~!!!!!", "_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!_!___!__!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!~___~~!!!!~___~~!!!!!!~___~~!!!!~___~~!!!!!!~___~~!!!!~___~~!!!!!!~___~~!!!!~___~~!!!!!!~___~~!!!!~___~~!!!!!!~___~~!!!!~___~~!!!!!!~___~~!!!!~___~~!!!!!!~___~~!!!!~___~~!!!!!" + "'", str2, "!!~___~~!!!!~___~~!!!!!!~___~~!!!!~___~~!!!!!!~___~~!!!!~___~~!!!!!!~___~~!!!!~___~~!!!!!!~___~~!!!!~___~~!!!!!!~___~~!!!!~___~~!!!!!!~___~~!!!!~___~~!!!!!!~___~~!!!!~___~~!!!!!");
    }

    @Test
    public void test11515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11515");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\275```\275```\275```\275`````\275\275``\275\275``\275\275``\275\275\275```\275```\275```\275`````\275\275``
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275```\275```\275```\275`````\275\275``\275\275``\275\275``\275\275\275```\275```\275```\275`````\275\275``\275\275!" + "'", str2, "\275```\275```\275```\275`````\275\275``\275\275``\275\275``\275\275\275```\275```\275```\275`````\275\275``\275\275!");
    }

    @Test
    public void test11516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11516");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNN!", "E~UUHHUUHHE~UUHHUUHH!!E~UUHHUUHHE~UUHHUUHH!!E~UUHHUUHHE~UUHHUUHHE~UUHHUUHHE~UUHHUUHH!!E~UUHHUUHHE~UUHHUUHH!!E~UUHHUUHHE~UUHHUUHH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU!" + "'", str2, "~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU!");
    }

    @Test
    public void test11517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11517");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encodeu0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368LLLLLLLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\253\256\256\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271\266\220\216!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!" + "'", str
    }

    @Test
    public void test11518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11518");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u02af\u02b0\u02b2\u02b2\u02af\u02b0\u02b2\u02b2\u02af\u02b0\u02b2\u02b2\u02af\u02b0\u02b2\u02b2\u02af\u02b0\u02b2\u02b2\u02af\u02b0\u02b2\u02b2\u02af\u02b0\u02b2\u02b2\u02af\u02b0\u02b2\u02b2!!!", "^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull^```^```^```^```^```^```^```^```^```^```nullnull^```^```nullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull!!``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull!!!" + "'", str2, "``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull!!``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull!!!");
    }

    @Test
    public void test11519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11519");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\253\253\335\336\340\340\335\336\340\340\253\253\335\336\340\340\335\336\340\340}}\253\253\335\336\340\340\335\336\340\340\253\253\335\336\340\340\335\336\340\340}}!", "!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!!!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!!!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!!!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!!!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!!!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!!!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!!!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!~U!!\225\225!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\253\225\225~~\225\225~~\253\253\225\225~~\225\225~~}}\253\253\225\225~~\225\225~~\253\253\225\225~~\225\225~~}}!" + "'", str2, "\253\253\225\225~~\225\225~~\253\253\225\225~~\225\225~~}}\253\253\225\225~~\225\225~~\253\253\225\225~~\225\225~~}}!");
    }

    @Test
    public void test11520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11520");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("F]^^F]^^F]^^F]^^F]^^F]^^F]^^F]^^!F]]!F]]F]^^F]^^F]^^F]^^F]^^F]^^F]^^F]^^!F]]!F]]F]^^F]^^F]^^F]^^F]^^F]^^F]^^F]^^!F]]!F]]F]^^F]^^F]^^F]^^F]^^F]^^F]^^F]^^!F]]!F]]F]^^F]^^F]^^F]^^F]^^F]^^F]^^F]^^!F]]!F]]F]^^F]^^F]^^F]^^F]^^F]^^F]^^F]^^!F]]!F]]F]^^F]^^F]^^F]^^F]^^F]^^F]^^F]^^!F]]!F]]F]^^F]^^F]^^F]^^F]^^F]^^F]^^F]^^!F]]!F]]!", "\275\276U\225\225\276U\225\225\200\200\276U\225\225\276U\225\225\200\200\276U\225\225\276U\225\225\200\200\276\276U\225\225\276U\225\225\200\200\275\275!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test11521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11521");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\225\230\226\226\225\230\226\226\225\230\226\226\225\230\226\226\225\230\226\226\225\230\226\226\225\230\226\226\225\230\226\226!", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\225\225FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\225\225FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\225\225FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\225\225FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\225\225FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\225\225FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\225\225FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\225\225!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\225\230\226\226\225\230\226\226\225\230\226\226\225\230\226\226\225\230\226\226\225\230\226\226\225\230\226\226\225\230\226\226!" + "'", str2, "\225\230\226\226\225\230\226\226\225\230\226\226\225\230\226\226\225\230\226\226\225\230\226\226\225\230\226\226\225\230\226\226!");
    }

    @Test
    public void test11522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11522");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!", "\u0346\u0348\u0348\u0348\u037e\u037e\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~~~!^~~!^~~~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~~~!^~~!^~~~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~~~!^~~!^~~~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~~~!^~~!^~~~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~~~!^~~!^~~~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~~~!^~~!^~~~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~~~!^~~!^~~~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~~~!^~~!^~~~~!" + "'", str2, "!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~~~!^~~!^~~~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~~~!^~~!^~~~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~~~!^~~!^~~~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~~~!^~~!^~~~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~~~!^~~!^~~~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~~~!^~~!^~~~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~~~!^~~!^~~~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~!^~~~~!^~~!^~~~~!");
    }

    @Test
    public void test11523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11523");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253EEEEEEEE\253\253EEEEEEEE\253\253EEEEEEEE\253\253EEEEEEEE\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253EEEEEEEE\253\253EEEEEEEE\253\253!", "]]!!]]!!!!]]!!]]!!!!]]!!]]!!!!]]!!]]!!!!]]!!]]!!!!]]!!]]!!!!]]!!]]!!!!]]!!]]!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253]]]]]]]]\253\253]]]]]]]]\253\253]]]]]]]]\253\253]]]]]]]]\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253]]]]]]]]\253\253]]]]]]]]\253\253!" + "'", str2, "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253]]]]]]]]\253\253]]]]]]]]\253\253]]]]]]]]\253\253]]]]]]]]\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253]]]]]]]]\253\253]]]]]]]]\253\253!");
    }

    @Test
    public void test11524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11524");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("nullnullnullnullnull!!nullnullnullnullnull!!!", "^```^```^```^```^```^```^```^```^```^```UUUUUUUU^```^```UUUUUUUU^```^```^```^```^```^```^```^```^```^```UUUUUUUU^```^```UUUUUUUU^```^```^```^```^```^```^```^```^```^```UUUUUUUU^```^```UUUUUUUU^```^```^```^```^```^```^```^```^```^```UUUUUUUU^```^```UUUUUUUU^```^```^```^```^```^```^```^```^```^```UUUUUUUU^```^```UUUUUUUU^```^```^```^```^```^```^```^```^```^```UUUUUUUU^```^```UUUUUUUU^```^```^```^```^```^```^```^```^```^```UUUUUUUU^```^```UUUUUUUU^```^```^```^```^```^```^```^```^```^```UUUUUUUU^```^```UUUUUUUU!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0260\u0260\u0260\u0260\u0260\u0260\u0260\u0260\u0260\u0260nullnull!!!" + "'", str2, "\u0260\u0260\u0260\u0260\u0260\u0260\u0260\u0260\u0260\u0260nullnull!!!");
    }

    @Test
    public void test11525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11525");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\275\276!\225\225\276!\225\225\200\200\276!\225\225\276!\225\225\200\200\276!\225\225\276!\225\225\200\200\276\276!\225\225\276!\225\225\200\200\275\275!", "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\276!\225\225\276!\225\225\200\200\276!\225\225\276!\225\225\200\200\276!\225\225\276!\225\225\200\200\276\276!\225\225\276!\225\225\200\200\275\275!" + "'", str2, "\275\276!\225\225\276!\225\225\200\200\276!\225\225\276!\225\225\200\200\276!\225\225\276!\225\225\200\200\276\276!\225\225\276!\225\225\200\200\275\275!");
    }

    @Test
    public void test11526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11526");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\200\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348]]!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\200\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348]]!" + "'", str2, "\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\200\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348\u0348\220\216\216\216\u0348\u0348]]!");
    }

    @Test
    public void test11527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11527");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!\256nullnull~~!nullnull~~nullnull~~\254\254\256nullnull~~!nullnull~~nullnull~~\254\254!!\256nullnull~~!nullnull~~nullnull~~\254\254\256nullnull~~!nullnull~~nullnull~~\254\254!!\256nullnull~~!nullnull~~nullnull~~\254\254\256nullnull~~!nullnull~~nullnull~~\254\254!!\256nullnull~~!nullnull~~nullnull~~\254\254\256nullnull~~!nullnull~~nullnull~~\254\254!!\256nullnull~~!nullnull~~nullnull~~\254\254\256nullnull~~!nullnull~~nullnull~~\254\254!!\256nullnull~~!nullnull~~nullnull~~\254\254\256nullnull~~!nullnull~~nullnull~~\254\254!!\256nullnull~~!nullnull~~nullnull~~\254\254\256nullnull~~!nullnull~~nullnull~~\254\254!!\256nullnull~~!nullnull~~nullnull~~\254\254\256nullnull~~!nullnull~~nullnull~~\254\254!", "}~\200\200}~\200\200LUELLUELLUELL^LUELLUELLUELLLUELLUELLUELLLUELLUELLUELL^LUELLUELLUELLLUELLUELLUELL}~\200\200}~\200\200LUELLUELLUELL^LUELLUELLUELLLUELLUELLUELLLUELLUELLUELL^LUELLUELLUELLLUELLUELLUELL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254!!\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254!!\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254!!\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254!!\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254!!\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254!!\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254!!\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254!" + "'", str2, "!!\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254!!\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254!!\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254!!\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254!!\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254!!\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254!!\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254!!\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254\256ELLLELLL~~!ELLLELLL~~ELLLELLL~~\254\254!");
    }

    @Test
    public void test11528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11528");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("ULLL\200}}`ULLL]]!", "!!!!!!!!!\200\200!!!!!!!!!!!!!!\200\200!!!!!!!!!!!!!!!!!!!\200\200!!!!!!!!!!!!!!\200\200!!!!!!!!!!!!!!!!!!!\200\200!!!!!!!!!!!!!!\200\200!!!!!!!!!!!!!!!!!!!\200\200!!!!!!!!!!!!!!\200\200!!!!!!!!!!!!!!!!!!!\200\200!!!!!!!!!!!!!!\200\200!!!!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!\200}}`!!!!]]!" + "'", str2, "!!!!\200}}`!!!!]]!");
    }

    @Test
    public void test11529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11529");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!", "NLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnn!!NLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnn!!NLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnn!!NLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnn!!NLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnn!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!" + "'", str2, "!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!!!!~~~~~~~~!!~~~~~~~~!");
    }

    @Test
    public void test11530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11530");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u023d\u023e\u0240\u0240\u023d\u023e\u0240\u0240\u023d\u023e\u0240\u0240\u023d\u023e\u0240\u0240!", "!L!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11531");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("nullnullnull!!nullnull!!nullnull!!nullnullnull!!nullnull!!nullnull!!nullnullnull!!nullnull!!nullnull!!nullnullnull!!nullnull!!nullnull!!nullnullnull!!nullnull!!nullnull!!nullnullnull!!nullnull!!nullnull!!nullnullnull!!nullnull!!nullnull!!nullnullnull!!nullnull!!nullnull!!!", "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253LNLLLNLL\253\253LNLLLNLL\253\253LNLLLNLL\253\253LNLLLNLL\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253LNLLLNLL\253\253LNLLLNLL\253\253!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\270null\272\272\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!!" + "'", str2, "\270null\272\272\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!\270null\272\272\270null\272\272!!!");
    }

    @Test
    public void test11532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11532");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("]NNNNNNNNNNNNNNNNNNNN]]NNNNNNNN]]NNNNNNNN]]NNNNNNNN]]]NNNNNNNNNNNNNNNNNNNN]]NNNNNNNN]]!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200ULLL!UUULLLULLLUUULLLULLLUUULLLULLLUUULLL!UUULLLULLLUUULLLULLLUUULLLULLLUU}~\200\200}~\200\200ULLL!UUULLLULLLUUULLLULLLUUULLLULLLUUULLL!UUULLLULLLUUULLLULLLUUULLLULLLUU}~\200\200}~\200\200ULLL!UUULLLULLLUUULLLULLLUUULLLULLLUUULLL!UUULLLULLLUUULLLULLLUUULLLULLLUU}~\200\200}~\200\200\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]!" + "'", str2, "]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]!");
    }

    @Test
    public void test11533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11533");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!!", "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!!" + "'", str2, "~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!~^~~~^~~~^~~~^~~~^~~~^~~~^~~~^~~!!!");
    }

    @Test
    public void test11534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11534");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\275``!~NN!~NN!~NN!~NN!~NN!~NN!~NN!~NN``!~NN!~NN!~NN!~NN!~NN!~NN!~NN!~NN``!~NN!~NN!~NN!~NN!~NN!~NN!~NN!~NN\276``!~NN!~NN!~NN!~NN!~NN!~NN!~NN!~NN\275\275!", "FHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275``!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull``!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull``!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull\276``!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull\275\275!" + "'", str2, "\275``!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull``!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull``!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull\276``!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull!~nullnull\275\275!");
    }

    @Test
    public void test11535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11535");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0129\u0129\u0129\u0129\u0129\u0129\u0129\u0129\u0129\u0129\u0129\u0129\u0129\u0129\u0129\u0129!!!!!", "\276UNLL\266\266~UNLLUNLL\276UNLL\266\266~UNLLUNLL!!\276UNLL\266\266~UNLLUNLL\276UNLL\266\266~UNLLUNLL!!\276UNLL\266\266~UNLLUNLL\276UNLL\266\266~UNLLUNLL\276UNLL\266\266~UNLLUNLL\276UNLL\266\266~UNLLUNLL!!\276UNLL\266\266~UNLLUNLL\276UNLL\266\266~UNLLUNLL!!\276UNLL\266\266~UNLLUNLL\276UNLL\266\266~UNLLUNLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!null!!!null!!!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!!!" + "'", str2, "!null!!!null!!!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!!!null!!!null!!!!!");
    }

    @Test
    public void test11536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11536");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("^```^```^```^```^```^```^```^```^```^```NNNNNNNN^```^```NNNNNNNN^```^```^```^```^```^```^```^```^```^```NNNNNNNN^```^```NNNNNNNN^```^```^```^```^```^```^```^```^```^```NNNNNNNN^```^```NNNNNNNN^```^```^```^```^```^```^```^```^```^```NNNNNNNN^```^```NNNNNNNN^```^```^```^```^```^```^```^```^```^```NNNNNNNN^```^```NNNNNNNN^```^```^```^```^```^```^```^```^```^```NNNNNNNN^```^```NNNNNNNN^```^```^```^```^```^```^```^```^```^```NNNNNNNN^```^```NNNNNNNN^```^```^```^```^```^```^```^```^```^```NNNNNNNN^```^```NNNNNNNN!", "\u018c\u018d\u018f\u018f\u018c\u018d\u018f\u018f\u018c\u018d\u018f\u018f\u018c\u018d\u018f\u018f!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM!" + "'", str2, "^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM!");
    }

    @Test
    public void test11537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11537");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u0317\u031a\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u0317\u031a\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u0317\u031a\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u0317\u031a\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0!", "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0317\u031a\u0317\u031a\u0317\u031a\u0317\u031anullnullnullnullnullnullnullnull!" + "'", str2, "\u0317\u031a\u0317\u031a\u0317\u031a\u0317\u031anullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11538");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!\276\276\276\276\276!!!", "\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\276\276\276\276\276!!!" + "'", str2, "!\276\276\276\276\276!!!");
    }

    @Test
    public void test11539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11539");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\uu0346\u0348\u0348!", "LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368LUUULUUU\226\226LUUULUUU\226\226\204\204LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226\204\204LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226!!LUUULUUU\226\226LUUULUUU\226\226\204\204LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226\204\204LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226!!LUUULUUU\226\226LUUULUUU\226\226\204\204LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226\204\204LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226!!LUUULUUU\226\226LUUULUUU\226\226\204\204LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226\204\204LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368LUUULUUU\226\226LUUULUUU\226\226\204\204LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226\204\204LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226!!LUUULUUU\226\226LUUULUUU\226\226\204\204LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226\204\204LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226!!LUUULUUU\226\226LUUULUUU\226\226\204\204LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226\204\204LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226!!LUUULUUU\226\226LUUULUUU\226\226\204\204LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226\204\204LUUULUUU\226\226LUUULUUU\226\226LUUULUUU\226\226\u0346\u0348\u0348!");
    }

    @Test
    public void test11540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11540");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("HH!!HH!!!", "\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!" + "'", str2, "!!!!!!!!!");
    }

    @Test
    public void test11541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11541");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\250!!!\250!!!!", "\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\250!!!\250!!!!" + "'", str2, "\250!!!\250!!!!");
    }

    @Test
    public void test11542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11542");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!", "~}\200\200~}\200\200null!nullnullnull!nullnull!xuu!xuunull!nullnullnull!nullnull!xuu!xuu~}\200\200~}\200\200null!nullnullnull!nullnull!xuu!xuunull!nullnullnull!nullnull!xuu!xuu~}\200\200~}\200\200null!nullnullnull!nullnull!xuu!xuunull!nullnullnull!nullnull!xuu!xuu~}\200\200~}\200\200null!nullnullnull!nullnull!xuu!xuunull!nullnullnull!nullnull!xuu!xuu~}\200\200~}\200\200null!nullnullnull!nullnull!xuu!xuunull!nullnullnull!nullnull!xuu!xuu~}\200\200~}\200\200null!nullnullnull!nullnull!xuu!xuunull!nullnullnull!nullnull!xuu!xuu~}\200\200~}\200\200null!nullnullnull!nullnull!xuu!xuunull!nullnullnull!nullnull!xuu!xuu~}\200\200~}\200\200null!nullnullnull!nullnull!xuu!xuunull!nullnullnull!nullnull!xuu!xuu!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!" + "'", str2, "\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!!\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231\232\220\231\231\200~~\232\220\231\231\200~~\232\220\231\231\232\220\231\231!");
    }

    @Test
    public void test11543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11543");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("`\253!!!\253!!!\253!!!`\253!!!\253!!!\253!!!!", "!null]]]null]]]null]]]null]]]null]]]null]]]null]]]null]]]null]]]!null]]]null]]]null]]]null]]]null]]]null]]]null]]]null]]]null]]]!null]]]null]]]null]]]null]]]null]]]null]]]null]]]null]]]null]]]!null]]]null]]]null]]]null]]]null]]]null]]]null]]]null]]]null]]]!null]]]null]]]null]]]null]]]null]]]null]]]null]]]null]]]null]]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`\253!!!\253!!!\253!!!`\253!!!\253!!!\253!!!!" + "'", str2, "`\253!!!\253!!!\253!!!`\253!!!\253!!!\253!!!!");
    }

    @Test
    public void test11544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11544");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decodenullnullnullnull\276\276\276nullnullnullnull\276\276\276\276\276nullnullnullnull\276\276\276nullnullnullnull\276\276\276\276\276nullnullnullnull\276\276\276nullnullnullnull\276\276\276\276\276nullnullnullnull\276\276\276nullnullnullnull\276\276\276\276\276nullnullnullnull\276\276\276nullnullnullnull\276\276\276\276\276nullnullnullnull\276\276\276nullnullnullnull\276\276\276\276\276nullnullnullnull\276\276\276nullnullnullnull\276\276\276\276\276nullnullnullnull\276\276\276nullnullnullnull\276\276\276\276\276!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\236\276\276\253\236\276\276\253\253\253\236\276\276\253\236\276\276\253\253!!\253\236\276\276\253\236\276\276\253\253\253\236\276\276\253\236\276\276\253\253!!\253\236\276\276\253\236\276\276\253\253\253\236\276\276\253\236\276\276\253\253!!\253\236\276\276\253\236\276\276\253\253\253\236\276\276\253\236\276\276\253\253!!\253\236\276\276\253\236\276\276\253\253\253\236\276\276\253\236\276\276\253\253!!\253\236\276\276\253\236\276\276\253\253\253\236\276\276\253\236\276\276\253\253!!\253\236\276\276\253\236\276\276\253\253\253\236\276\276\253\236\276\276\253\253!!\253\236\276\276\253\236\276\276\253\253\253\236\276\276\253\236\276\276\253\253!!!" + "'", str
    }

    @Test
    public void test11545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11545");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\266!!!!!\256\256\256\266\266!!\256\256\256\266\266!!!!\266!!!!!\256\256\256\266\266!!\256\256\256\266\266!!!!!!\266!!!!!\256\256\256\266\266!!\256\256\256\266\266!!!!\266!!!!!\256\256\256\266\266!!\256\256\256\266\266!!!!!!\266!!!!!\256\256\256\266\266!!\256\256\256\266\266!!!!\266!!!!!\256\256\256\266\266!!\256\256\256\266\266!!!!!!\266!!!!!\256\256\256\266\266!!\256\256\256\266\266!!!!\266!!!!!\256\256\256\266\266!!\256\256\256\266\266!!!!!!\266!!!!!\256\256\256\266\266!!\256\256\256\266\266!!!!\266!!!!!\256\256\256\266\266!!\256\256\256\266\266!!!!!!\266!!!!!\256\256\256\266\266!!\256\256\256\266\266!!!!\266!!!!!\256\256\256\266\266!!\256\256\256\266\266!!!!!!\266!!!!!\256\256\256\266\266!!\256\256\256\266\266!!!!\266!!!!!\256\256\256\266\266!!\256\256\256\266\266!!!!!!\266!!!!!\256\256\256\266\266!!\256\256\256\266\266!!!!\266!!!!!\256\256\256\266\266!!\256\256\256\266\266!!!!!!!" + "'", str
    }

    @Test
    public void test11546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11546");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LLUU\226\230\230LLUULLUULLUULLUU\226\230\230LLUU\226\230\230LLUU\226\230\230LLUU\226\230\230LLUU\226\230\230LLUU\226\230\230LLUU\226\230\230LLUU\226\230\230LLUU\226\230\230LLUU\226\230\230LLUU\226\230\230LLUU\226\230\230LLUU\226\230\230LLUU\226\230\230LLUU\226\230\230LLUU\226\230\230LLUU\226\230\230LLUULLUULLUULLUU\226\230\230LLUU\226\230\230LLUU\226\230\230LLUU\226\230\230LLUU\226\230\230LLUU\226\230\230LLUU\226\230\230LLUU\226\230\230!", "LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NNLL\226\230\230NNLLNNLLNNLLNNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLLNNLLNNLLNNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230!" + "'", str2, "NNLL\226\230\230NNLLNNLLNNLLNNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLLNNLLNNLLNNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230NNLL\226\230\230!");
    }

    @Test
    public void test11547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11547");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("}}`\275\275}`\275\275!!!!!\200\200}}`\275\275}`\275\275!!!!!\200\200}}`\275\275}`\275\275!!!!!\200\200}}`\275\275}`\275\275!!!!!\200\200}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}}`\275\275}`\275\275!!!!!\200\200}}`\275\275}`\275\275!!!!!\200\200}}`\275\275}`\275\275!!!!!\200\200}}`\275\275}`\275\275!!!!!\200\200}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}}`\275\275}`\275\275!!!!!\200\200}}`\275\275}`\275\275!!!!!\200\200}}`\275\275}`\275\275!!!!!\200\200}}`\275\275}`\275\275!!!!!\200\200}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}}`\275\275}`\275\275!!!!!\200\200}}`\275\275}`\275\275!!!!!\200\200}}`\275\275}`\275\275!!!!!\200\200}}`\275\275}`\275\275!!!!!\200\200}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~!" + "'", str2, "}}`\275\275}`\275\275!!!!!\200\200}}`\275\275}`\275\275!!!!!\200\200}}`\275\275}`\275\275!!!!!\200\200}}`\275\275}`\275\275!!!!!\200\200}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}}`\275\275}`\275\275!!!!!\200\200}}`\275\275}`\275\275!!!!!\200\200}}`\275\275}`\275\275!!!!!\200\200}}`\275\275}`\275\275!!!!!\200\200}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~}`\275\275}`\275\275!!!~~!");
    }

    @Test
    public void test11548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11548");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fanullnull!", "\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019dnullnullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02faLUNNLUNN!" + "'", str2, "\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02fa\u02faLUNNLUNN!");
    }

    @Test
    public void test11549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11549");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab\u01ab!", "");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11550");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("EEEEEEEEEEEEEEEE\200}}`EEEEEEEEEEEEEEEE]]!", "NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!NN!!N!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NNNNNNNNNNNNNNNN\200}}`NNNNNNNNNNNNNNNN]]!" + "'", str2, "NNNNNNNNNNNNNNNN\200}}`NNNNNNNNNNNNNNNN]]!");
    }

    @Test
    public void test11551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11551");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\361\361\361\361\361\361\361\361!!\361\361\361\361\361\361\361\361!!\361\361\361\361\361\361\361\361!!\361\361\361\361\361\361\361\361!!\361\361\361\361\361\361\361\361!!\361\361\361\361\361\361\361\361!!\361\361\361\361\361\361\361\361!!\361\361\361\361\361\361\361\361!!!", "\215\216\230\230\276UNUUUNUUUNUU\276UNUUUNUUUNUU\276UNUUUNUUUNUU\215\216\230\230\276UNUUUNUUUNUU\276UNUUUNUUUNUU\276UNUUUNUUUNUU\215\216\230\230\276UNUUUNUUUNUU\276UNUUUNUUUNUU\276UNUUUNUUUNUU\215\216\230\230\276UNUUUNUUUNUU\276UNUUUNUUUNUU\276UNUUUNUUUNUU\215\216\230\230\276UNUUUNUUUNUU\276UNUUUNUUUNUU\276UNUUUNUUUNUU\215\216\230\230\276UNUUUNUUUNUU\276UNUUUNUUUNUU\276UNUUUNUUUNUU\215\216\230\230\276UNUUUNUUUNUU\276UNUUUNUUUNUU\276UNUUUNUUUNUU\215\216\230\230\276UNUUUNUUUNUU\276UNUUUNUUUNUU\276UNUUUNUUUNUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276\276\276\276\276\276\276\276!!\276\276\276\276\276\276\276\276!!\276\276\276\276\276\276\276\276!!\276\276\276\276\276\276\276\276!!\276\276\276\276\276\276\276\276!!\276\276\276\276\276\276\276\276!!\276\276\276\276\276\276\276\276!!\276\276\276\276\276\276\276\276!!!" + "'", str2, "\276\276\276\276\276\276\276\276!!\276\276\276\276\276\276\276\276!!\276\276\276\276\276\276\276\276!!\276\276\276\276\276\276\276\276!!\276\276\276\276\276\276\276\276!!\276\276\276\276\276\276\276\276!!\276\276\276\276\276\276\276\276!!\276\276\276\276\276\276\276\276!!!");
    }

    @Test
    public void test11552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11552");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~LLNNNLLLLNNNLLLLNNNLL\200\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~LLNNNLLLLNNNLLLLNNNLL]]!", "~}\200\200~}\200\200\u016e\u016e\u016e\u016eLL~}\200\200~}\200\200\u016e\u016e\u016e\u016eLL~}\200\200~}\200\200\u016e\u016e\u016e\u016eLL~}\200\200~}\200\200\u016e\u016e\u016e\u016eLL~}\200\200~}\200\200\u016e\u016e\u016e\u016eLL~}\200\200~}\200\200\u016e\u016e\u016e\u016eLL~}\200\200~}\200\200\u016e\u016e\u016e\u016eLL~}\200\200~}\200\200\u016e\u016e\u016e\u016eLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u0348\u0348\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u0348\u0348\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u0348\u0348\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016eLL\200\u0348\u0348\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u0348\u0348\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u0348\u0348\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u0348\u0348\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016eLL]]!" + "'", str2, "\u0348\u0348\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u0348\u0348\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u0348\u0348\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u0348\u0348\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016eLL\200\u0348\u0348\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u0348\u0348\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u0348\u0348\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u0348\u0348\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016e\u016eLL]]!");
    }

    @Test
    public void test11553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11553");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!\300\300\300\300]!!\300]!!\300]!!\300]!!!\300\300\300\300]!!\300]!!!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnullnull]!!null]!!null]!!null]!!!nullnullnullnull]!!null]!!!" + "'", str2, "!nullnullnullnull]!!null]!!null]!!null]!!!nullnullnullnull]!!null]!!!");
    }

    @Test
    public void test11554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11554");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\276\276!!nullnull\276\276nullnull\276\276nullnull\276\276\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!nullnull\276\276nullnull\276\276nullnull\276\276\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!!", "nullvvvnullvvvnullvvvnullvvv\200}}`nullvvvnullvvvnullvvvnullvvv]]!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test11555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11555");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("TQTTTQTT!!TQTTTQTT!!TQTTTQTT!!TQTTTQTT!!TQTTTQTT!!TQTTTQTT!!TQTTTQTT!!TQTTTQTT!!!", "\205\205\205\205\205\205\205\205\200\200\205\205\205\205\205\205\205\205\200\200\205\205\205\205\205\205\205\205\200\200\205\205\205\205\205\205\205\205\200\200\205\205\205\205\205\205\205\205\200\200\205\205\205\205\205\205\205\205\200\200\205\205\205\205\205\205\205\205\200\200\205\205\205\205\205\205\205\205\200\200!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200\205\200\200\200\205\200\200!!\200\205\200\200\200\205\200\200!!\200\205\200\200\200\205\200\200!!\200\205\200\200\200\205\200\200!!\200\205\200\200\200\205\200\200!!\200\205\200\200\200\205\200\200!!\200\205\200\200\200\205\200\200!!\200\205\200\200\200\205\200\200!!!" + "'", str2, "\200\205\200\200\200\205\200\200!!\200\205\200\200\200\205\200\200!!\200\205\200\200\200\205\200\200!!\200\205\200\200\200\205\200\200!!\200\205\200\200\200\205\200\200!!\200\205\200\200\200\205\200\200!!\200\205\200\200\200\205\200\200!!\200\205\200\200\200\205\200\200!!!");
    }

    @Test
    public void test11556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11556");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("n\253uun\253\u035e\u035en\253uun\253\u035e\u035e!!!!n\253uun\253\u035e\u035en\253uun\253\u035e\u035e!", "!!!!UUUUUUUU!!UUUUUUUU!!UUUUUUUU!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!UUUUUUUU!!UUUUUUUU!!UUUUUUUU!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null\253\342\342null\253\342\342\u035e\u035enull\253\342\342null\253\342\342\u035e\u035e!!!!null\253\342\342null\253\342\342\u035e\u035enull\253\342\342null\253\342\342\u035e\u035e!" + "'", str2, "null\253\342\342null\253\342\342\u035e\u035enull\253\342\342null\253\342\342\u035e\u035e!!!!null\253\342\342null\253\342\342\u035e\u035enull\253\342\342null\253\342\342\u035e\u035e!");
    }

    @Test
    public void test11557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11557");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348}~\200\200}~\200\200llllllll``llllllllllll``llllllll``llllllll``llllllllllll``llllllll``}~\200\200}~\200\200llllllll``llllllllllll``llllllll``llllllll``llllllllllll``llllllll``}~\200\200}~\200\200llllllll``llllllllllll``llllllll``llllllll``llllllllllll``llllllll``}~\200\200}~\200\200\u0348\u0346\u0346!", "\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348}~\200\200}~\200\200nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``}~\200\200}~\200\200nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``}~\200\200}~\200\200nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``}~\200\200}~\200\200\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348}~\200\200}~\200\200nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``}~\200\200}~\200\200nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``}~\200\200}~\200\200nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``}~\200\200}~\200\200\u0348\u0346\u0346!");
    }

    @Test
    public void test11558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11558");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!", "\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161\u0162\u0161nullnull!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!" + "'", str2, "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!");
    }

    @Test
    public void test11559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11559");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\u0245\u0246\u0248\u0248\u0346\u0348\u0348!", "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test11560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11560");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u025e\u025e\u025e\u025e\u025e\u025enullnull!", "`null]nullnullnull]nullnullnull]nullnull`null]nullnullnull]nullnullnull]nullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\255\256\260\260\255\256\260\260\255\256\260\260\255\256\260\260null\255\256\260\260\255\256\260\260\255\256\260\260null\255\256\260\260\255\256\260\260\255\256\260\260null\255\256\260\260\255\256\260\260\255\256\260\260null\255\256\260\260\255\256\260\260!\255\256\260\260\255\256\260\260\255\256\260\260\255\256\260\260null\255\256\260\260\255\256\260\260\255\256\260\260null\255\256\260\260\255\256\260\260!" + "'", str2, "!\255\256\260\260\255\256\260\260\255\256\260\260\255\256\260\260null\255\256\260\260\255\256\260\260\255\256\260\260null\255\256\260\260\255\256\260\260\255\256\260\260null\255\256\260\260\255\256\260\260\255\256\260\260null\255\256\260\260\255\256\260\260!\255\256\260\260\255\256\260\260\255\256\260\260\255\256\260\260null\255\256\260\260\255\256\260\260\255\256\260\260null\255\256\260\260\255\256\260\260!");
    }

    @Test
    public void test11561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11561");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````!", "I!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!II\200}}`I!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!III!II]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````!" + "'", str2, "~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````!");
    }

    @Test
    public void test11562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11562");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!!" + "'", str2, "}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]!!!");
    }

    @Test
    public void test11563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11563");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encodenullnullnullnullnullnullnullnull\225\225nullnullnullnullnullnullnullnull\225\225nullnullnullnullnullnullnullnull\225\225nullnullnullnullnullnullnullnull\225\225nullnullnullnullnullnullnullnull\225\225nullnullnullnullnullnullnullnull\225\225nullnullnullnullnullnullnullnull\225\225nullnullnullnullnullnullnullnull\225\225!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test11564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11564");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!~LL!!!!~LL!!!!!!~LL!!!!~LL!!!!!!~LL!!!!~LL!!!!~LL!!!!~LL!!!!!!~LL!!!!~LL!!!!!!~LL!!!!~LL!!!", "\u018c\u018d\u018f\u018f\u018c\u018d\u018f\u018f\u018c\u018d\u018f\u018f\u018c\u018d\u018f\u018f!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!~LL!!!!~LL!!!!!!~LL!!!!~LL!!!!!!~LL!!!!~LL!!!!~LL!!!!~LL!!!!!!~LL!!!!~LL!!!!!!~LL!!!!~LL!!!" + "'", str2, "!!~LL!!!!~LL!!!!!!~LL!!!!~LL!!!!!!~LL!!!!~LL!!!!~LL!!!!~LL!!!!!!~LL!!!!~LL!!!!!!~LL!!!!~LL!!!");
    }

    @Test
    public void test11565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11565");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348\u037e\u037e\u0348\u0346\u0346!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u037e\u037e\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u037e\u037e\u0348\u0346\u0346!");
    }

    @Test
    public void test11566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11566");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u010d\360\360\360\360null\355\355\360null\355\355\u010d\360\360\360\360null\355\355\360null\355\355\u010d\360\360\360\360null\355\355\360null\355\355\u010d\360\360\360\360null\355\355\360null\355\355\u010d\360\360\360\360null\355\355\360null\355\355\u010d\360\360\360\360null\355\355\360null\355\355\u010d\360\360\360\360null\355\355\360null\355\355\u010d\360\360\360\360null\355\355\360null\355\355\u010d\360\360\360\360null\355\355\360null\355\355\u010d\360\360\360\360null\355\355\360null\355\355\u010d\360\360\360\360null\355\355\360null\355\355\u010d\360\360\360\360null\355\355\360null\355\355\u010d\360\360\360\360null\355\355\360null\355\355\u010d\360\360\360\360null\355\355\360null\355\355\u010d\360\360\360\360null\355\355\360null\355\355\u010d\360\360\360\360null\355\355\360null\355\355!!!!!!!", "`!!L\230LLL\230LL!!L\230LLL\230LL!!L\230LLL\230LL`!!L\230LLL\230LL!!L\230LLL\230LL!!L\230LLL\230LL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!!!!" + "'", str2, "nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!nullnullnullnullnull\230!!!nullnullnull\230!!!nullnull!!!!!!!");
    }

    @Test
    public void test11567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11567");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("NULLNULLLLNULLNULLLL!!NULLNULLLLNULLNULLLL!!NULLNULLLLNULLNULLLL!!NULLNULLLLNULLNULLLL!!NULLNULLLLNULLNULLLL!!NULLNULLLLNULLNULLLL!!NULLNULLLLNULLNULLLL!!NULLNULLLLNULLNULLLL!!!", "\u0279\u0276\u0276\u0279\u0276\u0276\u0279\u0276\u0276\u0279\u0276\u0276\u0279\u0276\u0276\u0279\u0276\u0276\u0279\u0276\u0276\u0279\u0276\u0276\u0279\u0276\u0276\u0279\u0276\u0276\u0279\u0276\u0276\u0279\u0276\u0276\u0279\u0276\u0276\u0279\u0276\u0276\u0279\u0276\u0276\u0279\u0276\u0276!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276LLLLL!!!" + "'", str2, "\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276\u0276LLLLL!!!");
    }

    @Test
    public void test11568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11568");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!~HHH~~!!!!~HHH~~!!!!!!~HHH~~!!!!~HHH~~!!!!!!~HHH~~!!!!~HHH~~!!!!!!~HHH~~!!!!~HHH~~!!!!!!~HHH~~!!!!~HHH~~!!!!!!~HHH~~!!!!~HHH~~!!!!!!~HHH~~!!!!~HHH~~!!!!!!~HHH~~!!!!~HHH~~!!!!!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!~nullnullnull~~!!!!~nullnullnull~~!!!!!!~nullnullnull~~!!!!~nullnullnull~~!!!!!!~nullnullnull~~!!!!~nullnullnull~~!!!!!!~nullnullnull~~!!!!~nullnullnull~~!!!!!!~nullnullnull~~!!!!~nullnullnull~~!!!!!!~nullnullnull~~!!!!~nullnullnull~~!!!!!!~nullnullnull~~!!!!~nullnullnull~~!!!!!!~nullnullnull~~!!!!~nullnullnull~~!!!!!" + "'", str2, "!!~nullnullnull~~!!!!~nullnullnull~~!!!!!!~nullnullnull~~!!!!~nullnullnull~~!!!!!!~nullnullnull~~!!!!~nullnullnull~~!!!!!!~nullnullnull~~!!!!~nullnullnull~~!!!!!!~nullnullnull~~!!!!~nullnullnull~~!!!!!!~nullnullnull~~!!!!~nullnullnull~~!!!!!!~nullnullnull~~!!!!~nullnullnull~~!!!!!!~nullnullnull~~!!!!~nullnullnull~~!!!!!");
    }

    @Test
    public void test11569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11569");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]\200}}`!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]]]!", "\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348\u0346\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]\200}}`!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]]]!" + "'", str2, "!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]\200}}`!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]]]!");
    }

    @Test
    public void test11570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11570");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348\275\275\275\275\u0348\u0346\u0346!", "!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!!!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!!!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!!!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!!!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!~\216\u0346\u0368\u0368\216\u0346\u0368\u0368!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\275\275\275\275\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\275\275\275\275\u0348\u0346\u0346!");
    }

    @Test
    public void test11571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11571");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!", "!!\200\200\200!\200\200\200!\200\200\200\u0348\u0348!!\200\200\200!\200\200\200!\200\200\200\u0348\u0348!!!!\200\200\200!\200\200\200!\200\200\200\u0348\u0348!!\200\200\200!\200\200\200!\200\200\200\u0348\u0348!!!!\200\200\200!\200\200\200!\200\200\200\u0348\u0348!!\200\200\200!\200\200\200!\200\200\200\u0348\u0348!!\200\200\200!\200\200\200!\200\200\200\u0348\u0348!!\200\200\200!\200\200\200!\200\200\200\u0348\u0348!!!!\200\200\200!\200\200\200!\200\200\200\u0348\u0348!!\200\200\200!\200\200\200!\200\200\200\u0348\u0348!!!!\200\200\200!\200\200\200!\200\200\200\u0348\u0348!!\200\200\200!\200\200\200!\200\200\200\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200\200\u0348\u0348\200\200\u0348\u0348!!\200\200\u0348\u0348\200\200\u0348\u0348!!\200\200\u0348\u0348\200\200\u0348\u0348\200\200\u0348\u0348\200\200\u0348\u0348!!\200\200\u0348\u0348\200\200\u0348\u0348!!\200\200\u0348\u0348\200\200\u0348\u0348!" + "'", str2, "\200\200\u0348\u0348\200\200\u0348\u0348!!\200\200\u0348\u0348\200\200\u0348\u0348!!\200\200\u0348\u0348\200\200\u0348\u0348\200\200\u0348\u0348\200\200\u0348\u0348!!\200\200\u0348\u0348\200\200\u0348\u0348!!\200\200\u0348\u0348\200\200\u0348\u0348!");
    }

    @Test
    public void test11572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11572");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("NNLLNNLLNNLLNNLL\254~\256\256\254~\256\256\254~\256\256\254~\256\256!", "\270NN!!\270\270\270NN!!\270\270!!\270NN!!\270\270\270NN!!\270\270!!\270NN!!\270\270\270NN!!\270\270!!\270NN!!\270\270\270NN!!\270\270!!\270NN!!\270\270\270NN!!\270\270!!\270NN!!\270\270\270NN!!\270\270!!\270NN!!\270\270\270NN!!\270\270!!\270NN!!\270\270\270NN!!\270\270!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\272\272nullnull\272\272nullnull\272\272nullnull\272\272nullnull\254~\256\256\254~\256\256\254~\256\256\254~\256\256!" + "'", str2, "\272\272nullnull\272\272nullnull\272\272nullnull\272\272nullnull\254~\256\256\254~\256\256\254~\256\256\254~\256\256!");
    }

    @Test
    public void test11573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11573");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!^```^```!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254``!" + "'", str2, "`\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254``!");
    }

    @Test
    public void test11574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11574");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encodeunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunll!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LUUULUUULUUULUUULUUULUUU!!!!LUUULUUULUUULUUULUUULUUU!!!!!!LUUULUUULUUULUUULUUULUUU!!!!LUUULUUULUUULUUULUUULUUU!!!!!!LUUULUUULUUULUUULUUULUUU!!!!LUUULUUULUUULUUULUUULUUU!!!!!!LUUULUUULUUULUUULUUULUUU!!!!LUUULUUULUUULUUULUUULUUU!!!!!!LUUULUUULUUULUUULUUULUUU!!!!LUUULUUULUUULUUULUUULUUU!!!!!!LUUULUUULUUULUUULUUULUUU!!!!LUUULUUULUUULUUULUUULUUU!!!!!!LUUULUUULUUULUUULUUULUUU!!!!LUUULUUULUUULUUULUUULUUU!!!!!!LUUULUUULUUULUUULUUULUUU!!!!LUUULUUULUUULUUULUUULUUU!!!!!!!" + "'", str2, "LUUULUUULUUULUUULUUULUUU!!!!LUUULUUULUUULUUULUUULUUU!!!!!!LUUULUUULUUULUUULUUULUUU!!!!LUUULUUULUUULUUULUUULUUU!!!!!!LUUULUUULUUULUUULUUULUUU!!!!LUUULUUULUUULUUULUUULUUU!!!!!!LUUULUUULUUULUUULUUULUUU!!!!LUUULUUULUUULUUULUUULUUU!!!!!!LUUULUUULUUULUUULUUULUUU!!!!LUUULUUULUUULUUULUUULUUU!!!!!!LUUULUUULUUULUUULUUULUUU!!!!LUUULUUULUUULUUULUUULUUU!!!!!!LUUULUUULUUULUUULUUULUUU!!!!LUUULUUULUUULUUULUUULUUU!!!!!!LUUULUUULUUULUUULUUULUUU!!!!LUUULUUULUUULUUULUUULUUU!!!!!!!");
    }

    @Test
    public void test11575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11575");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\275^^^\275^^^\275^^^\275^^^^^\275\275^^\275\275^^\275\275^^\275\275\275^^^\275^^^\275^^^\275^^^^^\275\275^^\275\275!", "````\275````````````\275````````````\275````````````\275````````````\275````````````\275````````````\275````````````\275````````````````````````````````````````````\275````````````\275````````````\275````````````\275````````````\275````````````\275````````````\275````````````\275````````````````````````````````````````!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275^^^\275^^^\275^^^\275^^^^^\275\275^^\275\275^^\275\275^^\275\275\275^^^\275^^^\275^^^\275^^^^^\275\275^^\275\275!" + "'", str2, "\275^^^\275^^^\275^^^\275^^^^^\275\275^^\275\275^^\275\275^^\275\275\275^^^\275^^^\275^^^\275^^^^^\275\275^^\275\275!");
    }

    @Test
    public void test11576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11576");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("UULLUULLUULLUULLUULL!", "nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NNLLNNLLNNLLNNLLNNLL!" + "'", str2, "NNLLNNLLNNLLNNLLNNLL!");
    }

    @Test
    public void test11577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11577");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullnullnullnullnull\374\u0128\u0128\374\u0128\u0128nullnullnullnullnullnullnullnull\374\u0128\u0128\374\u0128\u0128nullnullnullnullnullnullnullnull\374\u0128\u0128\374\u0128\u0128nullnullnullnullnullnullnullnull\374\u0128\u0128\374\u0128\u0128nullnullnullnullnullnullnullnull\374\u0128\u0128\374\u0128\u0128nullnullnullnullnullnullnullnull\374\u0128\u0128\374\u0128\u0128nullnullnullnullnullnullnullnull\374\u0128\u0128\374\u0128\u0128nullnullnullnullnullnullnullnull\374\u0128\u0128\374\u0128\u0128!", "!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!!!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!!!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!!!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!!!XXX!XXX!XXX!XXX!XXX!XXX!XXX!XXX!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxXXXXXxxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxXXXXXxxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxXXXXXxxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxXXXXXxxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxXXXXXxxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxXXXXXxxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxXXXXXxxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxXXXXXxx!" + "'", str2, "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxXXXXXxxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxXXXXXxxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxXXXXXxxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxXXXXXxxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxXXXXXxxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxXXXXXxxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxXXXXXxxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxXXXXXxx!");
    }

    @Test
    public void test11578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11578");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368nullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull\204\204nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\204\204\u0346\u0348\u0348!", "enulleeenulleenullnullenulleeenulleenullnull!!enulleeenulleenullnullenulleeenulleenullnull!!enulleeenulleenullnullenulleeenulleenullnullenulleeenulleenullnullenulleeenulleenullnull!!enulleeenulleenullnullenulleeenulleenullnull!!enulleeenulleenullnullenulleeenulleenullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!!!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!!!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!!!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!!!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!!!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!!!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204\u0346\u0348\u0348!");
    }

    @Test
    public void test11579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11579");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\253\u0210\u0210\u0210\u0348\u0348\253\u0210\u0210\u0210\u0348\u0348!!\253\u0210\u0210\u0210\u0348\u0348\253\u0210\u0210\u0210\u0348\u0348!!\253\u0210\u0210\u0210\u0348\u0348\253\u0210\u0210\u0210\u0348\u0348\253\u0210\u0210\u0210\u0348\u0348\253\u0210\u0210\u0210\u0348\u0348!!\253\u0210\u0210\u0210\u0348\u0348\253\u0210\u0210\u0210\u0348\u0348!!\253\u0210\u0210\u0210\u0348\u0348\253\u0210\u0210\u0210\u0348\u0348!", "");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\u0348\u0348\253\u0348\u0348!!\253\u0348\u0348\253\u0348\u0348!!\253\u0348\u0348\253\u0348\u0348\253\u0348\u0348\253\u0348\u0348!!\253\u0348\u0348\253\u0348\u0348!!\253\u0348\u0348\253\u0348\u0348!" + "'", str2, "\253\u0348\u0348\253\u0348\u0348!!\253\u0348\u0348\253\u0348\u0348!!\253\u0348\u0348\253\u0348\u0348\253\u0348\u0348\253\u0348\u0348!!\253\u0348\u0348\253\u0348\u0348!!\253\u0348\u0348\253\u0348\u0348!");
    }

    @Test
    public void test11580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11580");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````\200}}`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````]]!", "UNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````\200}}`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````]]!" + "'", str2, "````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````\200}}`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````]]!");
    }

    @Test
    public void test11581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11581");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\215}\215\215\215}\215\215\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\215}\215\215\215}\215\215!", "\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\215}\215\215\215}\215\215\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\215}\215\215\215}\215\215!" + "'", str2, "\215}\215\215\215}\215\215\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\275\275!!\215}\215\215\215}\215\215!");
    }

    @Test
    public void test11582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11582");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!", "N!!!N!!!N!!!N!!!N!!!N!!!N!!!N!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!" + "'", str2, "!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!");
    }

    @Test
    public void test11583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11583");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("unllunllunllunllunllunllunllunll!", "!lll!lll!lll!lllnullnull!lll!lllnullnull!lll!lll!lll!lllnullnull!lll!lllnullnull!lll!lll!lll!lll!lll!lllnullnull!lll!lllnullnull!lll!lll!lll!lllnullnull!lll!lllnullnull!lll!lll!lll!lll!lll!lllnullnull!lll!lllnullnull!lll!lll!lll!lllnullnull!lll!lllnullnull!lll!lll!lll!lll!lll!lllnullnull!lll!lllnullnull!lll!lll!lll!lllnullnull!lll!lllnullnull!lll!lll!lll!lll!lll!lllnullnull!lll!lllnullnull!lll!lll!lll!lllnullnull!lll!lllnullnull!lll!lll!lll!lll!lll!lllnullnull!lll!lllnullnull!lll!lll!lll!lllnullnull!lll!lllnullnull!lll!lll!lll!lll!lll!lllnullnull!lll!lllnullnull!lll!lll!lll!lllnullnull!lll!lllnullnull!lll!lll!lll!lll!lll!lllnullnull!lll!lllnullnull!lll!lll!lll!lllnullnull!lll!lllnullnull!lll!lll!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0316\u0315\u0320\u0320\u0316\u0315\u0320\u0320\u0316\u0315\u0320\u0320\u0316\u0315\u0320\u0320\u0316\u0315\u0320\u0320\u0316\u0315\u0320\u0320\u0316\u0315\u0320\u0320\u0316\u0315\u0320\u0320!" + "'", str2, "\u0316\u0315\u0320\u0320\u0316\u0315\u0320\u0320\u0316\u0315\u0320\u0320\u0316\u0315\u0320\u0320\u0316\u0315\u0320\u0320\u0316\u0315\u0320\u0320\u0316\u0315\u0320\u0320\u0316\u0315\u0320\u0320!");
    }

    @Test
    public void test11584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11584");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "!\331\330\333\333\331\330\333\333\331\330\333\333\331\330\333\333!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11585");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c\u016e\u016c\u016c!", "!\220\220\220!!\220\220\220!\220\220\220!\220\220\220!!\220\220\220!\220\220\220!\220\220\220!!\220\220\220!\220\220\220!\220\220\220!!\220\220\220!\220\220\220!\220\220\220!!\220\220\220!\220\220\220!\220\220\220!!\220\220\220!\220\220\220!\220\220\220!!\220\220\220!\220\220\220!\220\220\220!!\220\220\220!\220\220\220!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11586");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!!!", "]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200!!]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200!!]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200!!]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200!!]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200]]\200nullnullnullnull\200\200\200nullnullnullnull\200\200!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223!nullnull!!!" + "'", str2, "\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223\u0223!nullnull!!!");
    }

    @Test
    public void test11587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11587");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243!!!!!", "LNUULNUULNUULNUULNUULNUULNUULNUULLLNUULNUULNUULNUULNUULNUULNUULNUULLLNUULNUULNUULNUULNUULNUULNUULNUULLLNUULNUULNUULNUULNUULNUULNUULNUULLLNUULNUULNUULNUULNUULNUULNUULNUULLLNUULNUULNUULNUULNUULNUULNUULNUULLLNUULNUULNUULNUULNUULNUULNUULNUULLLNUULNUULNUULNUULNUULNUULNUULNUULL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!nullnullnullnullUUNNnullnullnullnullnullnullnullnullnullnullnullnullUUNNnullnullnullnullnullnullnullnull!!nullnullnullnullUUNNnullnullnullnullnullnullnullnullnullnullnullnullUUNNnullnullnullnullnullnullnullnull!!nullnullnullnullUUNNnullnullnullnullnullnullnullnullnullnullnullnullUUNNnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullUUNNnullnullnullnullnullnullnullnullnullnullnullnullUUNNnullnullnullnullnullnullnullnull!!nullnullnullnullUUNNnullnullnullnullnullnullnullnullnullnullnullnullUUNNnullnullnullnullnullnullnullnull!!nullnullnullnullUUNNnullnullnullnullnullnullnullnullnullnullnullnullUUNNnullnullnullnullnullnullnullnull!!!!!" + "'", str2, "!!nullnullnullnullUUNNnullnullnullnullnullnullnullnullnullnullnullnullUUNNnullnullnullnullnullnullnullnull!!nullnullnullnullUUNNnullnullnullnullnullnullnullnullnullnullnullnullUUNNnullnullnullnullnullnullnullnull!!nullnullnullnullUUNNnullnullnullnullnullnullnullnullnullnullnullnullUUNNnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullUUNNnullnullnullnullnullnullnullnullnullnullnullnullUUNNnullnullnullnullnullnullnullnull!!nullnullnullnullUUNNnullnullnullnullnullnullnullnullnullnullnullnullUUNNnullnullnullnullnullnullnullnull!!nullnullnullnullUUNNnullnullnullnullnullnullnullnullnullnullnullnullUUNNnullnullnullnullnullnullnullnull!!!!!");
    }

    @Test
    public void test11588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11588");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("}nullnullnullnull!!!\200\200}nullnullnullnull!!!\200\200}nullnullnullnull!!!\200\200}nullnullnullnull!!!\200\200nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~}nullnullnullnull!!!\200\200}nullnullnullnull!!!\200\200}nullnullnullnull!!!\200\200}nullnullnullnull!!!\200\200nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~nullnullnullnull!~~!", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!" + "'", str2, "}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!");
    }

    @Test
    public void test11589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11589");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\276V\275\275\276V\275\275\276V\275\275\276V\275\275\276V\275\275\276V\275\275\276V\275\275\276V\275\275!", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276!\275\275\276!\275\275\276!\275\275\276!\275\275\276!\275\275\276!\275\275\276!\275\275\276!\275\275!" + "'", str2, "\276!\275\275\276!\275\275\276!\275\275\276!\275\275\276!\275\275\276!\275\275\276!\275\275\276!\275\275!");
    }

    @Test
    public void test11590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11590");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\300]\300\300\300]\300\300!!\300]\300\300\300]\300\300!!\300]\300\300\300]\300\300\300]\300\300\300]\300\300!!\300]\300\300\300]\300\300!!\300]\300\300\300]\300\300!", "``nullnull\200\200nullnull\200\200``nullnull\200\200nullnull\200\200``nullnull\200\200nullnull\200\200``nullnull\200\200nullnull\200\200``nullnull\200\200nullnull\200\200``nullnull\200\200nullnull\200\200``nullnull\200\200nullnull\200\200``nullnull\200\200nullnull\200\200!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "U]UUU]UU!!U]UUU]UU!!U]UUU]UUU]UUU]UU!!U]UUU]UU!!U]UUU]UU!" + "'", str2, "U]UUU]UU!!U]UUU]UU!!U]UUU]UUU]UUU]UU!!U]UUU]UU!!U]UUU]UU!");
    }

    @Test
    public void test11591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11591");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0348\u0348\u0348\u016c\u016b\u0163\u0163\u016c\u016b\u0163\u0163\u016c\u016b\u0163\u0163\u016c\u016b\u0163\u0163\u016c\u016b\u0163\u0163\u016c\u016b\u0163\u0163\u016c\u016b\u0163\u0163\u016c\u016b\u0163\u0163\u0348\u0346\u0346!", "!!!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!!!nullnullnull!nullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test11592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11592");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\u02fa\u02fa\u02fa\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\u02faLIIILIIILIII!", "NLLLNLLLNLLLNLLL\200}}`NLLLNLLLNLLLNLLL]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\u02fa\u02fa\u02fa\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\u02fadnullnullnulldnullnullnulldnullnullnull!" + "'", str2, "\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\u02fa\u02fa\u02fa\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\u02fadnullnullnulldnullnullnulldnullnullnull!");
    }

    @Test
    public void test11593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11593");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "nullnullnullnull\275\275\275nullnullnullnull\275\275\275!!nullnullnullnull\275\275\275nullnullnullnull\275\275\275!!nullnullnullnull\275\275\275nullnullnullnull\275\275\275nullnullnullnull\275\275\275nullnullnullnull\275\275\275!!nullnullnullnull\275\275\275nullnullnullnull\275\275\275!!nullnullnullnull\275\275\275nullnullnullnull\275\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11594");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LLUUUULL!", "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLNNNNLL!" + "'", str2, "LLNNNNLL!");
    }

    @Test
    public void test11595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11595");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!O!!!O!!nullorrnullorrnullorrnullorrnullorrnullorrnullorrnullorr!O!!!O!!nullorrnullorrnullorrnullorrnullorrnullorrnullorrnullorr!O!!!O!!nullorrnullorrnullorrnullorrnullorrnullorrnullorrnullorr!O!!!O!!nullorrnullorrnullorrnullorrnullorrnullorrnullorrnullorr!O!!!O!!nullorrnullorrnullorrnullorrnullorrnullorrnullorrnullorr!O!!!O!!nullorrnullorrnullorrnullorrnullorrnullorrnullorrnullorr!O!!!O!!nullorrnullorrnullorrnullorrnullorrnullorrnullorrnullorr!O!!!O!!nullorrnullorrnullorrnullorrnullorrnullorrnullorrnullorr!", "\u0366\u0365\u0368\u0368U!!!U!!!\200\200\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!!" + "'", str2, "\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!!");
    }

    @Test
    public void test11596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11596");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "LUUULUUU\254\254LUUULUUU\254\254]]LUUULUUU\254\254LUUULUUU\254\254]]\214LUUULUUU\254\254LUUULUUU\254\254LUUULUUU\254\254\214LUUULUUU\254\254LUUULUUU\254\254LUUULUUU\254\254LUUULUUU\254\254LUUULUUU\254\254]]LUUULUUU\254\254LUUULUUU\254\254]]\214LUUULUUU\254\254LUUULUUU\254\254LUUULUUU\254\254\214LUUULUUU\254\254LUUULUUU\254\254LUUULUUU\254\254!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11597");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("XXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxxXXxx
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11598");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!", "\275\u03e6\u03e6\u03e6\275\u03e6\u03e6\u03e6!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!" + "'", str2, "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!");
    }

    @Test
    public void test11599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11599");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "null\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11600");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0146\u0144\u0143\u0143\u0146\u0144\u0143\u0143\u0146\u0144\u0143\u0143\u0146\u0144\u0143\u0143\u0146\u0144\u0143\u0143\u0146\u0144\u0143\u0143\u0146\u0144\u0143\u0143\u0146\u0144\u0143\u0143\u0146\u0144\u0143\u0143\u0146\u0144\u0143\u0143\u0146\u0144\u0143\u0143\u0146\u0144\u0143\u0143\u0146\u0144\u0143\u0143\u0146\u0144\u0143\u0143\u0146\u0144\u0143\u0143\u0146\u0144\u0143\u0143!!!", "}~\200\200}~\200\200n!nn^\214\214n!nn^\214\214}~\200\200}~\200\200n!nn^\214\214n!nn^\214\214!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!" + "'", str2, "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!");
    }

    @Test
    public void test11601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11601");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\215}\215\215\215}\215\215~LLL~LLL~LLL~LLL\215}\215\215\215}\215\215!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\215}\215\215\215}\215\215~nullnullnull~nullnullnull~nullnullnull~nullnullnull\215}\215\215\215}\215\215!" + "'", str2, "\215}\215\215\215}\215\215~nullnullnull~nullnullnull~nullnullnull~nullnullnull\215}\215\215\215}\215\215!");
    }

    @Test
    public void test11602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11602");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!oprroprroprroprr!", "\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198\u0198!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0199\u0199\u0199\u0199\u0199\u0199\u0199\u0199uu!" + "'", str2, "\u0199\u0199\u0199\u0199\u0199\u0199\u0199\u0199uu!");
    }

    @Test
    public void test11603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11603");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("~}\200\200~}\200\200U^UUU^UUU^UUU^UUU^UUU^UUU^UUU^UU\230\230U^UUU^UUU^UUU^UUU^UUU^UUU^UUU^UU\230\230~}\200\200~}\200\200U^UUU^UUU^UUU^UUU^UUU^UUU^UUU^UU\230\230U^UUU^UUU^UUU^UUU^UUU^UUU^UUU^UU\230\230~}\200\200~}\200\200U^UUU^UUU^UUU^UUU^UUU^UUU^UUU^UU\230\230U^UUU^UUU^UUU^UUU^UUU^UUU^UUU^UU\230\230~}\200\200~}\200\200U^UUU^UUU^UUU^UUU^UUU^UUU^UUU^UU\230\230U^UUU^UUU^UUU^UUU^UUU^UUU^UUU^UU\230\230~}\200\200~}\200\200U^UUU^UUU^UUU^UUU^UUU^UUU^UUU^UU\230\230U^UUU^UUU^UUU^UUU^UUU^UUU^UUU^UU\230\230~}\200\200~}\200\200U^UUU^UUU^UUU^UUU^UUU^UUU^UUU^UU\230\230U^UUU^UUU^UUU^UUU^UUU^UUU^UUU^UU\230\230~}\200\200~}\200\200U^UUU^UUU^UUU^UUU^UUU^UUU^UUU^UU\230\230U^UUU^UUU^UUU^UUU^UUU^UUU^UUU^UU\230\230~}\200\200~}\200\200U^UUU^UUU^UUU^UUU^UUU^UUU^UUU^UU\230\230U^UUU^UUU^UUU^UUU^UUU^UUU^UUU^UU\230\230!", "!\220!!!\220!!^^\225\230\230!\220!!!\220!!^^\225\230\230!\220!!!\220!!^^\225\230\230!\220!!!\220!!^^\225\230\230\200}}`!\220!!!\220!!^^\225\230\230!\220!!!\220!!^^\225\230\230!\220!!!\220!!^^\225\230\230!\220!!!\220!!^^\225\230\230]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230~}\200\200~}\200\200!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230~}\200\200~}\200\200!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230~}\200\200~}\200\200!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230~}\200\200~}\200\200!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230~}\200\200~}\200\200!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230~}\200\200~}\200\200!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230~}\200\200~}\200\200!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230!" + "'", str2, "~}\200\200~}\200\200!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230~}\200\200~}\200\200!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230~}\200\200~}\200\200!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230~}\200\200~}\200\200!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230~}\200\200~}\200\200!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230~}\200\200~}\200\200!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230~}\200\200~}\200\200!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230~}\200\200~}\200\200!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\230\230!");
    }

    @Test
    public void test11604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11604");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LL!", "\u026c\u026c\u026a\u026a\u026c\u026c\u026a\u026a\u026c\u026c\u026a\u026a\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026a\u026a\u026c\u026c\u026a\u026a\u026c\u026c\u026a\u026a\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c\u026c!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnull!" + "'", str2, "nullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnull!");
    }

    @Test
    public void test11605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11605");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!!", "LIIILIII!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!!" + "'", str2, "\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!\256\256\256\256\256\256\256\256!!!");
    }

    @Test
    public void test11606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11606");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0200\u01fd\u01fd\u0200\u01fd\u01fd\u0200\u01fd\u01fd\u0200\u01fd\u01fd\256\u0200\u01fd\u01fd\u0200\u01fd\u01fd\u0200\u01fd\u01fd\u0200\u01fd\u01fd\u0200\u01fd\u01fd\u0200\u01fd\u01fd\u0200\u01fd\u01fd\u0200\u01fd\u01fd\u0200\u01fd\u01fd\u0200\u01fd\u01fd\u0200\u01fd\u01fd\u0200\u01fd\u01fd!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200UNLLNUNLLUNLLUNLLNUNLLUNLL}~\200\200}~\200\200UNLLNUNLLUNLLUNLLNUNLLUNLL}~\200\200}~\200\200UNLLNUNLLUNLLUNLLNUNLLUNLL}~\200\200}~\200\200\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null!nullnullnull!nullnullnull!nullnullnull!nullnull\256null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!" + "'", str2, "null!nullnullnull!nullnullnull!nullnullnull!nullnull\256null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!");
    }

    @Test
    public void test11607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11607");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!!!!" + "'", str2, "nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!!!!!");
    }

    @Test
    public void test11608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11608");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("}L!!!\200\200}L!!!\200\200}L!!!\200\200}L!!!\200\200L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~}L!!!\200\200}L!!!\200\200}L!!!\200\200}L!!!\200\200L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~!", "!!!UU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}null!!!\200\200}null!!!\200\200}null!!!\200\200}null!!!\200\200null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~}null!!!\200\200}null!!!\200\200}null!!!\200\200}null!!!\200\200null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~!" + "'", str2, "}null!!!\200\200}null!!!\200\200}null!!!\200\200}null!!!\200\200null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~}null!!!\200\200}null!!!\200\200}null!!!\200\200}null!!!\200\200null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~!");
    }

    @Test
    public void test11609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11609");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]]LL]]LL!!]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LL!!]]LL]]LL]]LL]]LL]]LL]]LL!!]]LL]]LL!!]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LL!!]]LL]]LL]]LL]]LL]]LL]]LL!!]]LL]]LL!!]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LL!!]]LL]]LL]]LL]]LL]]LL]]LL!!]]LL]]LL!!]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LL!!]]LL]]LL]]LL]]LL]]LL]]LL!!]]LL]]LL!!]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LL!!]]LL]]LL]]LL]]LL]]LL]]LL!!]]LL]]LL!!]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LL!!]]LL]]LL]]LL]]LL]]LL]]LL!!]]LL]]LL!!]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LL!!]]LL]]LL]]LL]]LL]]LL]]LL!!]]LL]]LL!!]]LL]]LL]]LL]]LL]]LL]]LL]]LL]]LL!!]]LL]]LL]]LL]]LL]]LL]]LL!!!" + "'", str
    }

    @Test
    public void test11610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11610");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!!", "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!" + "'", str2, "nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!");
    }

    @Test
    public void test11611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11611");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("L!!!L!!!L!!!L!!!\200}}`L!!!L!!!L!!!L!!!]]!", "!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!!hhh!hhh!hhh!hhh!hhh!hhh!hhh!hhh!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null!!!null!!!null!!!null!!!\200}}`null!!!null!!!null!!!null!!!]]!" + "'", str2, "null!!!null!!!null!!!null!!!\200}}`null!!!null!!!null!!!null!!!]]!");
    }

    @Test
    public void test11612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11612");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!", "!!\256\276\275!!\254\254\256\276\275!!\254\254!!\256\276\275!!\254\254\256\276\275!!\254\254!!\256\276\275!!\254\254\256\276\275!!\254\254!!\256\276\275!!\254\254\256\276\275!!\254\254!!\256\276\275!!\254\254\256\276\275!!\254\254!!\256\276\275!!\254\254\256\276\275!!\254\254!!\256\276\275!!\254\254\256\276\275!!\254\254!!\256\276\275!!\254\254\256\276\275!!\254\254!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!" + "'", str2, "!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~!`~~~~!`~~!`~~~~!");
    }

    @Test
    public void test11613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11613");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!!!", "XXXXXXXXXXXXXXXX\200}}`XXXXXXXXXXXXXXXX]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!" + "'", str2, "!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!");
    }

    @Test
    public void test11614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11614");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!!lll!lll!lll!lll!!!", "\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014eLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!\244\244\244!\244\244\244!\244\244\244!\244\244\244!!!" + "'", str2, "!!!\244\244\244!\244\244\244!\244\244\244!\244\244\244!!!");
    }

    @Test
    public void test11615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11615");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!", "T!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TT!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!" + "'", str2, "!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!!!TTT!TTT!");
    }

    @Test
    public void test11616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11616");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" + "'", str2, "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    @Test
    public void test11617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11617");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0348l!!\200\u0348l!!]]!", "`OROOOROOOROO`OROOOROOOROO!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348o!!\200\u0348o!!]]!" + "'", str2, "\u0348o!!\200\u0348o!!]]!");
    }

    @Test
    public void test11618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11618");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}\200}}`!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}!}}}]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11619");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "!~XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX!~XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX!~XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX!~XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX!~XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX!~XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX!~XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX!~XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX!!!~XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX!~XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX!~XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX!~XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX!~XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX!~XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX!~XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX!~XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test11620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11620");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!!", "\253\254\256\256!!!!!!!!!!!!!!!!!!!!!!!!\253\254\256\256!!!!!!!!!!!!!!!!!!!!!!!!!!\253\254\256\256!!!!!!!!!!!!!!!!!!!!!!!!\253\254\256\256!!!!!!!!!!!!!!!!!!!!!!!!!!\253\254\256\256!!!!!!!!!!!!!!!!!!!!!!!!\253\254\256\256!!!!!!!!!!!!!!!!!!!!!!!!!!\253\254\256\256!!!!!!!!!!!!!!!!!!!!!!!!\253\254\256\256!!!!!!!!!!!!!!!!!!!!!!!!!!\253\254\256\256!!!!!!!!!!!!!!!!!!!!!!!!\253\254\256\256!!!!!!!!!!!!!!!!!!!!!!!!!!\253\254\256\256!!!!!!!!!!!!!!!!!!!!!!!!\253\254\256\256!!!!!!!!!!!!!!!!!!!!!!!!!!\253\254\256\256!!!!!!!!!!!!!!!!!!!!!!!!\253\254\256\256!!!!!!!!!!!!!!!!!!!!!!!!!!\253\254\256\256!!!!!!!!!!!!!!!!!!!!!!!!\253\254\256\256!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!!" + "'", str2, "\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!\256\256!!!");
    }

    @Test
    public void test11621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11621");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("`\253```\253\u035e\u035e`\253```\253\u035e\u035e!!!!`\253```\253\u035e\u035e`\253```\253\u035e\u035e!", "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`\253```\253\u035e\u035e`\253```\253\u035e\u035e!!!!`\253```\253\u035e\u035e`\253```\253\u035e\u035e!" + "'", str2, "`\253```\253\u035e\u035e`\253```\253\u035e\u035e!!!!`\253```\253\u035e\u035e`\253```\253\u035e\u035e!");
    }

    @Test
    public void test11622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11622");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("rrrr\236\276\276rrrr\236\276\276!!rrrr\236\276\276rrrr\236\276\276!!rrrr\236\276\276rrrr\236\276\276rrrr\236\276\276rrrr\236\276\276!!rrrr\236\276\276rrrr\236\276\276!!rrrr\236\276\276rrrr\236\276\276!", "\246\250\250\250\246\250\250\250!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276!" + "'", str2, "nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276!");
    }

    @Test
    public void test11623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11623");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!" + "'", str2, "\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!");
    }

    @Test
    public void test11624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11624");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\220\220\216\216\220\220\216\216ss]]ss]]ss]]ss]]ss]]ss]]ss]]ss]]\220\220\216\216\220\220\216\216ss]]ss]]ss]]ss]]ss]]ss]]ss]]ss]]\220\220\216\216\220\220\216\216ss]]ss]]ss]]ss]]ss]]ss]]ss]]ss]]\220\220\216\216\220\220\216\216ss]]ss]]ss]]ss]]ss]]ss]]ss]]ss]]\220\220\216\216\220\220\216\216ss]]ss]]ss]]ss]]ss]]ss]]ss]]ss]]\220\220\216\216\220\220\216\216ss]]ss]]ss]]ss]]ss]]ss]]ss]]ss]]\220\220\216\216\220\220\216\216ss]]ss]]ss]]ss]]ss]]ss]]ss]]ss]]\220\220\216\216\220\220\216\216ss]]ss]]ss]]ss]]ss]]ss]]ss]]ss]]!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]!" + "'", str2, "\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]!");
    }

    @Test
    public void test11625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11625");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("~\200}}~\200}}~\200}}~\200}}UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL~\200}}~\200}}~\200}}~\200}}UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!", "!~HH!~HH!!!~HH!~HH!!!~HH!~HH!~HH!~HH!!!~HH!~HH!!!~HH!~HH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~\200}}~\200}}~\200}}~\200}}!H~~!H~~!H~~!H~~!H~~!H~~!H~~!H~~!H~~!H~~!H~~!H~~!H~~!H~~!H~~!H~~~\200}}~\200}}~\200}}~\200}}!H~~!H~~!H~~!H~~!H~~!H~~!H~~!H~~!" + "'", str2, "~\200}}~\200}}~\200}}~\200}}!H~~!H~~!H~~!H~~!H~~!H~~!H~~!H~~!H~~!H~~!H~~!H~~!H~~!H~~!H~~!H~~~\200}}~\200}}~\200}}~\200}}!H~~!H~~!H~~!H~~!H~~!H~~!H~~!H~~!");
    }

    @Test
    public void test11626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11626");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264!!!", "nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0nullnull!!!" + "'", str2, "\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0\u02dd\u02de\u02e0\u02e0nullnull!!!");
    }

    @Test
    public void test11627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11627");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253!" + "'", str2, "nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253!nullnull\253\253nullnull\253\253nullnull\253\253!");
    }

    @Test
    public void test11628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11628");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!", "\200```\200`````\200```\200`````\200```\200`````\200```\200`````\200```\200`````\200```\200`````\200```\200`````\200```\200`````!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!" + "'", str2, "\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!!\236\237\241\241~\236\237\241\241\236\237\241\241\236\237\241\241~\236\237\241\241\236\237\241\241!");
    }

    @Test
    public void test11629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11629");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\275\u01ae\u01ad\u01b0\u01b0\u01ae\u01ad\u01b0\u01b0\u01ae\u01ad\u01b0\u01b0\276\u01ae\u01ad\u01b0\u01b0\275\275!", "!LNN!LNN!!!LNN!LNN!!!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!!!LNN!LNN!!!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!!!LNN!LNN!!!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!!!LNN!LNN!!!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!!!LNN!LNN!!!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!!!LNN!LNN!!!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!!!LNN!LNN!!!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!!!LNN!LNN!!!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275L!NNL!NNL!NN\276L!NN\275\275!" + "'", str2, "\275L!NNL!NNL!NN\276L!NN\275\275!");
    }

    @Test
    public void test11630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11630");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!", "]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]]}]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!" + "'", str2, "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!");
    }

    @Test
    public void test11631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11631");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!", "!X!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11632");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!!", "LNLLLNLL!!LNLLLNLL!!LNLLLNLL!!LNLLLNLL!!LNLLLNLL!!LNLLLNLL!!LNLLLNLL!!LNLLLNLL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!!" + "'", str2, "~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!!");
    }

    @Test
    public void test11633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11633");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!\227!!!!!!!!!!!!\227!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!\227!!!!!!!!!!!!\227!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!\227!!!!!!!!!!!!!!!!!!!!!!!!!" + "'", str
    }

    @Test
    public void test11634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11634");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!}}}}}}}}!!}}}}}}}}!!}}}}}}}}!!}}}}}}}}!!}}}}}}}}!!}}}}}}}}!!}}}}}}}}!!}}}}}}}}!", "\276X\266\266~XX\276X\266\266~XX!!\276X\266\266~XX\276X\266\266~XX!!\276X\266\266~XX\276X\266\266~XX\276X\266\266~XX\276X\266\266~XX!!\276X\266\266~XX\276X\266\266~XX!!\276X\266\266~XX\276X\266\266~XX!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!}}}}}}}}!!}}}}}}}}!!}}}}}}}}!!}}}}}}}}!!}}}}}}}}!!}}}}}}}}!!}}}}}}}}!!}}}}}}}}!" + "'", str2, "!!}}}}}}}}!!}}}}}}}}!!}}}}}}}}!!}}}}}}}}!!}}}}}}}}!!}}}}}}}}!!}}}}}}}}!!}}}}}}}}!");
    }

    @Test
    public void test11635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11635");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullijllijllijllijllnullnullnullnullijllijll!", "nullnull!uuu!uuunullnull!uuu!uuunullnullnullnull!uuu!uuunullnull!uuu!uuunullnullnullnull!uuu!uuunullnull!uuu!uuunullnullnullnull!uuu!uuunullnull!uuu!uuunullnullnullnull!uuu!uuunullnull!uuu!uuunullnullnullnull!uuu!uuunullnull!uuu!uuunullnullnullnull!uuu!uuunullnull!uuu!uuunullnullnullnull!uuu!uuunullnull!uuu!uuunullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "U!LLU!LLU!LLU!LLNULLNULLNULLNULLU!LLU!LLU!LLU!LLNULLNULL!" + "'", str2, "U!LLU!LLU!LLU!LLNULLNULLNULLNULLU!LLU!LLU!LLU!LLNULLNULL!");
    }

    @Test
    public void test11636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11636");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\201\202\204\204nullnullnull\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204nullnullnull\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200nullnullnullnull\214nullnullnullnullnullnullnullnullnullnullnullnull\214nullnullnullnullnullnullnullnull}~\200\200}~\200\200nullnullnullnull\214nullnullnullnullnullnullnullnullnullnullnullnull\214nullnullnullnullnullnullnullnull}~\200\200}~\200\200nullnullnullnull\214nullnullnullnullnullnullnullnullnullnullnullnull\214nullnullnullnullnullnullnullnull}~\200\200}~\200\200nullnullnullnull\214nullnullnullnullnullnullnullnullnullnullnullnull\214\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\201\202\204\204\u0209\u020a\u020c\u020c\u0209\u020a\u020c\u020c\u0209\u020a\u020c\u020c\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\u0209\u020a\u020c\u020c\u0209\u020a\u020c\u020c\u0209\u020a\u020c\u020c\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204!" + "'", str2, "\201\202\204\204\u0209\u020a\u020c\u020c\u0209\u020a\u020c\u020c\u0209\u020a\u020c\u020c\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\u0209\u020a\u020c\u020c\u0209\u020a\u020c\u020c\u0209\u020a\u020c\u020c\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204\201\202\204\204!");
    }

    @Test
    public void test11637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11637");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("L\200LLLLLL\200LLLLLL\200LLLLLL\200LLLLLL\200LLLLLL\200LLLLLL\200LLLLLL\200LLLLL!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!nullnullnull!nullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u010e\200\u010e\u010e\u010e\u010e\u010e\u010e\200\u010e\u010e\u010e\u010e\u010e\u010e\200\u010e\u010e\u010e\u010e\u010e\u010e\200\u010e\u010e\u010e\u010e\u010e\u010e\200\u010e\u010e\u010e\u010e\u010e\u010e\200\u010e\u010e\u010e\u010e\u010e\u010e\200\u010e\u010e\u010e\u010e\u010e\u010e\200\u010e\u010e\u010e\u010e\u010e!" + "'", str2, "\u010e\200\u010e\u010e\u010e\u010e\u010e\u010e\200\u010e\u010e\u010e\u010e\u010e\u010e\200\u010e\u010e\u010e\u010e\u010e\u010e\200\u010e\u010e\u010e\u010e\u010e\u010e\200\u010e\u010e\u010e\u010e\u010e\u010e\200\u010e\u010e\u010e\u010e\u010e\u010e\200\u010e\u010e\u010e\u010e\u010e\u010e\200\u010e\u010e\u010e\u010e\u010e!");
    }

    @Test
    public void test11638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11638");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!", "\270UU!!\270\270\270UU!!\270\270!!\270UU!!\270\270\270UU!!\270\270!!\270UU!!\270\270\270UU!!\270\270!!\270UU!!\270\270\270UU!!\270\270!!\270UU!!\270\270\270UU!!\270\270!!\270UU!!\270\270\270UU!!\270\270!!\270UU!!\270\270\270UU!!\270\270!!\270UU!!\270\270\270UU!!\270\270!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!" + "'", str2, "!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!\254\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!!!!!!!");
    }

    @Test
    public void test11639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11639");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnull!!nullnull!!!!``nullnull!!nullnull!!``nullnull!!nullnull!!``nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!``nullnull!!nullnull!!``nullnull!!nullnull!!``nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!", "`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull`nullnullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "U`LLU`LL!!U`LLU`LL!!!!``U`LLU`LL!!U`LLU`LL!!``U`LLU`LL!!U`LLU`LL!!``U`LLU`LL!!U`LLU`LL!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!``U`LLU`LL!!U`LLU`LL!!``U`LLU`LL!!U`LLU`LL!!``U`LLU`LL!!U`LLU`LL!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!!" + "'", str2, "U`LLU`LL!!U`LLU`LL!!!!``U`LLU`LL!!U`LLU`LL!!``U`LLU`LL!!U`LLU`LL!!``U`LLU`LL!!U`LLU`LL!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!``U`LLU`LL!!U`LLU`LL!!``U`LLU`LL!!U`LLU`LL!!``U`LLU`LL!!U`LLU`LL!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!U`LLU`LL!!U`LLU`LL!!!!!");
    }

    @Test
    public void test11640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11640");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u010d\u010e\u0110\u0110\u0346\u0348\u0348!", "\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368!!!!!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test11641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11641");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\201!!!\201!!!!" + "'", str2, "\201!!!\201!!!!");
    }

    @Test
    public void test11642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11642");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348}~\200\200}~\200\200\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016enullnullnull}~\200\200}~\200\200\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016enullnullnull}~\200\200}~\200\200\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016enullnullnull}~\200\200}~\200\200\u016b\u016c\u016e\u016e\u016b\u016c\u016e\u016e\u0348\u0346\u
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348}~\200\200}~\200\200\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308}~\200\200}~\200\200\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308}~\200\200}~\200\200\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308}~\200\200}~\200\200\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348}~\200\200}~\200\200\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308}~\200\200}~\200\200\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308}~\200\200}~\200\200\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308}~\200\200}~\200\200\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0306\u0308\u0308\u0348\u0346\u0346!");
    }

    @Test
    public void test11643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11643");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\311\314\314\314\311\314\314\314\311\314\314\314\311\314\314\314\311\314\314\314\311\314\314\314\311\314\314\314\311\314\314\314!", "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "XUUUXUUUXUUUXUUUXUUUXUUUXUUUXUUU!" + "'", str2, "XUUUXUUUXUUUXUUUXUUUXUUUXUUUXUUU!");
    }

    @Test
    public void test11644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11644");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("FF]]FF]]FF]]FF]]~}}^FF]]FF]]FF]]FF]]]]!", "}^LL}^LL}^LL}^LL}^LL}^LL}^LL}^LL!!}^LL}^LL}^LL}^LL}^LL}^LL}^LL}^LL!!}^LL}^LL}^LL}^LL}^LL}^LL}^LL}^LL!!}^LL}^LL}^LL}^LL}^LL}^LL}^LL}^LL!!}^LL}^LL}^LL}^LL}^LL}^LL}^LL}^LL!!}^LL}^LL}^LL}^LL}^LL}^LL}^LL}^LL!!}^LL}^LL}^LL}^LL}^LL}^LL}^LL}^LL!!}^LL}^LL}^LL}^LL}^LL}^LL}^LL}^LL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^^]]^^]]^^]]^^]]~}}^^^]]^^]]^^]]^^]]]]!" + "'", str2, "^^]]^^]]^^]]^^]]~}}^^^]]^^]]^^]]^^]]]]!");
    }

    @Test
    public void test11645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11645");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u01e8\u01e6\u01e6\u01e8\u01e6\u01e6\u01e8\u01e6\u01e6\u01e8\u01e6\u01e6\u01e8\u01e6\u01e6\u01e8\u01e6\u01e6\u01e8\u01e6\u01e6\u01e8\u01e6\u01e6\u01e8\u01e6\u01e6\u01e8\u01e6\u01e6\u01e8\u01e6\u01e6\u01e8\u01e6\u01e6\u01e8\u01e6\u01e6\u01e8\u01e6\u01e6\u01e8\u01e6\u01e6\u01e8\u01e6\u01e6nullnullnullnullnullnullnullnull!", "!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL\200}}`!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264!" + "'", str2, "\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264\u0264!");
    }

    @Test
    public void test11646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11646");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!", "NNNNNNNNNNNNNNNNNNNNNNNN!!!!NNNNNNNNNNNNNNNNNNNNNNNN!!!!!!NNNNNNNNNNNNNNNNNNNNNNNN!!!!NNNNNNNNNNNNNNNNNNNNNNNN!!!!!!NNNNNNNNNNNNNNNNNNNNNNNN!!!!NNNNNNNNNNNNNNNNNNNNNNNN!!!!!!NNNNNNNNNNNNNNNNNNNNNNNN!!!!NNNNNNNNNNNNNNNNNNNNNNNN!!!!!!NNNNNNNNNNNNNNNNNNNNNNNN!!!!NNNNNNNNNNNNNNNNNNNNNNNN!!!!!!NNNNNNNNNNNNNNNNNNNNNNNN!!!!NNNNNNNNNNNNNNNNNNNNNNNN!!!!!!NNNNNNNNNNNNNNNNNNNNNNNN!!!!NNNNNNNNNNNNNNNNNNNNNNNN!!!!!!NNNNNNNNNNNNNNNNNNNNNNNN!!!!NNNNNNNNNNNNNNNNNNNNNNNN!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!" + "'", str2, "!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!!~!!!~!!!~!!!");
    }

    @Test
    public void test11647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11647");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\276!\276\276nullnullnull\276!\276\276nullnullnull!!\276!\276\276nullnullnull\276!\276\276nullnullnull!!\200\200\u0346\u0348\u0348!", "^```^```^```^```^```^```^```^```^```^```\230null\226\226\230null\226\226^```^```\230null\226\226\230null\226\226^```^```^```^```^```^```^```^```^```^```\230null\226\226\230null\226\226^```^```\230null\226\226\230null\226\226^```^```^```^```^```^```^```^```^```^```\230null\226\226\230null\226\226^```^```\230null\226\226\230null\226\226^```^```^```^```^```^```^```^```^```^```\230null\226\226\230null\226\226^```^```\230null\226\226\230null\226\226^```^```^```^```^```^```^```^```^```^```\230null\226\226\230null\226\226^```^```\230null\226\226\230null\226\226^```^```^```^```^```^```^```^```^```^```\230null\226\226\230null\226\226^```^```\230null\226\226\230null\226\226^```^```^```^```^```^```^```^```^```^```\230null\226\226\230null\226\226^```^```\230null\226\226\230null\226\226^```^```^```^```^```^```^```^```^```^```\230null\226\226\230null\226\226^```^```\230null\226\226\230null\226\226!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\276!\276\276\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\276!\276\276\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be!!\276!\276\276\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\276!\276\276\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be!!\200\200\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\276!\276\276\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\276!\276\276\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be!!\276!\276\276\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\276!\276\276\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be!!\200\200\u0346\u0348\u0348!");
    }

    @Test
    public void test11648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11648");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u017d\u017d\u017d\u017d\260\255\255\225\230\230\u017d\u017d\u017d\u017d\260\255\255\225\230\230\u017d\u017d\u017d\u017d\260\255\255\225\230\230\u017d\u017d\u017d\u017d\260\255\255\225\230\230\200\u017d\u017d\u017d\u017d\260\255\255\225\230\230\u017d\u017d\u017d\u017d\260\255\255\225\230\230\u017d\u017d\u017d\u017d\260\255\255\225\230\230\u017d\u017d\u017d\u017d\260\255\255\225\230\230]]!", "\275\u0366\u0366nullnull\200\200\u0366\u0366nullnull\200\200\u0366\u0366nullnull\200\200\276\u0366\u0366nullnull\200\200\275\275!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull\260\255\255\225\230\230nullnullnullnull\260\255\255\225\230\230nullnullnullnull\260\255\255\225\230\230nullnullnullnull\260\255\255\225\230\230\200}}`nullnullnullnull\260\255\255\225\230\230nullnullnullnull\260\255\255\225\230\230nullnullnullnull\260\255\255\225\230\230nullnullnullnull\260\255\255\225\230\230]]!" + "'", str2, "nullnullnullnull\260\255\255\225\230\230nullnullnullnull\260\255\255\225\230\230nullnullnullnull\260\255\255\225\230\230nullnullnullnull\260\255\255\225\230\230\200}}`nullnullnullnull\260\255\255\225\230\230nullnullnullnull\260\255\255\225\230\230nullnullnullnull\260\255\255\225\230\230nullnullnullnull\260\255\255\225\230\230]]!");
    }

    @Test
    public void test11649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11649");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~NLLLNLLL!!NLLL~~!", "\ua7ad\ua7ad\ua7ad\ua7ad\200\ua7ad\ua7ad\ua7ad\ua7ad]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!!nullnullnullnull~~nullnullnullnullnullnullnullnull!!nullnullnullnull~~nullnullnullnullnullnullnullnull!!nullnullnullnull~~nullnullnullnullnullnullnullnull!!nullnullnullnull~~nullnullnullnullnullnullnullnull!!nullnullnullnull~~nullnullnullnullnullnullnullnull!!nullnullnullnull~~nullnullnullnullnullnullnullnull!!nullnullnullnull~~nullnullnullnullnullnullnullnull!!nullnullnullnull~~!" + "'", str2, "nullnullnullnullnullnullnullnull!!nullnullnullnull~~nullnullnullnullnullnullnullnull!!nullnullnullnull~~nullnullnullnullnullnullnullnull!!nullnullnullnull~~nullnullnullnullnullnullnullnull!!nullnullnullnull~~nullnullnullnullnullnullnullnull!!nullnullnullnull~~nullnullnullnullnullnullnullnull!!nullnullnullnull~~nullnullnullnullnullnullnullnull!!nullnullnullnull~~nullnullnullnullnullnullnullnull!!nullnullnullnull~~!");
    }

    @Test
    public void test11650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11650");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\276\276nullnull\276\276nullnull!!\276\276nullnull\276\276nullnull!!\276\276nullnull\276\276nullnull\276\276nullnull\276\276nullnull!!\276\276nullnull\276\276nullnull!!\276\276nullnull\276\276nullnull!", "``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU!!``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU!!``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU!!``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU!!``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276\276\u0368\u0368nullnull\276\276\u0368\u0368nullnull!!\276\276\u0368\u0368nullnull\276\276\u0368\u0368nullnull!!\276\276\u0368\u0368nullnull\276\276\u0368\u0368nullnull\276\276\u0368\u0368nullnull\276\276\u0368\u0368nullnull!!\276\276\u0368\u0368nullnull\276\276\u0368\u0368nullnull!!\276\276\u0368\u0368nullnull\276\276\u0368\u0368nullnull!" + "'", str2, "\276\276\u0368\u0368nullnull\276\276\u0368\u0368nullnull!!\276\276\u0368\u0368nullnull\276\276\u0368\u0368nullnull!!\276\276\u0368\u0368nullnull\276\276\u0368\u0368nullnull\276\276\u0368\u0368nullnull\276\276\u0368\u0368nullnull!!\276\276\u0368\u0368nullnull\276\276\u0368\u0368nullnull!!\276\276\u0368\u0368nullnull\276\276\u0368\u0368nullnull!");
    }

    @Test
    public void test11651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11651");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!", "`null]nullnullnull]nullnullnull]nullnull`null]nullnullnull]nullnullnull]nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL!" + "'", str2, "]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL]LLL!");
    }

    @Test
    public void test11652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11652");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368null\213\213\213\u0346\u0348\u0348!", "\230\226nullnull\236\276\276\230\226nullnull\236\276\276!!\230\226nullnull\236\276\276\230\226nullnull\236\276\276!!\230\226nullnull\236\276\276\230\226nullnull\236\276\276\230\226nullnull\236\276\276\230\226nullnull\236\276\276!!\230\226nullnull\236\276\276\230\226nullnull\236\276\276!!\230\226nullnull\236\276\276\230\226nullnull\236\276\276!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\376\377\u0101\u0101\213\213\213\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\376\377\u0101\u0101\213\213\213\u0346\u0348\u0348!");
    }

    @Test
    public void test11653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11653");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!\200}}`nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!]]!", "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~!!\200\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~!!]]!" + "'", str2, "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~!!\200\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~!!]]!");
    }

    @Test
    public void test11654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11654");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\200\u0348\u0348\200\u0348\u0348!!\200\u0348\u0348\200\u0348\u0348!!\200\u0348\u0348\200\u0348\u0348\200\u0348\u0348\200\u0348\u0348!!\200\u0348\u0348\200\u0348\u0348!!\200\u0348\u0348\200\u0348\u0348!", "LUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUU\200}}`LUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUU]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200\u0348\u0348\200\u0348\u0348!!\200\u0348\u0348\200\u0348\u0348!!\200\u0348\u0348\200\u0348\u0348\200\u0348\u0348\200\u0348\u0348!!\200\u0348\u0348\200\u0348\u0348!!\200\u0348\u0348\200\u0348\u0348!" + "'", str2, "\200\u0348\u0348\200\u0348\u0348!!\200\u0348\u0348\200\u0348\u0348!!\200\u0348\u0348\200\u0348\u0348\200\u0348\u0348\200\u0348\u0348!!\200\u0348\u0348\200\u0348\u0348!!\200\u0348\u0348\200\u0348\u0348!");
    }

    @Test
    public void test11655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11655");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d\u019d!", "");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!" + "'", str2, "!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!");
    }

    @Test
    public void test11656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11656");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!", "l!nnl!nnl!nnl!nnl!nnl!nnl!nnl!nn!!l!nnl!nnl!nnl!nnl!nnl!nnl!nnl!nn!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!\242null\237\237\242null\237\237!!\242null\237\237\242null\237\237!!!!\242null\237\237\242null\237\237!!\242null\237\237\242null\237\237!!!!\242null\237\237\242null\237\237!!\242null\237\237\242null\237\237!!!!\242null\237\237\242null\237\237!!\242null\237\237\242null\237\237!!!!\242null\237\237\242null\237\237!!\242null\237\237\242null\237\237!!!!\242null\237\237\242null\237\237!!\242null\237\237\242null\237\237!!!!\242null\237\237\242null\237\237!!\242null\237\237\242null\237\237!!!!\242null\237\237\242null\237\237!!\242null\237\237\242null\237\237!" + "'", str2, "!!!!\242null\237\237\242null\237\237!!\242null\237\237\242null\237\237!!!!\242null\237\237\242null\237\237!!\242null\237\237\242null\237\237!!!!\242null\237\237\242null\237\237!!\242null\237\237\242null\237\237!!!!\242null\237\237\242null\237\237!!\242null\237\237\242null\237\237!!!!\242null\237\237\242null\237\237!!\242null\237\237\242null\237\237!!!!\242null\237\237\242null\237\237!!\242null\237\237\242null\237\237!!!!\242null\237\237\242null\237\237!!\242null\237\237\242null\237\237!!!!\242null\237\237\242null\237\237!!\242null\237\237\242null\237\237!");
    }

    @Test
    public void test11657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11657");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("N!LLL!LLL!LLLN!LLL!LLL!LLLN!LLL!LLL!LLLN!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLLN!LLL!LLL!LLLN!LLL!LLL!LLLN!LLL!LLL!LLLN!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!", "!!!LL!!LL!!LL!!LL!!!!!LL!!LL!!LL!!LL!!!!!!!LL!!LL!!LL!!LL!!!!!LL!!LL!!LL!!LL!!!!!!!LL!!LL!!LL!!LL!!!!!LL!!LL!!LL!!LL!!!!!!!LL!!LL!!LL!!LL!!!!!LL!!LL!!LL!!LL!!!!!!!LL!!LL!!LL!!LL!!!!!LL!!LL!!LL!!LL!!!!!!!LL!!LL!!LL!!LL!!!!!LL!!LL!!LL!!LL!!!!!!!LL!!LL!!LL!!LL!!!!!LL!!LL!!LL!!LL!!!!!!!LL!!LL!!LL!!LL!!!!!LL!!LL!!LL!!LL!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!LLL!LLL!LLL!!LLL!LLL!LLL!!LLL!LLL!LLL!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!LLL!LLL!LLL!!LLL!LLL!LLL!!LLL!LLL!LLL!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!" + "'", str2, "!!LLL!LLL!LLL!!LLL!LLL!LLL!!LLL!LLL!LLL!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!LLL!LLL!LLL!!LLL!LLL!LLL!!LLL!LLL!LLL!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!");
    }

    @Test
    public void test11658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11658");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("null~\352null\354\354\352null\354\354null~\352null\354\354\352null\354\354!!null~\352null\354\354\352null\354\354null~\352null\354\354\352null\354\354!!null~\352null\354\354\352null\354\354null~\352null\354\354\352null\354\354null~\352null\354\354\352null\354\354null~\352null\354\354\352null\354\354!!null~\352null\354\354\352null\354\354null~\352null\354\354\352null\354\354!!null~\352null\354\354\352null\354\354null~\352null\354\354\352null\354\354!", "!````!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11659");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0129\u0129\u0129\u0129\u0146\u0147\u0149\u0149\u0146\u0147\u0149\u0149\u0146\u0147\u0149\u0149\u0146\u0147\u0149\u0149\u0129\u0129\u0129\u0129\u0146\u0147\u0149\u0149\u0146\u0147\u0149\u0149!", "\275\u010c\u010c\275\u010c\u010c!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11660");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("UALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAA!", "null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\220N\213\213\220N\213\213NNNNNNNN\220N\213\213\220N\213\213NNNNNNNN\220N\213\213\220N\213\213NNNNNNNN\220N\213\213\220N\213\213NNNNNNNN\220N\213\213\220N\213\213NNNNNNNN\220N\213\213\220N\213\213NNNNNNNN\220N\213\213\220N\213\213NNNNNNNN\220N\213\213\220N\213\213NNNNNNNN!" + "'", str2, "\220N\213\213\220N\213\213NNNNNNNN\220N\213\213\220N\213\213NNNNNNNN\220N\213\213\220N\213\213NNNNNNNN\220N\213\213\220N\213\213NNNNNNNN\220N\213\213\220N\213\213NNNNNNNN\220N\213\213\220N\213\213NNNNNNNN\220N\213\213\220N\213\213NNNNNNNN\220N\213\213\220N\213\213NNNNNNNN!");
    }

    @Test
    public void test11661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11661");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u0132\u
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\226]\226\226\226]\226\226!!\226]\226\226\226]\226\226!!\226]\226\226\226]\226\226\226]\226\226\226]\226\226!!\226]\226\226\226]\226\226!!\226]\226\226\226]\226\226!" + "'", str2, "\226]\226\226\226]\226\226!!\226]\226\226\226]\226\226!!\226]\226\226\226]\226\226\226]\226\226\226]\226\226!!\226]\226\226\226]\226\226!!\226]\226\226\226]\226\226!");
    }

    @Test
    public void test11662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11662");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("UNLL\275\275\275UNLL\275\275\275!!UNLL\275\275\275UNLL\275\275\275!!UNLL\275\275\275UNLL\275\275\275UNLL\275\275\275UNLL\275\275\275!!UNLL\275\275\275UNLL\275\275\275!!UNLL\275\275\275UNLL\275\275\275!", "\220H~~\220H~~!!``\220H~~\220H~~``\220H~~\220H~~``\220H~~\220H~~\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!``\220H~~\220H~~``\220H~~\220H~~``\220H~~\220H~~\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!\220H~~\220H~~!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull\275\275\275nullnullnullnull\275\275\275!!nullnullnullnull\275\275\275nullnullnullnull\275\275\275!!nullnullnullnull\275\275\275nullnullnullnull\275\275\275nullnullnullnull\275\275\275nullnullnullnull\275\275\275!!nullnullnullnull\275\275\275nullnullnullnull\275\275\275!!nullnullnullnull\275\275\275nullnullnullnull\275\275\275!" + "'", str2, "nullnullnullnull\275\275\275nullnullnullnull\275\275\275!!nullnullnullnull\275\275\275nullnullnullnull\275\275\275!!nullnullnullnull\275\275\275nullnullnullnull\275\275\275nullnullnullnull\275\275\275nullnullnullnull\275\275\275!!nullnullnullnull\275\275\275nullnullnullnull\275\275\275!!nullnullnullnull\275\275\275nullnullnullnull\275\275\275!");
    }

    @Test
    public void test11663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11663");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\215}\215\215\215}\215\215NLLLNLLLNLLLNLLL\215}\215\215\215}
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\215}\215\215\215}\215\215\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\215}\215\215\215}\215\215!" + "'", str2, "\215}\215\215\215}\215\215\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\215}\215\215\215}\215\215!");
    }

    @Test
    public void test11664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11664");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("]]]]]]]]!!]]]]]]]]!!!", "LLUULLUU!!``LLUULLUU``LLUULLUU``LLUULLUULLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!``LLUULLUU``LLUULLUU``LLUULLUULLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]]]]]]]]!!]]]]]]]]!!!" + "'", str2, "]]]]]]]]!!]]]]]]]]!!!");
    }

    @Test
    public void test11665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11665");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da!", "\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016e\u016c\u016b\u016e\u016enullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da!" + "'", str2, "\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02d7\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da!");
    }

    @Test
    public void test11666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11666");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\276\276\u016c\u016c\u016c\u016cLL\276\u016c\u016c\u016c\u016c\u016c\u016cLL\276\u016c\u016cLL\276\276\u016c\u016c\u016c\u016cLL\276\u016c\u016c\u016c\u016c\u016c\u016cLL\276\u016c\u016cLL\276\276\u016c\u016c\u016c\u016cLL\276\u016c\u016c\u016c\u016c\u016c\u016cLL\276\u016c\u016cLL\276\276\u016c\u016c\u016c\u016cLL\276\u016c\u016c\u016c\u016c\u016c\u016cLL\276\u016c\u016cLL\276\276\u016c\u016c\u016c\u016cLL\276\u016c\u016c\u016c\u016c\u016c\u016cLL\276\u016c\u016cLL\276\276\u016c\u016c\u016c\u016cLL\276\u016c\u016c\u016c\u016c\u016c\u016cLL\276\u016c\u016cLL\276\276\u016c\u016c\u016c\u016cLL\276\u016c\u016c\u016c\u016c\u016c\u016cLL\276\u016c\u016cLL\276\276\u016c\u016c\u016c\u016cLL\276\u016c\u016c\u016c\u016c\u016c\u016cLL\276\u016c\u016cLL!", "oprroprr!!oprroprr!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276\276!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP\276\276!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP\276\276!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP\276\276!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP\276\276!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP\276\276!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP\276\276!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP\276\276!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP!" + "'", str2, "\276\276!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP\276\276!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP\276\276!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP\276\276!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP\276\276!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP\276\276!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP\276\276!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP\276\276!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP!nullPP!nullPP!nullPP!nullPP\276!nullPP!nullPP!");
    }

    @Test
    public void test11667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11667");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL!", "null\276\300\300\300null\276\276\300null\276\276\300null\276\276\300null\276\276null\276\300\300\300null\276\276\300null\276\276!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL!" + "'", str2, "\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL\275\276LL!");
    }

    @Test
    public void test11668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11668");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\275\300\300\300\275\300\300\300!", "\275L!NNL!NNL!NN\276L!NN\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275nullnullnull\275nullnullnull!" + "'", str2, "\275nullnullnull\275nullnullnull!");
    }

    @Test
    public void test11669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11669");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!", "}~\200\200}~\200\200!NULLLNNNULLLNNNULLLNN!NULLLNNNULLLNNNULLLNN!NULLLNNNULLLNNNULLLNN!NULLLNNNULLLNNNULLLNN!NULLLNNNULLLNNNULLLNN!NULLLNNNULLLNNNULLLNN!NULLLNNNULLLNNNULLLNN!NULLLNNNULLLNNNULLLNN}~\200\200}~\200\200!NULLLNNNULLLNNNULLLNN!NULLLNNNULLLNNNULLLNN!NULLLNNNULLLNNNULLLNN!NULLLNNNULLLNNNULLLNN!NULLLNNNULLLNNNULLLNN!NULLLNNNULLLNNNULLLNN!NULLLNNNULLLNNNULLLNN!NULLLNNNULLLNNNULLLNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!N!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NN!" + "'", str2, "!!!N!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NN!");
    }

    @Test
    public void test11670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11670");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e!", "!!!L!LLL!LL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031anullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031anullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11671");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!", "null\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnull}null\200\200}null\200\200}null\200\200}null\200\200}null\200\200}null\200\200}null\200\200}null\200\200null\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnull}null\200\200}null\200\200}null\200\200}null\200\200}null\200\200}null\200\200}null\200\200}null\200\200!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\275\u0346!!\275\u0346!!\275\u0346!!!\275\u0346!!\275\u0346!!\275\u0346!!!!!\275\u0346!!\275\u0346!!\275\u0346!!!\275\u0346!!\275\u0346!!\275\u0346!!!!!\275\u0346!!\275\u0346!!\275\u0346!!!\275\u0346!!\275\u0346!!\275\u0346!!!!!\275\u0346!!\275\u0346!!\275\u0346!!!\275\u0346!!\275\u0346!!\275\u0346\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!\275\u0346!!\275\u0346!!\275\u0346!!!\275\u0346!!\275\u0346!!\275\u0346!!!!!\275\u0346!!\275\u0346!!\275\u0346!!!\275\u0346!!\275\u0346!!\275\u0346!!!!!\275\u0346!!\275\u0346!!\275\u0346!!!\275\u0346!!\275\u0346!!\275\u0346!!!!!\275\u0346!!\275\u0346!!\275\u0346!!!\275\u0346!!\275\u0346!!\275\u0346\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!" + "'", str2, "!\275\u0346!!\275\u0346!!\275\u0346!!!\275\u0346!!\275\u0346!!\275\u0346!!!!!\275\u0346!!\275\u0346!!\275\u0346!!!\275\u0346!!\275\u0346!!\275\u0346!!!!!\275\u0346!!\275\u0346!!\275\u0346!!!\275\u0346!!\275\u0346!!\275\u0346!!!!!\275\u0346!!\275\u0346!!\275\u0346!!!\275\u0346!!\275\u0346!!\275\u0346\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!\275\u0346!!\275\u0346!!\275\u0346!!!\275\u0346!!\275\u0346!!\275\u0346!!!!!\275\u0346!!\275\u0346!!\275\u0346!!!\275\u0346!!\275\u0346!!\275\u0346!!!!!\275\u0346!!\275\u0346!!\275\u0346!!!\275\u0346!!\275\u0346!!\275\u0346!!!!!\275\u0346!!\275\u0346!!\275\u0346!!!\275\u0346!!\275\u0346!!\275\u0346\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!");
    }

    @Test
    public void test11672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11672");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\275NLUUNLUUNLUU\275NLUUNLUUNLUU\275NLUUNLUUNLUU\275NLUUNLUUNLUUNLUUNLUU\275\275NLUUNLUU\275\275NLUUNLUU\275\275NLUUNLUU\275\275\275NLUUNLUUNLUU\275NLUUNLUUNLUU\275NLUUNLUUNLUU\275NLUUNLUUNLUUNLUUNLUU\275\275NLUUNLUU\275\275!", "RRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRR!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275RRRRRRRRRRRR\275RRRRRRRRRRRR\275RRRRRRRRRRRR\275RRRRRRRRRRRRRRRRRRRR\275\275RRRRRRRR\275\275RRRRRRRR\275\275RRRRRRRR\275\275\275RRRRRRRRRRRR\275RRRRRRRRRRRR\275RRRRRRRRRRRR\275RRRRRRRRRRRRRRRRRRRR\275\275RRRRRRRR\275\275!" + "'", str2, "\275RRRRRRRRRRRR\275RRRRRRRRRRRR\275RRRRRRRRRRRR\275RRRRRRRRRRRRRRRRRRRR\275\275RRRRRRRR\275\275RRRRRRRR\275\275RRRRRRRR\275\275\275RRRRRRRRRRRR\275RRRRRRRRRRRR\275RRRRRRRRRRRR\275RRRRRRRRRRRRRRRRRRRR\275\275RRRRRRRR\275\275!");
    }

    @Test
    public void test11673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11673");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!\254\254!!\254\254!!\254\254!!\254\254!!\254\254!!\254\254!!\254\254!!\254\254!", "nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\254\254!!\254\254!!\254\254!!\254\254!!\254\254!!\254\254!!\254\254!!\254\254!" + "'", str2, "!!\254\254!!\254\254!!\254\254!!\254\254!!\254\254!!\254\254!!\254\254!!\254\254!");
    }

    @Test
    public void test11674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11674");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0243\u0243\u0243\u0243\u0243\u0243~~~~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~~!!l~~~l~~~l~~~~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!l~~~l~~~l~~~~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!!" + "'", str2, "~~!!l~~~l~~~l~~~~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!l~~~l~~~l~~~~~!!~~!!~~!!~~!!~~!!~~!!~~!!~~!!!");
    }

    @Test
    public void test11675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11675");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("`}\270null\270\270\270null\270\270\270null\270\270\270null\270\270\270null\270\270\270null\270\270\270null\270\270\270null\270\270`}\270null\270\270\270null\270\270\270null\270\270\270null\270\270\270null\270\270\270null\270\270\270null\270\270\270null\270\270`}\270null\270\270\270null\270\270\270null\270\270\270null\270\270\270null\270\270\270null\270\270\270null\270\270\270null\270\270`}\270null\270\270\270null\270\270\270null\270\270\270null\270\270\270null\270\270\270null\270\270\270null\270\270\270null\270\270`}\270null\270\270\270null\270\270\270null\270\270\270null\270\270\270null\270\270\270null\270\270\270null\270\270\270null\270\270!", "!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`}\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270`}\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270`}\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270`}\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270`}\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270!" + "'", str2, "`}\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270`}\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270`}\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270`}\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270`}\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270\270H!HH\270\270!");
    }

    @Test
    public void test11676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11676");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200!", "d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!d!aad!aa!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200!" + "'", str2, "~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200~~\200\200!");
    }

    @Test
    public void test11677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11677");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("PRRRPRRR!!PRRRPRRR!!!!PRRRPRRR!!PRRRPRRR!!!!PRRRPRRR!!PRRRPRRR!!!!PRRRPRRR!!PRRRPRRR!!!!PRRRPRRR!!PRRRPRRR!!!!PRRRPRRR!!PRRRPRRR!!!!PRRRPRRR!!PRRRPRRR!!!!PRRRPRRR!!PRRRPRRR!!!!!", "NNNN\230\226\226NNNN\230\226\226NNNN\230\226\226NNNN\230\226\226NNNN\230\226\226NNNN\230\226\226NNNN\230\226\226NNNN\230\226\226!!NNNN\230\226\226NNNN\230\226\226NNNN\230\226\226NNNN\230\226\226NNNN\230\226\226NNNN\230\226\226NNNN\230\226\226NNNN\230\226\226!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!!" + "'", str2, "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!!");
    }

    @Test
    public void test11678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11678");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214!", "]```]```]```]```]```]```]```]```]```]```]```]```!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!]```]```]```]```]```]```]```]```]```]```]```]```!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]``\214\214`]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]``\214\214`]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]``\214\214`]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]``\214\214`]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]``\214\214`]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]``\214\214`]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]``\214\214`]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]``\214\214!" + "'", str2, "`]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]``\214\214`]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]``\214\214`]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]``\214\214`]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]``\214\214`]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]``\214\214`]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]``\214\214`]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]``\214\214`]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]```]``\214\214!");
    }

    @Test
    public void test11679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11679");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("R!~~R!~~R!~~R!~~R!~~R!~~R!~~R!~~UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLR!~~R!~~R!~~R!~~R!~~R!~~R!~~R!~~UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!", "\275```\275```\275```\275`````\275\275``\275\275``\275\275``\275\275\275```\275```\275```\275`````\275\275``\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`!~~`!~~`!~~`!~~`!~~`!~~`!~~`!~~`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!~~`!~~`!~~`!~~`!~~`!~~`!~~`!~~````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!" + "'", str2, "`!~~`!~~`!~~`!~~`!~~`!~~`!~~`!~~`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!~~`!~~`!~~`!~~`!~~`!~~`!~~`!~~````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!");
    }

    @Test
    public void test11680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11680");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!\255\256\260\260\255\256\260\260!", "LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!\255\256\260\260\255\256\260\260NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!\255\256\260\260\255\256\260\260NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!\255\256\260\260\255\256\260\260NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!\255\256\260\260\255\256\260\260NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!\255\256\260\260\255\256\260\260NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!\255\256\260\260\255\256\260\260NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!\255\256\260\260\255\256\260\260NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!\255\256\260\260\255\256\260\260!" + "'", str2, "NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!\255\256\260\260\255\256\260\260NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!\255\256\260\260\255\256\260\260NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!\255\256\260\260\255\256\260\260NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!\255\256\260\260\255\256\260\260NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!\255\256\260\260\255\256\260\260NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!\255\256\260\260\255\256\260\260NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!\255\256\260\260\255\256\260\260NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!NNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLL!!\255\256\260\260\255\256\260\260!");
    }

    @Test
    public void test11681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11681");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\300\300!!\300\300!!\300\300!!\300\300\u0346\u0348\u0348!", "]]]]]]]]]]]]]]]]nullnullnullnullnullnullnullnull!!!!]]]]]]]]]]]]]]]]nullnullnullnullnullnullnullnull!!!!!!]]]]]]]]]]]]]]]]nullnullnullnullnullnullnullnull!!!!]]]]]]]]]]]]]]]]nullnullnullnullnullnullnullnull!!!!!!]]]]]]]]]]]]]]]]nullnullnullnullnullnullnullnull!!!!]]]]]]]]]]]]]]]]nullnullnullnullnullnullnullnull!!!!!!]]]]]]]]]]]]]]]]nullnullnullnullnullnullnullnull!!!!]]]]]]]]]]]]]]]]nullnullnullnullnullnullnullnull!!!!!!]]]]]]]]]]]]]]]]nullnullnullnullnullnullnullnull!!!!]]]]]]]]]]]]]]]]nullnullnullnullnullnullnullnull!!!!!!]]]]]]]]]]]]]]]]nullnullnullnullnullnullnullnull!!!!]]]]]]]]]]]]]]]]nullnullnullnullnullnullnullnull!!!!!!]]]]]]]]]]]]]]]]nullnullnullnullnullnullnullnull!!!!]]]]]]]]]]]]]]]]nullnullnullnullnullnullnullnull!!!!!!]]]]]]]]]]]]]]]]nullnullnullnullnullnullnullnull!!!!]]]]]]]]]]]]]]]]nullnullnullnullnullnullnullnull!!!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test11682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11682");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!RRR!", "\204\u01ad\u01aa\u01ab\u01ab\204\204\204\u01ad\u01aa\u01ab\u01ab\204\204!!\204\u01ad\u01aa\u01ab\u01ab\204\204\204\u01ad\u01aa\u01ab\u01ab\204\204!!\204\u01ad\u01aa\u01ab\u01ab\204\204\204\u01ad\u01aa\u01ab\u01ab\204\204\204\u01ad\u01aa\u01ab\u01ab\204\204\204\u01ad\u01aa\u01ab\u01ab\204\204!!\204\u01ad\u01aa\u01ab\u01ab\204\204\204\u01ad\u01aa\u01ab\u01ab\204\204!!\204\u01ad\u01aa\u01ab\u01ab\204\204\204\u01ad\u01aa\u01ab\u01ab\204\204!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac!" + "'", str2, "\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac!");
    }

    @Test
    public void test11683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11683");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\225\225\225\225\u0346\u0348\u0348!", "]]\200nullxnullnull\200\200\200nullxnullnull\200\200]]\200nullxnullnull\200\200\200nullxnullnull\200\200!!]]\200nullxnullnull\200\200\200nullxnullnull\200\200]]\200nullxnullnull\200\200\200nullxnullnull\200\200!!]]\200nullxnullnull\200\200\200nullxnullnull\200\200]]\200nullxnullnull\200\200\200nullxnullnull\200\200]]\200nullxnullnull\200\200\200nullxnullnull\200\200]]\200nullxnullnull\200\200\200nullxnullnull\200\200!!]]\200nullxnullnull\200\200\200nullxnullnull\200\200]]\200nullxnullnull\200\200\200nullxnullnull\200\200!!]]\200nullxnullnull\200\200\200nullxnullnull\200\200]]\200nullxnullnull\200\200\200nullxnullnull\200\200!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\225\225\225\225\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\225\225\225\225\u0346\u0348\u0348!");
    }

    @Test
    public void test11684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11684");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!", "````````\214\214````````\214\214````````\214\214````````\214\214````````\214\214````````\214\214````````\214\214````````\214\214!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11685");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LL\275\275LL\275\275!!LL\275\275LL\275\275!!LL\275\275LL\275\275LL\275\275LL\275\275!!LL\275\275LL\275\275!!LL\275\275LL\275\275!", "U}\200\200U}\200\200nullnullnullnullnullnullnullnullU}\200\200U}\200\200nullnullnullnullnullnullnullnullU}\200\200U}\200\200nullnullnullnullnullnullnullnullU}\200\200U}\200\200nullnullnullnullnullnullnullnullU}\200\200U}\200\200nullnullnullnullnullnullnullnullU}\200\200U}\200\200nullnullnullnullnullnullnullnullU}\200\200U}\200\200nullnullnullnullnullnullnullnullU}\200\200U}\200\200nullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LL\275\275LL\275\275!!LL\275\275LL\275\275!!LL\275\275LL\275\275LL\275\275LL\275\275!!LL\275\275LL\275\275!!LL\275\275LL\275\275!" + "'", str2, "LL\275\275LL\275\275!!LL\275\275LL\275\275!!LL\275\275LL\275\275LL\275\275LL\275\275!!LL\275\275LL\275\275!!LL\275\275LL\275\275!");
    }

    @Test
    public void test11686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11686");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "\242null\244\244\242null\244\244nullnull\242null\244\244\242null\244\244nullnull!!\242null\244\244\242null\244\244nullnull\242null\244\244\242null\244\244nullnull!!\242null\244\244\242null\244\244nullnull\242null\244\244\242null\244\244nullnull!!\242null\244\244\242null\244\244nullnull\242null\244\244\242null\244\244nullnull!!\242null\244\244\242null\244\244nullnull\242null\244\244\242null\244\244nullnull!!\242null\244\244\242null\244\244nullnull\242null\244\244\242null\244\244nullnull!!\242null\244\244\242null\244\244nullnull\242null\244\244\242null\244\244nullnull!!\242null\244\244\242null\244\244nullnull\242null\244\244\242null\244\244nullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11687");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0368\u0368~~!", "u}}}nullu}}}u}}}u}}}nullu}}}u}}}u}}}u}}}u}}}nullu}}}u}}}u}}}nullu}}}u}}}u}}}u}}}u}}}u}}}nullu}}}u}}}u}}}u}}}u}}}u}}}nullu}}}u}}}u}}}u}}}u}}}u}}}nullu}}}u}}}u}}}u}}}u}}}u}}}nullu}}}u}}}u}}}u}}}u}}}nullu}}}u}}}u}}}nullu}}}u}}}u}}}u}}}u}}}nullu}}}u}}}u}}}nullu}}}u}}}u}}}u}}}!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0368\u0368~~!" + "'", str2, "\u0368\u0368~~!");
    }

    @Test
    public void test11688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11688");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("ULNNULNNULNNULNNULNN!", "UALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAA!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UAAAUAAAUAAAUAAAUAAA!" + "'", str2, "UAAAUAAAUAAAUAAAUAAA!");
    }

    @Test
    public void test11689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11689");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!!" + "'", str2, "\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!\220\220\216\216\220\220\216\216!!!!!!!!!");
    }

    @Test
    public void test11690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11690");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0348\u0348\u0348\u040b\u040c\u040e\u040e\u040b\u040c\u040e\u040e\u040b\u040c\u040e\u040e\u0348\u0346\u0346!", "!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test11691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11691");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LJ!!LJ!!!", "!!!!!!!!!!!!!!!!\200}}`!!!!!!!!!!!!!!!!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!" + "'", str2, "!!!!!!!!!");
    }

    @Test
    public void test11692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11692");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test11693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11693");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("]uuuu]uuu]]]]]uuuu]uuu]]]]!!]uuuu]uuu]]]]]uuuu]uuu]]]]!!]uuuu]uuu]]]]]uuuu]uuu]]]]!!]uuuu]uuu]]]]]uuuu]uuu]]]]!!]uuuu]uuu]]]]]uuuu]uuu]]]]!!]uuuu]uuu]]]]]uuuu]uuu]]]]!!]uuuu]uuu]]]]]uuuu]uuu]]]]!!]uuuu]uuu]]]]]uuuu]uuu]]]]!!!", "\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u036e\u0346\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!!" + "'", str2, "]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!!");
    }

    @Test
    public void test11694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11694");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~UUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNL!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~UUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNN!", "null!nullnullnull!nullnull!!null!nullnullnull!nullnull!!null!nullnullnull!nullnull!!null!nullnullnull!nullnull!!null!nullnullnull!nullnull!!null!nullnullnull!nullnull!!null!nullnullnull!nullnull!!null!nullnullnull!nullnull!!null!nullnullnull!nullnull!!null!nullnullnull!nullnull!!null!nullnullnull!nullnull!!null!nullnullnull!nullnull!!null!nullnullnull!nullnull!!null!nullnullnull!nullnull!!null!nullnullnull!nullnull!!null!nullnullnull!nullnull!!\254~\256\256\254~\256\256\254~\256\256\254~\256\256!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNL!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!" + "'", str2, "L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNL!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!");
    }

    @Test
    public void test11695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11695");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!LL!!LL!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!!!!LL!!LL!!!!LL!!LL!!!", "\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!\260]]!!]]!!]]!!!");
        org.junit.Assert.assertEquals("'" + strstr2, "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    @Test
    public void test11696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11696");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("XXXXXXXXXXXX!!!!XXXXXXXXXXXX!!!!!!XXXXXXXXXXXX!!!!XXXXXXXXXXXX!!!!!!XXXXXXXXXXXX!!!!XXXXXXXXXXXX!!!!!!XXXXXXXXXXXX!!!!XXXXXXXXXXXX!!!!!!XXXXXXXXXXXX!!!!XXXXXXXXXXXX!!!!!!XXXXXXXXXXXX!!!!XXXXXXXXXXXX!!!!!!XXXXXXXXXXXX!!!!XXXXXXXXXXXX!!!!!!XXXXXXXXXXXX!!!!XXXXXXXXXXXX!!!!!!!", "HH!!HH!!HHHHHHHHHH!!HH!!HHHHHHHHHH!!HH!!HHHHHHHHHH!!HH!!HHHHHHHHHH!!HH!!HHHHHHHHHH!!HH!!HHHHHHHHHH!!HH!!HHHHHHHHHH!!HH!!HHHHHHHH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnull!!!!!!!");
    }

    @Test
    public void test11697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11697");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\200hff\200~~\200hff\200~~\200hff\200hff\200hff\200~~\200hff\200~~\200hff\200hff!!\200hff\200~~\200hff\200~~\200hff\200hff\200hff\200~~\200hff\200~~\200hff\200hff!!\200hff\200~~\200hff\200~~\200hff\200hff\200hff\200~~\200hff\200~~\200hff\200hff\200hff\200~~\200hff\200~~\200hff\200hff\200hff\200~~\200hff\200~~\200hff\200hff!!\200hff\200~~\200hff\200~~\200hff\200hff\200hff\200~~\200hff\200~~\200hff\200hff!!\200hff\200~~\200hff\200~~\200hff\200hff\200hff\200~~\200hff\200~~\200hff\200hff!", "}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU!!\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU!!\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU!!\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU!!\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU!" + "'", str2, "\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU!!\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU!!\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU!!\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU!!\200LUU\200~~\200LUU\200~~\200LUU\200LUU\200LUU\200~~\200LUU\200~~\200LUU\200LUU!");
    }

    @Test
    public void test11698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11698");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "````````````````````````````````!!````````````````````````````````!!````````````````````````````````````````````````````````````````!!````````````````````````````````!!````````````````````````````````!" + "'", str2, "````````````````````````````````!!````````````````````````````````!!````````````````````````````````````````````````````````````````!!````````````````````````````````!!````````````````````````````````!");
    }

    @Test
    public void test11699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11699");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("L\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL!", "null\253nullnullnull\253\u035e\u035enull\253nullnullnull\253\u035e\u035e!!!!null\253nullnullnull\253\u035e\u035enull\253nullnullnull\253\u035e\u035e!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL!" + "'", str2, "L\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLL\275LLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL!");
    }

    @Test
    public void test11700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11700");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\u0245\u0246\u0248\u0248\u0346\u0348\u0348!", "!!!!!!!!!!!!!!!!!!!!!!!!\204\204!!!!!!!!\204\204!!!!!!!!\204\204!!!!!!!!\204\204!!!!!!!!!!!!!!!!!!!!!!!!\204\204!!!!!!!!\204\204!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test11701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11701");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0348\u0348\u0348\u040b\u040c\u040e\u040e\u040b\u040c\u040e\u040e\u040b\u040c\u040e\u040e\u0348\u0346\u0346!", "!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test11702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11702");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL\200}}`!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL]]!", "!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!!!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!!!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!!!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!!!~\200nullnullnullnull~~\200nullnullnullnull~~!~\200nullnullnullnull~~\200nullnullnullnull~~!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN\200}}`!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN]]!" + "'", str2, "!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN\200}}`!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN]]!");
    }

    @Test
    public void test11703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11703");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("hhhhhhhhhhhhhhhhhhhhhhhh\204\204hhhhhhhh\204\204hhhhhhhh\204\204hhhhhhhh\204\204hhhhhhhhhhhhhhhhhhhhhhhh\204\204hhhhhhhh\204\204!", "null!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull!!null!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull!!null!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull!!null!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull!!null!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLLLLLLLLLLLLLLLLLLLLLLL\204\204LLLLLLLL\204\204LLLLLLLL\204\204LLLLLLLL\204\204LLLLLLLLLLLLLLLLLLLLLLLL\204\204LLLLLLLL\204\204!" + "'", str2, "LLLLLLLLLLLLLLLLLLLLLLLL\204\204LLLLLLLL\204\204LLLLLLLL\204\204LLLLLLLL\204\204LLLLLLLLLLLLLLLLLLLLLLLL\204\204LLLLLLLL\204\204!");
    }

    @Test
    public void test11704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11704");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode```\227\232``\227\232``\227\232```\227\232``\227\232``\227\232```\227\232``\227\232``\227\232```\227\232``\227\232``\227\232```\227\232``\227\232``\227\232```\227\232``\227\232``\227\232```\227\232``\227\232``\227\232```\227\232``\227\232``\227\232```\227\232``\227\232``\227\232```\227\232``\227\232``\227\232```\227\232``\227\232``\227\232```\227\232``\227\232``\227\232```\227\232``\227\232``\227\232```\227\232``\227\232``\227\232```\227\232``\227\232``\227\232```\227\232``\227\232``\227\232```\227\232``\227\232``\227\232```\227\232``\227\232``\227\232```\227\232``\227\232``\227\232```\227\232``\227\232``!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!\214!!!\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!\214!!!\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!\214!!!\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!\214!!!\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!\214!!!\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!\214!!!\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!\214!!!\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!\214\214!!!\214!!!\214!!!" + "'", str
    }

    @Test
    public void test11705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11705");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("null!nullnull!!!null!nullnull!!!null!nullnull!!!null!nullnull!!!null!nullnull!!!null!nullnull!!!null!nullnull!!!null!nullnull!!!!", "}~\200\200}~\200\200!!}~\200\200}~\200\200!!]}~\200\200}~\200\200}~\200\200]}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200!!}~\200\200}~\200\200!!]}~\200\200}~\200\200}~\200\200]}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200!!}~\200\200}~\200\200!!]}~\200\200}~\200\200}~\200\200]}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200!!}~\200\200}~\200\200!!]}~\200\200}~\200\200}~\200\200]}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200!!}~\200\200}~\200\200!!]}~\200\200}~\200\200}~\200\200]}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200!!}~\200\200}~\200\200!!]}~\200\200}~\200\200}~\200\200]}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200!!}~\200\200}~\200\200!!]}~\200\200}~\200\200}~\200\200]}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200!!}~\200\200}~\200\200!!]}~\200\200}~\200\200}~\200\200]}~\200\200}~\200\200}~\200\200!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull!nullnullnullnullnullnullnullnull!!!nullnullnullnull!nullnullnullnullnullnullnullnull!!!nullnullnullnull!nullnullnullnullnullnullnullnull!!!nullnullnullnull!nullnullnullnullnullnullnullnull!!!nullnullnullnull!nullnullnullnullnullnullnullnull!!!nullnullnullnull!nullnullnullnullnullnullnullnull!!!nullnullnullnull!nullnullnullnullnullnullnullnull!!!nullnullnullnull!nullnullnullnullnullnullnullnull!!!!" + "'", str2, "nullnullnullnull!nullnullnullnullnullnullnullnull!!!nullnullnullnull!nullnullnullnullnullnullnullnull!!!nullnullnullnull!nullnullnullnullnullnullnullnull!!!nullnullnullnull!nullnullnullnullnullnullnullnull!!!nullnullnullnull!nullnullnullnullnullnullnullnull!!!nullnullnullnull!nullnullnullnullnullnullnullnull!!!nullnullnullnull!nullnullnullnullnullnullnullnull!!!nullnullnullnull!nullnullnullnullnullnullnullnull!!!!");
    }

    @Test
    public void test11706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11706");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decodenullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\216\254\254nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\216\254\254nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\216\254\254nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\216\254\254nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da!!!!!!!!" + "'", str2, "\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da\u02da!!!!!!!!");
    }

    @Test
    public void test11707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11707");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11708");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!", "!!\336\336\336\336\336\336\336\336!!\336\336\336\336\336\336\336\336!!\336\336\336\336\336\336\336\336!!\336\336\336\336\336\336\336\336!!\336\336\336\336\336\336\336\336!!\336\336\336\336\336\336\336\336!!\336\336\336\336\336\336\336\336!!\336\336\336\336\336\336\336\336!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!" + "'", str2, "!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!!``!!``!!!");
    }

    @Test
    public void test11709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11709");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017enullnullnullnull!", "~}\200\200~}\200\200FHHH!FHHHFHHHFHHH!FHHHFHHHHHFFHHFFFHHH!FHHHFHHHFHHH!FHHHFHHHHHFFHHFF~}\200\200~}\200\200FHHH!FHHHFHHHFHHH!FHHHFHHHHHFFHHFFFHHH!FHHHFHHHFHHH!FHHHFHHHHHFFHHFF~}\200\200~}\200\200FHHH!FHHHFHHHFHHH!FHHHFHHHHHFFHHFFFHHH!FHHHFHHHFHHH!FHHHFHHHHHFFHHFF~}\200\200~}\200\200FHHH!FHHHFHHHFHHH!FHHHFHHHHHFFHHFFFHHH!FHHHFHHHFHHH!FHHHFHHHHHFFHHFF~}\200\200~}\200\200FHHH!FHHHFHHHFHHH!FHHHFHHHHHFFHHFFFHHH!FHHHFHHHFHHH!FHHHFHHHHHFFHHFF~}\200\200~}\200\200FHHH!FHHHFHHHFHHH!FHHHFHHHHHFFHHFFFHHH!FHHHFHHHFHHH!FHHHFHHHHHFFHHFF~}\200\200~}\200\200FHHH!FHHHFHHHFHHH!FHHHFHHHHHFFHHFFFHHH!FHHHFHHHFHHH!FHHHFHHHHHFFHHFF~}\200\200~}\200\200FHHH!FHHHFHHHFHHH!FHHHFHHHHHFFHHFFFHHH!FHHHFHHHFHHH!FHHHFHHHHHFFHHFF!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11710");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u016c\276\276\276\u016c\276\276\276\u016c\276\276\276\u016c\276\276\276\u016c\276\276\276\u016c\276\276\276\u016c\276\276\276\u016c\276\276\276\u016c\276\276\276\u016c\276\276\276\u016c\276\276\276\u016c\276\276\276\200\u016c\276\276\276\u016c\276\276\276\u016c\276\276\276\u016c\276\276\276\u016c\276\276\276\u016c\276\276\276\u016c\276\276\276\u016c\276\276\276\u016c\276\276\276\u016c\276\276\276\u016c\276\276\276\u016c\276\276\276]]!", "N!~~N!~~N!~~N!~~N!~~N!~~N!~~N!~~\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LLN!~~N!~~N!~~N!~~N!~~N!~~N!~~N!~~\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL\200\200LL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~L\276\276\276L\276\276\276L\276\276\276~L\276\276\276L\276\276\276L\276\276\276~L\276\276\276L\276\276\276L\276\276\276~L\276\276\276L\276\276\276L\276\276\276\200}}`~L\276\276\276L\276\276\276L\276\276\276~L\276\276\276L\276\276\276L\276\276\276~L\276\276\276L\276\276\276L\276\276\276~L\276\276\276L\276\276\276L\276\276\276]]!" + "'", str2, "~L\276\276\276L\276\276\276L\276\276\276~L\276\276\276L\276\276\276L\276\276\276~L\276\276\276L\276\276\276L\276\276\276~L\276\276\276L\276\276\276L\276\276\276\200}}`~L\276\276\276L\276\276\276L\276\276\276~L\276\276\276L\276\276\276L\276\276\276~L\276\276\276L\276\276\276L\276\276\276~L\276\276\276L\276\276\276L\276\276\276]]!");
    }

    @Test
    public void test11711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11711");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("HNHHHNHHHNHHHNHHHNHHHNHHHNHHHNHH!!HNHHHNHHHNHHHNHHHNHHHNHHHNHHHNHH!!HNHHHNHHHNHHHNHHHNHHHNHHHNHHHNHH!!HNHHHNHHHNHHHNHHHNHHHNHHHNHHHNHH!!HNHHHNHHHNHHHNHHHNHHHNHHHNHHHNHH!!HNHHHNHHHNHHHNHHHNHHHNHHHNHHHNHH!!HNHHHNHHHNHHHNHHHNHHHNHHHNHHHNHH!!HNHHHNHHHNHHHNHHHNHHHNHHHNHHHNHH!!!", "H!!!H!!!H!!!H!!!H!!!H!!!H!!!H!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" + "'", str2, "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    @Test
    public void test11712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11712");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encodeu0346\u0348\u0348\u0348}~\200\200}~\200\200UUUU\214UUUUUUUUUUUU\214UUUUUUUU}~\200\200}~\200\200UUUU\214UUUUUUUUUUUU\214UUUUUUUU}~\200\200}~\200\200UUUU\214UUUUUUUUUUUU\214UUUUUUUU}~\200\200}~\200\200UUUU\214UUUUUUUUUUUU\214\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu!!uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu!!uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu!!uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu!!uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" + "'", str2, "!!!!uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu!!uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu!!uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu!!uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu!!uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    @Test
    public void test11713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11713");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("ULLLULLL]]ULLLULLL]]ULLLULLL]]ULLLULLL]]~}}^ULLLULLL]]ULLLULLL]]ULLLULLL]]ULLLULLL]]]]!", "\u0366\u0365\u0368\u0368\u0170\u0170\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLLLLLLL]]LLLLLLLL]]LLLLLLLL]]LLLLLLLL]]~}}^LLLLLLLL]]LLLLLLLL]]LLLLLLLL]]LLLLLLLL]]]]!" + "'", str2, "LLLLLLLL]]LLLLLLLL]]LLLLLLLL]]LLLLLLLL]]~}}^LLLLLLLL]]LLLLLLLL]]LLLLLLLL]]LLLLLLLL]]]]!");
    }

    @Test
    public void test11714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11714");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0357\u035a\u035a\u0346\u0348\u0348!", "\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017e!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0109\u010a\u010c\u010c\u0357\u035a\u035a\u0346\u0348\u0348!");
    }

    @Test
    public void test11715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11715");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!", "NLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNN\214\214NLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNN\214\214NLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNN\214\214NLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNN\214\214NLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNN\214\214NLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNN\214\214NLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNN\214\214NLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNNNLLLNLLLNN\214\214!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!" + "'", str2, "!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!");
    }

    @Test
    public void test11716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11716");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8\u01b3\u01b4\u01b8\u01b8]]!", "\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}nullnullnullnullnullnullnullnullnullnullnullnull~}}^}nullnullnullnullnullnullnullnullnullnullnullnull]]!" + "'", str2, "}nullnullnullnullnullnullnullnullnullnullnullnull~}}^}nullnullnullnullnullnullnullnullnullnullnullnull]]!");
    }

    @Test
    public void test11717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11717");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull\253\253!", "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!\253\253nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!\253\253nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!\253\253nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!\253\253nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!\253\253!" + "'", str2, "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!\253\253nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!\253\253nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!\253\253nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!\253\253nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!\253\253!");
    }

    @Test
    public void test11718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11718");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!!", "l!uul!uuLLl!uul!uuLLl!uul!uuLLl!uul!uuLLl!uul!uuLLl!uul!uuLLl!uul!uuLLl!uul!uuLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU!!}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU!!}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU!!}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU!!}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU!!}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU!!}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU!!}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU!!!" + "'", str2, "}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU!!}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU!!}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU!!}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU!!}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU!!}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU!!}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU!!}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU}^!UUU!UUU!!!");
    }

    @Test
    public void test11719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11719");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!NU!!!", "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!!" + "'", str2, "null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!null\201!!!");
    }

    @Test
    public void test11720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11720");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!\336\336!!!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231EHHHEHHHEHHHEHHH\226\227\231\231\226\227\231\231\226\227\231\231\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!!" + "'", str2, "\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!\227\227!!!");
    }

    @Test
    public void test11721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11721");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]!" + "'", str2, "\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]\220\220\216\216\220\220\216\216nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]nullnull]]!");
    }

    @Test
    public void test11722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11722");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "!l\253\253!l\253\253!!!l\253\253!l\253\253!!!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!!!l\253\253!l\253\253!!!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!!!l\253\253!l\253\253!!!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!!!l\253\253!l\253\253!!!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!!!l\253\253!l\253\253!!!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!!!l\253\253!l\253\253!!!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!!!l\253\253!l\253\253!!!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!!!l\253\253!l\253\253!!!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!l\253\253!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11723");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368null\213\213\213\u0346\u0348\u0348!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\214\214!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368UNLL\213\213\213\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368UNLL\213\213\213\u0346\u0348\u0348!");
    }

    @Test
    public void test11724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11724");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU~}}^LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU]]!", "\253\254\256\256L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!\253\254\256\256L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull~}}^\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull]]!" + "'", str2, "\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull~}}^\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull]]!");
    }

    @Test
    public void test11725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11725");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "EEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EE!!EEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EE!!EEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EE!!EEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EE!!EEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EE!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test11726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11726");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\340\336\225\225\340\336\225\225\340\336\225\225\340\336\225\225\340\336\225\225\340\336\225\225\340\336\225\225\340\336\225\225!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull\225\225nullnull\225\225nullnull\225\225nullnull\225\225nullnull\225\225nullnull\225\225nullnull\225\225nullnull\225\225!" + "'", str2, "nullnull\225\225nullnull\225\225nullnull\225\225nullnull\225\225nullnull\225\225nullnull\225\225nullnull\225\225nullnull\225\225!");
    }

    @Test
    public void test11727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11727");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("RRUURRUURRUURRUURRUURRUURRUURRUU!", "EEEEEEEEEEEEEEEE\200}}`EEEEEEEEEEEEEEEE]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}}EE}}EE}}EE}}EE}}EE}}EE}}EE}}EE!" + "'", str2, "}}EE}}EE}}EE}}EE}}EE}}EE}}EE}}EE!");
    }

    @Test
    public void test11728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11728");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("giiigiiiiigiiigiiiiigiiigiiiiigiiigiiiiigiiigiiiiigiiigiiiiigiiigiiiiigiiigiiiii!", "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NLLLNLLLLLNLLLNLLLLLNLLLNLLLLLNLLLNLLLLLNLLLNLLLLLNLLLNLLLLLNLLLNLLLLLNLLLNLLLLL!" + "'", str2, "NLLLNLLLLLNLLLNLLLLLNLLLNLLLLLNLLLNLLLLLNLLLNLLLLLNLLLNLLLLLNLLLNLLLLLNLLLNLLLLL!");
    }

    @Test
    public void test11729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11729");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("~}\200\200~}\200\200\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104~}\200\200~}\200\200\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104~}\200\200~}\200\200\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104~}\200\200~}\200\200\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104~}\200\200~}\200\200\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104~}\200\200~}\200\200\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104~}\200\200~}\200\200\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104~}\200\200~}\200\200\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104!", "nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200~}\200\200~}\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200~}\200\200~}\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200~}\200\200~}\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200~}\200\200~}\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200~}\200\200~}\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200~}\200\200~}\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200~}\200\200~}\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200!" + "'", str2, "~}\200\200~}\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200~}\200\200~}\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200~}\200\200~}\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200~}\200\200~}\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200~}\200\200~}\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200~}\200\200~}\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200~}\200\200~}\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200~}\200\200~}\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200LNUU!LNUULNUULNUU!LNUULNUULL\200\200LL\200\200!");
    }

    @Test
    public void test11730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11730");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013dnullnullnullnull!", "qrttqrttnullnullqrttqrttnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~\200\200null}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200}~\200\200!" + "'", str2, "}~\200\200null}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200null}~\200\200}~\200\200}~\200\200}~\200\200!");
    }

    @Test
    public void test11731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11731");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\275\300\300\300\275\300\300\300\275\300\300\300\275\300\300\300\300\300\275\275\300\300\275\275\300\300\275\275\300\300\275\275\275\300\300\300\275\300\300\300\275\300\300\300\275\300\300\300\300\300\275\275\300\300\275\275!", "\u0366\u0365\u0368\u0368LL!!LL!!\200\200\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnullnullnull\275\275nullnull\275\275nullnull\275\275nullnull\275\275\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnullnullnull\275\275nullnull\275\275!" + "'", str2, "\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnullnullnull\275\275nullnull\275\275nullnull\275\275nullnull\275\275\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnullnullnull\275\275nullnull\275\275!");
    }

    @Test
    public void test11732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11732");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("UULLUULLUULLUULLUULLUULLUULLUULL!!UULLUULLUULLUULLUULLUULLUULLUULL!!UULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULL!!UULLUULLUULLUULLUULLUULLUULLUULL!!UULLUULLUULLUULLUULLUULLUULLUULL!", "\u0143\u0145\u0143\u0145\u0143\u0145\u0143\u0145\u0143\u0145\u0143\u0145\u0143\u0145\u0143\u0145\u0143\u0145\u0143\u0145\u0143\u0145\u0143\u0145!!!!!\200\u0143\u0145\u0143\u0145\u0143\u0145\u0143\u0145\u0143\u0145\u0143\u0145\u0143\u0145\u0143\u0145\u0143\u0145\u0143\u0145\u0143\u0145\u0143\u0145!!!!!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11733");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!\244!", "OO]]OO]]OO]]OO]]~}}^OO]]OO]]OO]]OO]]]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\244!" + "'", str2, "!\244!");
    }

    @Test
    public void test11734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11734");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\335\335\300\300~\335\335\300\300\335\335\300\300\335\335\300\300~\335\335\300\300\335\335\300\300!!\335\335\300\300~\335\335\300\300\335\335\300\300\335\335\300\300~\335\335\300\300\335\335\300\300!!\335\335\300\300~\335\335\300\300\335\335\300\300\335\335\300\300~\335\335\300\300\335\335\300\300\335\335\300\300~\335\335\300\300\335\335\300\300\335\335\300\300~\335\335\300\300\335\335\300\300!!\335\335\300\300~\335\335\300\300\335\335\300\300\335\335\300\300~\335\335\300\300\335\335\300\300!!\335\335\300\300~\335\335\300\300\335\335\300\300\335\335\300\300~\335\335\300\300\335\335\300\300!", "!!!!LNUULNUU!!LNUULNUU!!LNUULNUU!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!LNUULNUU!!LNUULNUU!!LNUULNUU!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11735");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("NNLLNNLL!!NNLLNNLL!!NNLLNNLL!!NNLLNNLL!!NNLLNNLL!!NNLLNNLL!!NNLLNNLL!!NNLLNNLL!!!", "\276L\275\275\276L\275\275\276L\275\275\276L\275\275\276L\275\275\276L\275\275\276L\275\275\276L\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LL\275\275LL\275\275!!LL\275\275LL\275\275!!LL\275\275LL\275\275!!LL\275\275LL\275\275!!LL\275\275LL\275\275!!LL\275\275LL\275\275!!LL\275\275LL\275\275!!LL\275\275LL\275\275!!!" + "'", str2, "LL\275\275LL\275\275!!LL\275\275LL\275\275!!LL\275\275LL\275\275!!LL\275\275LL\275\275!!LL\275\275LL\275\275!!LL\275\275LL\275\275!!LL\275\275LL\275\275!!LL\275\275LL\275\275!!!");
    }

    @Test
    public void test11736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11736");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUUUULLUULLUUUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUUUULLUULLUUUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUUUULLUULLUUUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUUUULLUULLUUUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUUUULLUULLUUUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUUUULLUULLUUUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUUUULLUULLUUUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUUUULLUULLUUUU!", "\253\254\256\256U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!\253\254\256\256U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UUUU!!UU!!UUUU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UUUU!!UU!!UUUU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UUUU!!UU!!UUUU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UUUU!!UU!!UUUU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UUUU!!UU!!UUUU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UUUU!!UU!!UUUU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UUUU!!UU!!UUUU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UUUU!!UU!!UUUU!" + "'", str2, "!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UUUU!!UU!!UUUU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UUUU!!UU!!UUUU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UUUU!!UU!!UUUU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UUUU!!UU!!UUUU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UUUU!!UU!!UUUU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UUUU!!UU!!UUUU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UUUU!!UU!!UUUU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UUUU!!UU!!UUUU!");
    }

    @Test
    public void test11737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11737");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225!", "null!nullnullnull!nullnull!!null!nullnullnull!nullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL\225\225}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL\225\225}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL\225\225}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL\225\225}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL\225\225}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL\225\225}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL\225\225}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL\225\225!" + "'", str2, "}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL\225\225}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL\225\225}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL\225\225}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL\225\225}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL\225\225}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL\225\225}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL\225\225}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL}LLLLLLLLLLLL}LLLLLLLLLLLLLLLLLLLL\225\225!");
    }

    @Test
    public void test11738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11738");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encodeu0262\u0264\u0264\u0262\u0264\u0264\u0262\u0264\u0264\u0262\u0264\u0264\u0262\u0264\u0264\u0262\u0264\u0264\u0262\u0264\u0264\u0262\u0264\u0264\u0262\u0264\u0264\u0262\u0264\u0264\u0262\u0264\u0264\u0262\u0264\u0264!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~~~~~~~~~~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~~~~~~~~~~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~~~~~~~~~~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~~~~~~~~~~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!" + "'", str2, "!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~~~~~~~~~~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~~~~~~~~~~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~~~~~~~~~~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~~~~~~~~~~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!!~~~~~~~~!");
    }

    @Test
    public void test11739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11739");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!!!!\230nullnullnull\230nullnullnull\230nullnullnull!\230nullnullnull\230nullnullnull\230nullnullnull!\230nullnullnull\230nullnullnull\230nullnullnull!\230nullnullnull\230nullnullnull\230nullnullnull!!!!!\230nullnullnull\230nullnullnull\230nullnullnull!\230nullnullnull\230nullnullnull\230nullnullnull!", "EElelllellEElelllellEElelllellEElelllellEElelllellEElelllellEElelllellEElelllell!!EElelllellEElelllellEElelllellEElelllellEElelllellEElelllellEElelllellEElelllell!!EElelllellEElelllellEElelllellEElelllellEElelllellEElelllellEElelllellEElelllellEElelllellEElelllellEElelllellEElelllellEElelllellEElelllellEElelllellEElelllell!!EElelllellEElelllellEElelllellEElelllellEElelllellEElelllellEElelllellEElelllell!!EElelllellEElelllellEElelllellEElelllellEElelllellEElelllellEElelllellEElelllell!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!!!!!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!" + "'", str2, "!!!!!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!!!!!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!");
    }

    @Test
    public void test11740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11740");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333!!\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333!!\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333!!\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333!!\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333\330\331\333\333\200~~\330\331\333\333\200~~\330\331\333\333\330\331\333\333!", "!~nullnull!~nullnull!!!~nullnull!~nullnull!!!~nullnull!~nullnull!~nullnull!~nullnull!!!~nullnull!~nullnull!!!~nullnull!~nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~nll\200~~~nll\200~~~nll~nll~nll\200~~~nll\200~~~nll~nll!!~nll\200~~~nll\200~~~nll~nll~nll\200~~~nll\200~~~nll~nll!!~nll\200~~~nll\200~~~nll~nll~nll\200~~~nll\200~~~nll~nll~nll\200~~~nll\200~~~nll~nll~nll\200~~~nll\200~~~nll~nll!!~nll\200~~~nll\200~~~nll~nll~nll\200~~~nll\200~~~nll~nll!!~nll\200~~~nll\200~~~nll~nll~nll\200~~~nll\200~~~nll~nll!" + "'", str2, "~nll\200~~~nll\200~~~nll~nll~nll\200~~~nll\200~~~nll~nll!!~nll\200~~~nll\200~~~nll~nll~nll\200~~~nll\200~~~nll~nll!!~nll\200~~~nll\200~~~nll~nll~nll\200~~~nll\200~~~nll~nll~nll\200~~~nll\200~~~nll~nll~nll\200~~~nll\200~~~nll~nll!!~nll\200~~~nll\200~~~nll~nll~nll\200~~~nll\200~~~nll~nll!!~nll\200~~~nll\200~~~nll~nll~nll\200~~~nll\200~~~nll~nll!");
    }

    @Test
    public void test11741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11741");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test11742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11742");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u026e\u026b\u026e\u026e\u026e\u026b\u026e\u026e\u026e\u026b\u026e\u026e\u026e\u026b\u026e\u026e\u026e\u026b\u026e\u026e\u026e\u026b\u026e\u026e\u026e\u026b\u026e\u026e\u026e\u026b\u026e\u026e\u026e\u026b\u026e\u026e\u026e\u026b\u026e\u026e\u026e\u026b\u026e\u026e\u026e\u026b\u026e\u026e\u026e\u026b\u026e\u026e\u026e\u026b\u026e\u026e\u026e\u026b\u026e\u026e\u026e\u026b\u026e\u026e\u026e\u026b\u026e\u026e\u026e\u026b\u026e\u026e]]!", "\u0366\u0365\u0368\u0368null!!!null!!!\200\200\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]!" + "'", str2, "]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]!");
    }

    @Test
    public void test11743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11743");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("]]\220\220]]\220\220!!]]\220\220]]\220\220!!]]\220\220]]\220\220]]\220\220]]\220\220!!]]\220\220]]\220\220!!]]\220\220]]\220\220!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]]\220\220]]\220\220!!]]\220\220]]\220\220!!]]\220\220]]\220\220]]\220\220]]\220\220!!]]\220\220]]\220\220!!]]\220\220]]\220\220!" + "'", str2, "]]\220\220]]\220\220!!]]\220\220]]\220\220!!]]\220\220]]\220\220]]\220\220]]\220\220!!]]\220\220]]\220\220!!]]\220\220]]\220\220!");
    }

    @Test
    public void test11744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11744");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276null\276\276\276null\276\276\276\276\276!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11745");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214!", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214!" + "'", str2, "\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214\275\275\u0352\u0352\275\275\u0352\u0352\u0352\275\u0352\u0352\u0352\214\214\u0352\275\u0352\u0352\u0352\214\214!");
    }

    @Test
    public void test11746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11746");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014eLL!", "\u0319\u031a\u031c\u031c\225\230\230\u0319\u031a\u031c\u031c\225\230\230\u0319\u031a\u031c\u031c\225\230\230\u0319\u031a\u031c\u031c\225\230\230\200\u0319\u031a\u031c\u031c\225\230\230\u0319\u031a\u031c\u031c\225\230\230\u0319\u031a\u031c\u031c\225\230\230\u0319\u031a\u031c\u031c\225\230\230]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225!!!!\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225!" + "'", str2, "\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225!!!!\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225!");
    }

    @Test
    public void test11747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11747");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366!", "\336\300\300\300\300\336\300\300!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366!" + "'", str2, "\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366\u0346\u0346\u0366\u0366!");
    }

    @Test
    public void test11748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11748");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f\u0171\u016f\u016f\u016f!", "\276\276nullnull\276\276nullnull!!\276\276nullnull\276\276nullnull!!\276\276nullnull\276\276nullnull\276\276nullnull\276\276nullnull!!\276\276nullnull\276\276nullnull!!\276\276nullnull\276\276nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11749");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("}~\200\200}~\200\200\350^\214\214\350^\214\214}~\200\200}~\200\200\350^\214\214\350^\214\214!", "\200\u0348\u0348\200\u0348\u0348!!\200\u0348\u0348\200\u0348\u0348!!\200\u0348\u0348\200\u0348\u0348\200\u0348\u0348\200\u0348\u0348!!\200\u0348\u0348\200\u0348\u0348!!\200\u0348\u0348\200\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~\200\200}~\200\200null^\214\214null^\214\214}~\200\200}~\200\200null^\214\214null^\214\214!" + "'", str2, "}~\200\200}~\200\200null^\214\214null^\214\214}~\200\200}~\200\200null^\214\214null^\214\214!");
    }

    @Test
    public void test11750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11750");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\275\300\300\300\275\300\300\300\275\300\300\300\275\300\300\300\275\300\300\300\275\300\300\300\275\300\300\300\275\300\300\300!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull!" + "'", str2, "\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull!");
    }

    @Test
    public void test11751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11751");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!U!!!U!!UU~!U!!!U!!UU!U!!!U!!UU!U!!!U!!UU~!U!!!U!!UU!U!!!U!!UU!!!U!!!U!!UU~!U!!!U!!UU!U!!!U!!UU!U!!!U!!UU~!U!!!U!!UU!U!!!U!!UU!!!U!!!U!!UU~!U!!!U!!UU!U!!!U!!UU!U!!!U!!UU~!U!!!U!!UU!U!!!U!!UU!U!!!U!!UU~!U!!!U!!UU!U!!!U!!UU!U!!!U!!UU~!U!!!U!!UU!U!!!U!!UU!!!U!!!U!!UU~!U!!!U!!UU!U!!!U!!UU!U!!!U!!UU~!U!!!U!!UU!U!!!U!!UU!!!U!!!U!!UU~!U!!!U!!UU!U!!!U!!UU!U!!!U!!UU~!U!!!U!!UU!U!!!U!!UU!", "\254\254\200LLL\200LLL\254\254\200LLL\200LLL\254\254\200LLL\200LLL\254\254\200LLL\200LLL\254\254\200LLL\200LLL\254\254\200LLL\200LLL\254\254\200LLL\200LLL\254\254\200LLL\200LLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!!!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!!!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!!!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!!!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!" + "'", str2, "!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!!!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!!!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!!!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!!!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!");
    }

    @Test
    public void test11752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11752");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0348\u0348\u0348}~\200\200}~\200\200nullqnullnullnullqnullnull}~\200\200}~\200\200nullqnullnullnullqnullnull}~\200\200}~\200\200nullqnullnullnullqnullnull}~\200\200}~\200\200\u0348\u0346\u0346!", "\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU\275\276\u014e\u014eLUU!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348}~\200\200}~\200\200\u014e\u014e\u014e\u014e\u014e\u014eLL}~\200\200}~\200\200\u014e\u014e\u014e\u014e\u014e\u014eLL}~\200\200}~\200\200\u014e\u014e\u014e\u014e\u014e\u014eLL}~\200\200}~\200\200\u014e\u014e\u014e\u014e\u014e\u014e\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348}~\200\200}~\200\200\u014e\u014e\u014e\u014e\u014e\u014eLL}~\200\200}~\200\200\u014e\u014e\u014e\u014e\u014e\u014eLL}~\200\200}~\200\200\u014e\u014e\u014e\u014e\u014e\u014eLL}~\200\200}~\200\200\u014e\u014e\u014e\u014e\u014e\u014e\u0348\u0346\u0346!");
    }

    @Test
    public void test11753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11753");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("]LNLLLNLLLNLLLNLLLNLL]]LNLLLNLL]]LNLLLNLL]]LNLLLNLL]]]LNLLLNLLLNLLLNLLLNLL]]LNLLLNLL]]!", "\u0366\u0365\u0368\u0368\u041b\u041c\u041c\u041c\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]!" + "'", str2, "]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]!");
    }

    @Test
    public void test11754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11754");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\200nullnull!!\220\220\200nullnull!!\220\220\200nullnull!!\220\220\200nullnull!!\220\220\200nullnull!!\220\220\200nullnull!!\220\220\200nullnull!!\220\220\200nullnull!!\220\220!", "!~NN!~NN!~NN!~NN!~NN!~NN!~NN!~NN\276\276\266\266\276\276\266\266!~NN!~NN!~NN!~NN!~NN!~NN!~NN!~NN\276\276\266\266\276\276\266\266!~NN!~NN!~NN!~NN!~NN!~NN!~NN!~NN\276\276\266\266\276\276\266\266!~NN!~NN!~NN!~NN!~NN!~NN!~NN!~NN\276\276\266\266\276\276\266\266!~NN!~NN!~NN!~NN!~NN!~NN!~NN!~NN\276\276\266\266\276\276\266\266!~NN!~NN!~NN!~NN!~NN!~NN!~NN!~NN\276\276\266\266\276\276\266\266!~NN!~NN!~NN!~NN!~NN!~NN!~NN!~NN\276\276\266\266\276\276\266\266!~NN!~NN!~NN!~NN!~NN!~NN!~NN!~NN\276\276\266\266\276\276\266\266!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220!" + "'", str2, "\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220\200~!NN~!NN!!\220\220!");
    }

    @Test
    public void test11755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11755");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386\u0386!!!", "null\260\255\255\225\230\230null\260\255\255\225\230\230null\260\255\255\225\230\230null\260\255\255\225\230\230\200}}`null\260\255\255\225\230\230null\260\255\255\225\230\230null\260\255\255\225\230\230null\260\255\255\225\230\230]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]]nullnull]]nullnull!!]]nullnull]]nullnull!!]]nullnull]]nullnull!!]]nullnull]]nullnull!!]]nullnull]]nullnull!!]]nullnull]]nullnull!!]]nullnull]]nullnull!!]]nullnull]]nullnull!!!" + "'", str2, "]]nullnull]]nullnull!!]]nullnull]]nullnull!!]]nullnull]]nullnull!!]]nullnull]]nullnull!!]]nullnull]]nullnull!!]]nullnull]]nullnull!!]]nullnull]]nullnull!!]]nullnull]]nullnull!!!");
    }

    @Test
    public void test11756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11756");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!", "L!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNL!~~L!~~L!~~L!~~L!~~L!~~L!~~L!~~LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!" + "'", str2, "!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!");
    }

    @Test
    public void test11757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11757");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e\u020e!", "\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11758");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!!", "LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!!" + "'", str2, "]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!]!!!!]!!!]]]]]!!!!]!!!]]]]!!!");
    }

    @Test
    public void test11759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11759");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull\254\254\200nullnullnull\200nullnullnull!", "\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!\261\262\264\264\u01e0\u01e0\u01e0\u01e0~~!!!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\254\254\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\254\254\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\254\254\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\254\254\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\254\254\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\254\254\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\254\254\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\254\254\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0!" + "'", str2, "\254\254\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\254\254\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\254\254\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\254\254\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\254\254\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\254\254\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\254\254\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\254\254\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0\200~\264\u01e0\u01e0~\264\u01e0\u01e0~\264\u01e0\u01e0!");
    }

    @Test
    public void test11760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11760");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u014b\u014c\u014e\u014e\u014b\u014c\u014e\u014e!", "nullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull\200}}`nullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NULLNULL!" + "'", str2, "NULLNULL!");
    }

    @Test
    public void test11761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11761");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("]\276!\340\340\276!\340\340!!\276!\340\340\276!\340\340!!\276!\340\340\276!\340\340!!\276!\340\340\276!\340\340!!\276!\340\340\276!\340\340!!]]\276!\340\340\276!\340\340!!\276!\340\340\276!\340\340!!]]\276!\340\340\276!\340\340!!\276!\340\340\276!\340\340!!]]\276!\340\340\276!\340\340!!\276!\340\340\276!\340\340!!]]]\276!\340\340\276!\340\340!!\276!\340\340\276!\340\340!!\276!\340\340\276!\340\340!!\276!\340\340\276!\340\340!!\276!\340\340\276!\340\340!!]]\276!\340\340\276!\340\340!!\276!\340\340\276!\340\340!!]]!", "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!\255\256\260\260\255\256\260\260nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!\255\256\260\260\255\256\260\260!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]\276!LL\276!LL!!\276!LL\276!LL!!\276!LL\276!LL!!\276!LL\276!LL!!\276!LL\276!LL!!]]\276!LL\276!LL!!\276!LL\276!LL!!]]\276!LL\276!LL!!\276!LL\276!LL!!]]\276!LL\276!LL!!\276!LL\276!LL!!]]]\276!LL\276!LL!!\276!LL\276!LL!!\276!LL\276!LL!!\276!LL\276!LL!!\276!LL\276!LL!!]]\276!LL\276!LL!!\276!LL\276!LL!!]]!" + "'", str2, "]\276!LL\276!LL!!\276!LL\276!LL!!\276!LL\276!LL!!\276!LL\276!LL!!\276!LL\276!LL!!]]\276!LL\276!LL!!\276!LL\276!LL!!]]\276!LL\276!LL!!\276!LL\276!LL!!]]\276!LL\276!LL!!\276!LL\276!LL!!]]]\276!LL\276!LL!!\276!LL\276!LL!!\276!LL\276!LL!!\276!LL\276!LL!!\276!LL\276!LL!!]]\276!LL\276!LL!!\276!LL\276!LL!!]]!");
    }

    @Test
    public void test11762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11762");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\215\216\230\230\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e!!!\215\216\230\230\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e!!!\215\216\230\230\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e!!!\215\216\230\230\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e!!!\215\216\230\230\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e!!!\215\216\230\230\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e!!!\215\216\230\230\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e!!!\215\216\230\230\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e\u028b\u028c\u028e\u028e!!!!", "nn\200\200nn\200\200!!nn\200\200nn\200\200!!nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200!!nn\200\200nn\200\200!!nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200!!nn\200\200nn\200\200!!nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200!!nn\200\200nn\200\200!!nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200!!nn\200\200nn\200\200!!nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200!!nn\200\200nn\200\200!!nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200!!nn\200\200nn\200\200!!nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200!!nn\200\200nn\200\200!!nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200nn\200\200!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!" + "'", str2, "\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!\215\216\230\230nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!");
    }

    @Test
    public void test11763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11763");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11764");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("null\276\300\300\300null\276\276\300null\276\276\300null\276\276\300null\276\276null\276\300\300\300null\276\276\300null\276\276!", "\200\200\u01d0\u01d0\200\200\u01d0\u01d0!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull\276nullnullnullnullnullnullnull\276\276nullnullnullnullnull\276\276nullnullnullnullnull\276\276nullnullnullnullnull\276\276nullnullnullnull\276nullnullnullnullnullnullnull\276\276nullnullnullnullnull\276\276!" + "'", str2, "nullnullnullnull\276nullnullnullnullnullnullnull\276\276nullnullnullnullnull\276\276nullnullnullnullnull\276\276nullnullnullnullnull\276\276nullnullnullnull\276nullnullnullnullnullnullnull\276\276nullnullnullnullnull\276\276!");
    }

    @Test
    public void test11765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11765");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!", "null!nullnullnull!nullnull\225\225null!nullnullnull!nullnull\225\225null!nullnullnull!nullnull\225\225null!nullnullnull!nullnull\225\225null!nullnullnull!nullnull\225\225null!nullnullnull!nullnull\225\225null!nullnullnull!nullnull\225\225null!nullnullnull!nullnull\225\225!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!" + "'", str2, "!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!");
    }

    @Test
    public void test11766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11766");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u016e\u016e\u016e\u016e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u016e\u016e\u016e\u016e!", "!NNNNNNNNNNNNNNNN!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "qnullnullnullqnullnullnullnullnullqnullnullnullqnullnullnullnullnullnullqnullnullnullnullnullnullqnullnullnullnullnullnullqnullnullnullnullnullnullqnullnullnullnullnullqnullnullnullqnullnullnullnullnullqnullnullnullqnullnullnullnullnull!" + "'", str2, "qnullnullnullqnullnullnullnullnullqnullnullnullqnullnullnullnullnullnullqnullnullnullnullnullnullqnullnullnullnullnullnullqnullnullnullnullnullnullqnullnullnullnullnullqnullnullnullqnullnullnullnullnullqnullnullnullqnullnullnullnullnull!");
    }

    @Test
    public void test11767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11767");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!", "!!!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!!!nullnullnull!nullnullnull!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test11768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11768");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode~}\200\200~}\200\200nullnull~}\200\200~}\200\200nullnull~}\200\200~}\200\200nullnull~}\200\200~}\200\200nullnull~}\200\200~}\200\200nullnull~}\200\200~}\200\200nullnull~}\200\200~}\200\200nullnull~}\200\200~}\200\200nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LL!" + "'", str2, "L~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LLL~LLL~LLLLL~LLL~LLLLL~LLL~LL!");
    }

    @Test
    public void test11769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11769");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!!null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!!null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!!null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!!null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!", "nullnull\336\336nullnull\336\336!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^!!l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^!!l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^!!l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^!!l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^!" + "'", str2, "l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^!!l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^!!l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^!!l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^!!l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^l!uu]^^!");
    }

    @Test
    public void test11770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11770");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnull\254\254nullnull\254\254nullnull\254\254nullnull\254\254nullnull\254\254nullnull\254\254nullnull\254\254nullnull\254\254nullnull\254\254nullnull\254\254nullnull\254\254nullnull\254\254nullnull\254\254nullnull\254\254!", "\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254!" + "'", str2, "UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254UNLLUNLL\254\254!");
    }

    @Test
    public void test11771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11771");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0259\u0259\u0256\u0256\u0256\u0256\u0259\u0259!", "!~TT!~TT!!!~TT!~TT!!!~TT!~TT!~TT!~TT!!!~TT!~TT!!!~TT!~TT!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11772");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!", "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253LELLLELLLELLLELLLELLLELLLELLLELL\253\253LELLLELLLELLLELLLELLLELLLELLLELL\253\253LELLLELLLELLLELLLELLLELLLELLLELL\253\253LELLLELLLELLLELLLELLLELLLELLLELL\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253LELLLELLLELLLELLLELLLELLLELLLELL\253\253LELLLELLLELLLELLLELLLELLLELLLELL\253\253!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!" + "'", str2, "}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!");
    }

    @Test
    public void test11773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11773");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\230\226NULLNULL\236\276\276\230\226NULLNULL\236\276\276!!\230\226NULLNULL\236\276\276\230\226NULLNULL\236\276\276!!\230\226NULLNULL\236\276\276\230\226NULLNULL\236\276\276\230\226NULLNULL\236\276\276\230\226NULLNULL\236\276\276!!\230\226NULLNULL\236\276\276\230\226NULLNULL\236\276\276!!\230\226NULLNULL\236\276\276\230\226NULLNULL\236\276\276!", "!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!!HH!!HH!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230\226nullnullnullnullnullnullnullnull\236\276\276\230\226nullnullnullnullnullnullnullnull\236\276\276!!\230\226nullnullnullnullnullnullnullnull\236\276\276\230\226nullnullnullnullnullnullnullnull\236\276\276!!\230\226nullnullnullnullnullnullnullnull\236\276\276\230\226nullnullnullnullnullnullnullnull\236\276\276\230\226nullnullnullnullnullnullnullnull\236\276\276\230\226nullnullnullnullnullnullnullnull\236\276\276!!\230\226nullnullnullnullnullnullnullnull\236\276\276\230\226nullnullnullnullnullnullnullnull\236\276\276!!\230\226nullnullnullnullnullnullnullnull\236\276\276\230\226nullnullnullnullnullnullnullnull\236\276\276!" + "'", str2, "\230\226nullnullnullnullnullnullnullnull\236\276\276\230\226nullnullnullnullnullnullnullnull\236\276\276!!\230\226nullnullnullnullnullnullnullnull\236\276\276\230\226nullnullnullnullnullnullnullnull\236\276\276!!\230\226nullnullnullnullnullnullnullnull\236\276\276\230\226nullnullnullnullnullnullnullnull\236\276\276\230\226nullnullnullnullnullnullnullnull\236\276\276\230\226nullnullnullnullnullnullnullnull\236\276\276!!\230\226nullnullnullnullnullnullnullnull\236\276\276\230\226nullnullnullnullnullnullnullnull\236\276\276!!\230\226nullnullnullnullnullnullnullnull\236\276\276\230\226nullnullnullnullnullnullnullnull\236\276\276!");
    }

    @Test
    public void test11774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11774");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!\275\275\275!!\275\275\275!\275\275\275!\275\275\275!!\275\275\275!\275\275\275!!!\275\275\275!!\275\275\275!\275\275\275!\275\275\275!!\275\275\275!\275\275\275!!!", "]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\275\275\275!!\275\275\275!\275\275\275!\275\275\275!!\275\275\275!\275\275\275!!!\275\275\275!!\275\275\275!\275\275\275!\275\275\275!!\275\275\275!\275\275\275!!!" + "'", str2, "!\275\275\275!!\275\275\275!\275\275\275!\275\275\275!!\275\275\275!\275\275\275!!!\275\275\275!!\275\275\275!\275\275\275!\275\275\275!!\275\275\275!\275\275\275!!!");
    }

    @Test
    public void test11775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11775");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!!!!\270\270\270!\270\270\270!!!\270\270\270!\270\270\270!!!\270\270\270!\270\270\270!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\270\270\270!\270\270\270!!!\270\270\270!\270\270\270!!!\270\270\270!\270\270\270!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!\270\270\270!\270\270\270!!!\270\270\270!\270\270\270!!!\270\270\270!\270\270\270!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\270\270\270!\270\270\270!!!\270\270\270!\270\270\270!!!\270\270\270!\270\270\270!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" + "'", str2, "!!!!!\270\270\270!\270\270\270!!!\270\270\270!\270\270\270!!!\270\270\270!\270\270\270!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\270\270\270!\270\270\270!!!\270\270\270!\270\270\270!!!\270\270\270!\270\270\270!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    @Test
    public void test11776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11776");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LUUULL\266UUUULL\266UUUULL\266UUUULL\266UUUULUUULL\266UUUULL\266UUUU!", "\300!!!\300!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnull\266nullnullnullnullnullnull\266nullnullnullnullnullnull\266nullnullnullnullnullnull\266nullnullnullnullnullnullnullnullnullnull\266nullnullnullnullnullnull\266nullnullnullnull!" + "'", str2, "nullnullnullnullnullnull\266nullnullnullnullnullnull\266nullnullnullnullnullnull\266nullnullnullnullnullnull\266nullnullnullnullnullnullnullnullnullnull\266nullnullnullnullnullnull\266nullnullnullnull!");
    }

    @Test
    public void test11777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11777");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "\u0317\u031a\u0317\u031a\u0317\u031a\u0317\u031aP`PPP`PP!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11778");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode}}`]!\271\271]!\271\271]!\271\271]!\271\271]]!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test11779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11779");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("n]nnn]nn!!n]nnn]nn!!n]nnn]nnn]nnn]nn!!n]nnn]nn!!n]nnn]nn!", "!!!!!!!!!!!!!!!!\254~\256\256\254~\256\256\254~\256\256\254~\256\256!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null]nullnullnull]nullnull!!null]nullnullnull]nullnull!!null]nullnullnull]nullnullnull]nullnullnull]nullnull!!null]nullnullnull]nullnull!!null]nullnullnull]nullnull!" + "'", str2, "null]nullnullnull]nullnull!!null]nullnullnull]nullnull!!null]nullnullnull]nullnullnull]nullnullnull]nullnull!!null]nullnullnull]nullnull!!null]nullnullnull]nullnull!");
    }

    @Test
    public void test11780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11780");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!" + "'", str2, "\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253\u0366\u0365\u0368\u0368\u0366\u0365\u0368\u0368!");
    }

    @Test
    public void test11781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11781");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e]]!!!", "!\253\256\256]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e]!\225\225\225\u014e\u014e!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e]]!!!" + "'", str2, "\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e]]!!!");
    }

    @Test
    public void test11782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11782");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\225\230\230\230\225\230\230\230!", "\u0366\u0365\u0368\u0368nullnullnullnull!!!nullnullnullnull!!!\200\200\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\225\230\230\230\225\230\230\230!" + "'", str2, "\225\230\230\230\225\230\230\230!");
    }

    @Test
    public void test11783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11783");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("NLLLNLLL]]NLLLNLLL]]NLLLNLLL]]NLLLNLLL]]~}}^NLLLNLLL]]NLLLNLLL]]NLLLNLLL]]NLLLNLLL]]]]!", "\253\254\256\256!null!!!null!!!null!!!null!!!null!!!null!!\253\254\256\256!null!!!null!!!null!!!null!!!null!!!null!!!!\253\254\256\256!null!!!null!!!null!!!null!!!null!!!null!!\253\254\256\256!null!!!null!!!null!!!null!!!null!!!null!!!!\253\254\256\256!null!!!null!!!null!!!null!!!null!!!null!!\253\254\256\256!null!!!null!!!null!!!null!!!null!!!null!!!!\253\254\256\256!null!!!null!!!null!!!null!!!null!!!null!!\253\254\256\256!null!!!null!!!null!!!null!!!null!!!null!!!!\253\254\256\256!null!!!null!!!null!!!null!!!null!!!null!!\253\254\256\256!null!!!null!!!null!!!null!!!null!!!null!!!!\253\254\256\256!null!!!null!!!null!!!null!!!null!!!null!!\253\254\256\256!null!!!null!!!null!!!null!!!null!!!null!!!!\253\254\256\256!null!!!null!!!null!!!null!!!null!!!null!!\253\254\256\256!null!!!null!!!null!!!null!!!null!!!null!!!!\253\254\256\256!null!!!null!!!null!!!null!!!null!!!null!!\253\254\256\256!null!!!null!!!null!!!null!!!null!!!null!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c]]]]!" + "'", str2, "\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c\u0329\u032c\u032c\u032c]]]]!");
    }

    @Test
    public void test11784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11784");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullRRRnullRRRnullRRRnullRRRnullRRRnullRRRnullRRRnullRRR]]nullRRRnullRRRnullRRRnullRRRnullRRRnullRRRnullRRRnullRRR]]nullRRRnullRRRnullRRRnullRRRnullRRRnullRRRnullRRRnullRRR]]nullRRRnullRRRnullRRRnullRRRnullRRRnullRRRnullRRRnullRRR]]~}}^nullRRRnullRRRnullRRRnullRRRnullRRRnullRRRnullRRRnullRRR]]nullRRRnullRRRnullRRRnullRRRnullRRRnullRRRnullRRRnullRRR]]nullRRRnullRRRnullRRRnullRRRnullRRRnullRRRnullRRRnullRRR]]nullRRRnullRRRnullRRRnullRRRnullRRRnullRRRnullRRRnullRRR]]]]!", "\u0366\u0365\u0368\u0368n!lln!lln!lln!lln!lln!lln!lln!ll\204\204n!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!ll\204\204n!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!ll!!n!lln!lln!lln!lln!lln!lln!lln!ll\204\204n!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!ll\204\204n!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!ll!!n!lln!lln!lln!lln!lln!lln!lln!ll\204\204n!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!ll\204\204n!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!ll!!n!lln!lln!lln!lln!lln!lln!lln!ll\204\204n!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!lln!ll\204\204\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!]]LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!]]LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!]]LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!]]~}}^LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!]]LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!]]LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!]]LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!]]]]!" + "'", str2, "LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!]]LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!]]LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!]]LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!]]~}}^LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!]]LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!]]LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!]]LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!LL!!!!!]]]]!");
    }

    @Test
    public void test11785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11785");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```!", "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```!" + "'", str2, "NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```NNNN```!");
    }

    @Test
    public void test11786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11786");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnull!", "\253\254\256\256\253\254\256\256nullnull\253\254\256\256\253\254\256\256nullnull\253\254\256\256\253\254\256\256nullnull\253\254\256\256\253\254\256\256nullnull\253\254\256\256\253\254\256\256nullnull\253\254\256\256\253\254\256\256nullnull\253\254\256\256\253\254\256\256nullnull\253\254\256\256\253\254\256\256nullnull\253\254\256\256\253\254\256\256nullnull\253\254\256\256\253\254\256\256nullnull\253\254\256\256\253\254\256\256nullnull\253\254\256\256\253\254\256\256nullnull\253\254\256\256\253\254\256\256nullnull\253\254\256\256\253\254\256\256nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "U\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LL!!U\253LLU\253LL!!U\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LLU\253LL!!U\253LLU\253LL!!U\253LLU\253LL!" + "'", str
    }

    @Test
    public void test11787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11787");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\253\254\256\256!UUU!UUU!UUU!UUU\253\254\256\256!UUU!UUU!", "nullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxxnullnullxx!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\254\256\256\u035c\u035c\u035c\u035c\u035c\u035c\u035c\u035c\u035c\u035c\u035c\u035c\253\254\256\256\u035c\u035c\u035c\u035c\u035c\u035c!" + "'", str2, "\253\254\256\256\u035c\u035c\u035c\u035c\u035c\u035c\u035c\u035c\u035c\u035c\u035c\u035c\253\254\256\256\u035c\u035c\u035c\u035c\u035c\u035c!");
    }

    @Test
    public void test11788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11788");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225}LLUULLUULLUU}LLUULLUULLUULLUULLUU}LLUULLUULLUU}LLUULLUULLUULLUULLUU\225\225!", "\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c\u039c!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}}}``}}``}}``}}}``}}``}}``}}``}}``}}}``}}``}}``}}}``}}``}}``}}``}}``\225\225}}}``}}``}}``}}}``}}``}}``}}``}}``}}}``}}``}}``}}}``}}``}}``}}``}}``\225\225}}}``}}``}}``}}}``}}``}}``}}``}}``}}}``}}``}}``}}}``}}``}}``}}``}}``\225\225}}}``}}``}}``}}}``}}``}}``}}``}}``}}}``}}``}}``}}}``}}``}}``}}``}}``\225\225}}}``}}``}}``}}}``}}``}}``}}``}}``}}}``}}``}}``}}}``}}``}}``}}``}}``\225\225}}}``}}``}}``}}}``}}``}}``}}``}}``}}}``}}``}}``}}}``}}``}}``}}``}}``\225\225}}}``}}``}}``}}}``}}``}}``}}``}}``}}}``}}``}}``}}}``}}``}}``}}``}}``\225\225}}}``}}``}}``}}}``}}``}}``}}``}}``}}}``}}``}}``}}}``}}``}}``}}``}}``\225\225!" + "'", str2, "}}}``}}``}}``}}}``}}``}}``}}``}}``}}}``}}``}}``}}}``}}``}}``}}``}}``\225\225}}}``}}``}}``}}}``}}``}}``}}``}}``}}}``}}``}}``}}}``}}``}}``}}``}}``\225\225}}}``}}``}}``}}}``}}``}}``}}``}}``}}}``}}``}}``}}}``}}``}}``}}``}}``\225\225}}}``}}``}}``}}}``}}``}}``}}``}}``}}}``}}``}}``}}}``}}``}}``}}``}}``\225\225}}}``}}``}}``}}}``}}``}}``}}``}}``}}}``}}``}}``}}}``}}``}}``}}``}}``\225\225}}}``}}``}}``}}}``}}``}}``}}``}}``}}}``}}``}}``}}}``}}``}}``}}``}}``\225\225}}}``}}``}}``}}}``}}``}}``}}``}}``}}}``}}``}}``}}}``}}``}}``}}``}}``\225\225}}}``}}``}}``}}}``}}``}}``}}``}}``}}}``}}``}}``}}}``}}``}}``}}``}}``\225\225!");
    }

    @Test
    public void test11789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11789");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("`null]nullnullnull]nullnullnull]nullnull`null]nullnullnull]nullnullnull]nullnull!", "UNLLUNLL!!UNLLUNLL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`porr]porrporrporr]porrporrporr]porrporr`porr]porrporrporr]porrporrporr]porrporr!" + "'", str2, "`porr]porrporrporr]porrporrporr]porrporr`porr]porrporrporr]porrporrporr]porrporr!");
    }

    @Test
    public void test11790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11790");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368nullnullnullnull\213\213\213\u0346\u0348\u0348!", "`!!nullnull!!nullnull!!nullnull`!!nullnull!!nullnull!!nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368U!!!U!!!U!!!U!!!\213\213\213\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368U!!!U!!!U!!!U!!!\213\213\213\u0346\u0348\u0348!");
    }

    @Test
    public void test11791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11791");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnull!!nullnull!!!nullnullnull!nullnullnullnullnull!!nullnull!!!nullnullnull!nullnullnullnullnull!!nullnull!!!nullnullnull!nullnullnullnullnull!!nullnull!!!nullnullnull!nullnullnullnullnull!!nullnull!!!nullnullnull!nullnullnullnullnull!!nullnull!!!nullnullnull!nullnullnullnullnull!!nullnull!!!nullnullnull!nullnullnullnullnull!!nullnull!!!nullnullnull!nullnullnull!", "null~nullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!null~nullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!null~nullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!null~nullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!null~nullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLUULLUU!!LLUULLUU!!!LLUULLUULLUU!LLUULLUULLUULLUULLUU!!LLUULLUU!!!LLUULLUULLUU!LLUULLUULLUULLUULLUU!!LLUULLUU!!!LLUULLUULLUU!LLUULLUULLUULLUULLUU!!LLUULLUU!!!LLUULLUULLUU!LLUULLUULLUULLUULLUU!!LLUULLUU!!!LLUULLUULLUU!LLUULLUULLUULLUULLUU!!LLUULLUU!!!LLUULLUULLUU!LLUULLUULLUULLUULLUU!!LLUULLUU!!!LLUULLUULLUU!LLUULLUULLUULLUULLUU!!LLUULLUU!!!LLUULLUULLUU!LLUULLUULLUU!" + "'", str2, "LLUULLUU!!LLUULLUU!!!LLUULLUULLUU!LLUULLUULLUULLUULLUU!!LLUULLUU!!!LLUULLUULLUU!LLUULLUULLUULLUULLUU!!LLUULLUU!!!LLUULLUULLUU!LLUULLUULLUULLUULLUU!!LLUULLUU!!!LLUULLUULLUU!LLUULLUULLUULLUULLUU!!LLUULLUU!!!LLUULLUULLUU!LLUULLUULLUULLUULLUU!!LLUULLUU!!!LLUULLUULLUU!LLUULLUULLUULLUULLUU!!LLUULLUU!!!LLUULLUULLUU!LLUULLUULLUULLUULLUU!!LLUULLUU!!!LLUULLUULLUU!LLUULLUULLUU!");
    }

    @Test
    public void test11792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11792");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("]!!!]!!!!!]!!!]!!!!!]!!!]!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!", "!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!!HHHHHHHH!!HHHHHHHH!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]!!!]!!!!!]!!!]!!!!!]!!!]!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!" + "'", str2, "]!!!]!!!!!]!!!]!!!!!]!!!]!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!");
    }

    @Test
    public void test11793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11793");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("``UUUUUUUU``UUUUUUUU``UUUUUUUU``UUUUUUUU``UUUUUUUU``UUUUUUUU``UUUUUUUU``UUUUUUUU!", "U!UUU!UUUUU!UUU!UUUUU!UUU!UUUUU!UUU!UUUUU!UUU!UUUUU!UUU!UUUUU!UUU!UUUUU!UUU!UUUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "``UUUUUUUU``UUUUUUUU``UUUUUUUU``UUUUUUUU``UUUUUUUU``UUUUUUUU``UUUUUUUU``UUUUUUUU!" + "'", str2, "``UUUUUUUU``UUUUUUUU``UUUUUUUU``UUUUUUUU``UUUUUUUU``UUUUUUUU``UUUUUUUU``UUUUUUUU!");
    }

    @Test
    public void test11794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11794");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\324\321\321null\324\321\321null\324\321\321null\324\321\321null\324\321\321null\324\321\321null\324\321\321null\324\321\321null\324\321\321null\324\321\321null\324\321\321null\324\321\321null\324\321\321null\324\321\321null\324\321\321null\324\321\321nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\324\321\321null\324\321\321null\324\321\321null\324\321\321null\324\321\321null\324\321\321null\324\321\321null\324\321\321!", "\253\254\256\256N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!\253\254\256\256N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!N!!!NULLN!!!N!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!" + "'", str2, "!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!NLL!NN!");
    }

    @Test
    public void test11795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11795");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\256\256!!\256\256!!\256\256!!\256\256\u0346\u0348\u0348!", "\275UNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLLUNLLUNLL\275\275UNLLUNLL\275\275UNLLUNLL\275\275UNLLUNLL\275\275\275UNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLL\275UNLLUNLLUNLLUNLLUNLL\275\275UNLLUNLL\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\256\256!!\256\256!!\256\256!!\256\256\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\256\256!!\256\256!!\256\256!!\256\256\u0346\u0348\u0348!");
    }

    @Test
    public void test11796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11796");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test11797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11797");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("NLLLNLLLnullnullnullnullnullnullnullnullNLLLNLLLnullnullnullnullnullnullnullnullNLLLNLLLnullnullnullnullnullnullnullnullNLLLNLLLnullnullnullnullnullnullnullnullNLLLNLLLnullnullnullnullnullnullnullnullNLLLNLLLnullnullnullnullnullnullnullnullNLLLNLLLnullnullnullnullnullnullnullnullNLLLNLLLnullnullnullnullnullnullnullnull!", "nullhnullnullnullhnullnull\255\256\260\260\255\256\260\260nullhnullnullnullhnullnull\255\256\260\260\255\256\260\260nullhnullnullnullhnullnull\255\256\260\260\255\256\260\260nullhnullnullnullhnullnull\255\256\260\260\255\256\260\260nullhnullnullnullhnullnull\255\256\260\260\255\256\260\260nullhnullnullnullhnullnull\255\256\260\260\255\256\260\260nullhnullnullnullhnullnull\255\256\260\260\255\256\260\260nullhnullnullnullhnullnull\255\256\260\260\255\256\260\260!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NLLLNLLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNNLLLNLLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNNLLLNLLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNNLLLNLLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNNLLLNLLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNNLLLNLLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNNLLLNLLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNNLLLNLLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNN!" + "'", str2, "NLLLNLLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNNLLLNLLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNNLLLNLLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNNLLLNLLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNNLLLNLLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNNLLLNLLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNNLLLNLLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNNLLLNLLLLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNN!");
    }

    @Test
    public void test11798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11798");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("lluulluu!!lluulluu!!lluulluulluulluu!!lluulluu!!lluulluu!", "!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!``!!``!!!!``!!``!!!!``!!``!!``!!``!!!!``!!``!!!!``!!``!" + "'", str2, "!!``!!``!!!!``!!``!!!!``!!``!!``!!``!!!!``!!``!!!!``!!``!");
    }

    @Test
    public void test11799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11799");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!]!!!!!!]!!!!!!]!!!!!!]!!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!", "!\300]]]\300]]]\300]]]\300]]]\300]]]\300]]]\300]]]\300]]]\300]]]!\300]]]\300]]]\300]]]\300]]]\300]]]\300]]]\300]]]\300]]]\300]]]!\300]]]\300]]]\300]]]\300]]]\300]]]\300]]]\300]]]\300]]]\300]]]!\300]]]\300]]]\300]]]\300]]]\300]]]\300]]]\300]]]\300]]]\300]]]!\300]]]\300]]]\300]]]\300]]]\300]]]\300]]]\300]]]\300]]]\300]]]!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test11800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11800");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!!\200\200!", "\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126ULL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!\200\200!" + "'", str2, "!!!\200\200!");
    }

    @Test
    public void test11801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11801");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("}}EE}}EE}}EE}}EE}}EE}}EE}}EE}}EE!", "\u0366\u0365\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}}!!}}!!}}!!}}!!}}!!}}!!}}!!}}!!!" + "'", str2, "}}!!}}!!}}!!}}!!}}!!}}!!}}!!}}!!!");
    }

    @Test
    public void test11802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11802");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\275HHHHHHHHHHHH\275HHHHHHHHHHHH\275HHHHHHHHHHHH\275HHHHHHHHHHHHHHHHHHHH\275\275HHHHHHHH\275\275HHHHHHHH\275\275HHHHHHHH\275\275\275HHHHHHHHHHHH\275HHHHHHHHHHHH\275HHHHHHHHHHHH\275HHHHHHHHHHHHHHHHHHHH\275\275HHHHHHHH\275\275!", "NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\275\275nullnullnullnullnullnullnullnull\275\275nullnullnullnullnullnullnullnull\275\275nullnullnullnullnullnullnullnull\275\275\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\275\275nullnullnullnullnullnullnullnull\275\275!" + "'", str2, "\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\275\275nullnullnullnullnullnullnullnull\275\275nullnullnullnullnullnullnullnull\275\275nullnullnullnullnullnullnullnull\275\275\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\275\275nullnullnullnullnullnullnullnull\275\275!");
    }

    @Test
    public void test11803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11803");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test11804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11804");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "null\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullqrttqrttqrttqrttqrttqrttqrttqrttnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullnull\275nullnullqrttqrttqrttqrttqrttqrttqrttqrtt!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11805");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad\u01ad]^^!", "}N\200\200}N\200\200}N\200\200}N\200\200ULLLULLLULLLULLL}N\200\200}N\200\200}N\200\200}N\200\200ULLLULLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!!null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!!null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!!null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!!null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!" + "'", str2, "null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!!null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!!null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!!null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!!null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!");
    }

    @Test
    public void test11806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11806");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("t\220!!\200~~t\220!!\200~~t\220!!t\220!!t\220!!\200~~t\220!!\200~~t\220!!t\220!!!!t\220!!\200~~t\220!!\200~~t\220!!t\220!!t\220!!\200~~t\220!!\200~~t\220!!t\220!!!!t\220!!\200~~t\220!!\200~~t\220!!t\220!!t\220!!\200~~t\220!!\200~~t\220!!t\220!!t\220!!\200~~t\220!!\200~~t\220!!t\220!!t\220!!\200~~t\220!!\200~~t\220!!t\220!!!!t\220!!\200~~t\220!!\200~~t\220!!t\220!!t\220!!\200~~t\220!!\200~~t\220!!t\220!!!!t\220!!\200~~t\220!!\200~~t\220!!t\220!!t\220!!\200~~t\220!!\200~~t\220!!t\220!!!", "\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259\u0259!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null\220!!\200~~null\220!!\200~~null\220!!null\220!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!!" + "'", str2, "null\220!!\200~~null\220!!\200~~null\220!!null\220!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!null\220!!\200~~null\220!!\200~~null\220!!null\220!!!");
    }

    @Test
    public void test11807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11807");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```HHHH```!", "~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}~}}}!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```!" + "'", str2, "nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```nullnullnullnull```!");
    }

    @Test
    public void test11808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11808");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("}~\200\200}~\200\200\350^\214\214\350^\214\214}~\200\200}~\200\200\350^\214\214\350^\214\214!", "~}\200\200~}\200\200\276\276!!\276\276!!~}\200\200~}\200\200\276\276!!\276\276!!~}\200\200~}\200\200\276\276!!\276\276!!~}\200\200~}\200\200\276\276!!\276\276!!~}\200\200~}\200\200\276\276!!\276\276!!~}\200\200~}\200\200\276\276!!\276\276!!~}\200\200~}\200\200\276\276!!\276\276!!~}\200\200~}\200\200\276\276!!\276\276!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~\200\200}~\200\200null^\214\214null^\214\214}~\200\200}~\200\200null^\214\214null^\214\214!" + "'", str2, "}~\200\200}~\200\200null^\214\214null^\214\214}~\200\200}~\200\200null^\214\214null^\214\214!");
    }

    @Test
    public void test11809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11809");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0348\u0348\u0348}~\200\200}~\200\200nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``}~\200\200}~\200\200nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``}~\200\200}~\200\200nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnullnullnullnullnull``nullnullnullnullnullnullnullnull``}~\200\200}~\200\200\u0348\u0346\u0346!", "nullnullnullnullnullnullnullnullnnnullnullnullnullnullnullnullnullnnnullnullnullnullnullnullnullnullnnnullnullnullnullnullnullnullnullnnnullnullnullnullnullnullnullnullnnnullnullnullnullnullnullnullnullnnnullnullnullnullnullnullnullnullnnnullnullnullnullnullnullnullnullnn!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348}~\200\200}~\200\200LLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUU``}~\200\200}~\200\200LLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUU``}~\200\200}~\200\200LLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUU``}~\200\200}~\200\200\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348}~\200\200}~\200\200LLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUU``}~\200\200}~\200\200LLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUU``}~\200\200}~\200\200LLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU``LLUULLUULLUULLUULLUULLUULLUULLUU``}~\200\200}~\200\200\u0348\u0346\u0346!");
    }

    @Test
    public void test11810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11810");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("null\225\230\230null\225\230\230null\225\230\230null\225\230\230\200}}`null\225\230\230null\225\230\230null\225\230\230null\225\230\230]]!", "\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u014e\u014e\u014e\225\230\230\u014e\u014e\u014e\225\230\230\u014e\u014e\u014e\225\230\230\u014e\u014e\u014e\225\230\230\200\u014e\u014e\u014e\225\230\230\u014e\u014e\u014e\225\230\230\u014e\u014e\u014e\225\230\230\u014e\u014e\u014e\225\230\230]]!" + "'", str2, "\u014e\u014e\u014e\225\230\230\u014e\u014e\u014e\225\230\230\u014e\u014e\u014e\225\230\230\u014e\u014e\u014e\225\230\230\200\u014e\u014e\u014e\225\230\230\u014e\u014e\u014e\225\230\230\u014e\u014e\u014e\225\230\230\u014e\u014e\u014e\225\230\230]]!");
    }

    @Test
    public void test11811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11811");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!LLL!LLL!lll!lll!lll!lll!lll!lll!lll!lll!LLL!LLL!lll!lll!lll!lll!lll!lll!lll!lll!LLL!LLL!lll!lll!lll!lll!lll!lll!lll!lll!LLL!LLL!lll!lll!lll!lll!lll!lll!lll!lll!LLL!LLL!lll!lll!lll!lll!lll!lll!lll!lll!LLL!LLL!lll!lll!lll!lll!lll!lll!lll!lll!LLL!LLL!lll!lll!lll!lll!lll!lll!lll!lll!LLL!LLL!lll!lll!lll!lll!lll!lll!lll!lll!", "!!FF!!FF!!FF!!FF!!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!!FF!!FF!!FF!!FF!!FF!!FF!!FF!!FF!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!" + "'", str2, "!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!FFF!");
    }

    @Test
    public void test11812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11812");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\253\u0348\u0348\253\u0348\u0348!!\253\u0348\u0348\253\u0348\u0348!!\253\u0348\u0348\253\u0348\u0348\253\u0348\u0348\253\u0348\u0348!!\253\u0348\u0348\253\u0348\u0348!!\253\u0348\u0348\253\u0348\u0348!", "nullnullLNUULNUUnullnullLNUULNUU\214\214nullnullLNUULNUUnullnullLNUULNUU\214\214nullnullLNUULNUUnullnullLNUULNUU\214\214nullnullLNUULNUUnullnullLNUULNUU\214\214nullnullLNUULNUUnullnullLNUULNUU\214\214nullnullLNUULNUUnullnullLNUULNUU\214\214nullnullLNUULNUUnullnullLNUULNUU\214\214nullnullLNUULNUUnullnullLNUULNUU\214\214!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348!!\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348!!\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348!!\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348!!\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348!" + "'", str2, "\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348!!\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348!!\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348!!\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348!!\253\u014e\u014e\u014e\u0348\u0348\253\u014e\u014e\u014e\u0348\u0348!");
    }

    @Test
    public void test11813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11813");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\253\254\256\256LNUULNUULNUULNUU\253\254\256\256LNUULNUU!", "||||||||!!||||||||!!||||||||!!||||||||!!||||!!!||||!!!||||!!!||||!!!||||||||!!||||||||!!||||||||!!||||||||!!||||!!!||||!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\254\256\256||||||||||||||||\253\254\256\256||||||||!" + "'", str2, "\253\254\256\256||||||||||||||||\253\254\256\256||||||||!");
    }

    @Test
    public void test11814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11814");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0348\u0348\u0348}~\200\200}~\200\200ULLLULLLULLLULLLULLLULLLULLLULLL}~\200\200}~\200\200ULLLULLLULLLULLLULLLULLLULLLULLL}~\200\200}~\200\200ULLLULLLULLLULLLULLLULLLULLLULLL}~\200\200}~\200\200\u0348\u0346\u0346!", "\275\200!]]\200!]]\200!]]\275\200!]]\200!]]\200!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348}~\200\200}~\200\200]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}~\200\200}~\200\200]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}~\200\200}~\200\200]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}~\200\200}~\200\200\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348}~\200\200}~\200\200]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}~\200\200}~\200\200]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}~\200\200}~\200\200]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}~\200\200}~\200\200\u0348\u0346\u0346!");
    }

    @Test
    public void test11815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11815");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("RRUU!!UU!!RRUU!!UU!!RRUU!!UU!!RRUU!!UU!!RRUU!!UU!!RRUU!!UU!!RRUU!!UU!!RRUU!!UU!!!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200``NN``NN}~\200\200}~\200\200``NN``NN}~\200\200}~\200\200``NN``NN}~\200\200}~\200\200\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!!" + "'", str2, "nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnullnullnull!!nullnull!!!");
    }

    @Test
    public void test11816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11816");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\276null\266\266~nullnull\276null\266\266~nullnull!!\276null\266\266~nullnull\276null\266\266~nullnull!!\276null\266\266~nullnull\276null\266\266~nullnull\276null\266\266~nullnull\276null\266\266~nullnull!!\276null\266\266~nullnull\276null\266\266~nullnull!!\276null\266\266~nullnull\276null\266\266~nullnull!", "\253\254\256\256UUUUUUUUUUUUUUUUUUUUUUUU\253\254\256\256UUUUUUUUUUUUUUUUUUUUUUUU!!\253\254\256\256UUUUUUUUUUUUUUUUUUUUUUUU\253\254\256\256UUUUUUUUUUUUUUUUUUUUUUUU!!\253\254\256\256UUUUUUUUUUUUUUUUUUUUUUUU\253\254\256\256UUUUUUUUUUUUUUUUUUUUUUUU!!\253\254\256\256UUUUUUUUUUUUUUUUUUUUUUUU\253\254\256\256UUUUUUUUUUUUUUUUUUUUUUUU!!\253\254\256\256UUUUUUUUUUUUUUUUUUUUUUUU\253\254\256\256UUUUUUUUUUUUUUUUUUUUUUUU!!\253\254\256\256UUUUUUUUUUUUUUUUUUUUUUUU\253\254\256\256UUUUUUUUUUUUUUUUUUUUUUUU!!\253\254\256\256UUUUUUUUUUUUUUUUUUUUUUUU\253\254\256\256UUUUUUUUUUUUUUUUUUUUUUUU!!\253\254\256\256UUUUUUUUUUUUUUUUUUUUUUUU\253\254\256\256UUUUUUUUUUUUUUUUUUUUUUUU!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276\u022enullnull\266\266\u022e\u022enullnull\276\u022enullnull\266\266\u022e\u022enullnull!!\276\u022enullnull\266\266\u022e\u022enullnull\276\u022enullnull\266\266\u022e\u022enullnull!!\276\u022enullnull\266\266\u022e\u022enullnull\276\u022enullnull\266\266\u022e\u022enullnull\276\u022enullnull\266\266\u022e\u022enullnull\276\u022enullnull\266\266\u022e\u022enullnull!!\276\u022enullnull\266\266\u022e\u022enullnull\276\u022enullnull\266\266\u022e\u022enullnull!!\276\u022enullnull\266\266\u022e\u022enullnull\276\u022enullnull\266\266\u022e\u022enullnull!" + "'", str2, "\276\u022enullnull\266\266\u022e\u022enullnull\276\u022enullnull\266\266\u022e\u022enullnull!!\276\u022enullnull\266\266\u022e\u022enullnull\276\u022enullnull\266\266\u022e\u022enullnull!!\276\u022enullnull\266\266\u022e\u022enullnull\276\u022enullnull\266\266\u022e\u022enullnull\276\u022enullnull\266\266\u022e\u022enullnull\276\u022enullnull\266\266\u022e\u022enullnull!!\276\u022enullnull\266\266\u022e\u022enullnull\276\u022enullnull\266\266\u022e\u022enullnull!!\276\u022enullnull\266\266\u022e\u022enullnull\276\u022enullnull\266\266\u022e\u022enullnull!");
    }

    @Test
    public void test11817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11817");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("}!\200\200}!\200\200}!\200\200}!\200\200\230C\215\215\230C\215\215\230C\215\215\230C\215\215\230C\215\215\230C\215\215\230C\215\215\230C\215\215\230C\215\215\230C\215\215\230C\215\215\230C\215\215\230C\215\215\230C\215\215\230C\215\215\230C\215\215}!\200\200}!\200\200}!\200\200}!\200\200\230C\215\215\230C\215\215\230C\215\215\230C\215\215\230C\215\215\230C\215\215\230C\215\215\230C\215\215!", "}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull}^nullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}!\200\200}!\200\200}!\200\200}!\200\200\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215}!\200\200}!\200\200}!\200\200}!\200\200\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215!" + "'", str2, "}!\200\200}!\200\200}!\200\200}!\200\200\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215}!\200\200}!\200\200}!\200\200}!\200\200\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215\230N\215\215!");
    }

    @Test
    public void test11818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11818");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02be\u02be\u02bb\u02bc\u02be\u02be\u02be\u02be\u02bb\u02bc\u02be\u02be\u02be\u02be\u02bb\u02bc\u02be\u02be\u02be\u02be!", "UULLUULLLLUULLUUUULLUULLLLUULLUUUULLUULLLLUULLUUUULLUULLLLUULLUUUULLUULLLLUULLUUUULLUULLLLUULLUUUULLUULLLLUULLUUUULLUULLLLUULLUU!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\340\336\336nullnullnullnullnullnullnull\340\336\336nullnullnullnullnullnullnull\340\336\336nullnullnullnullnullnullnull\340\336\336nullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\340\336\336nullnullnullnullnullnullnull\340\336\336nullnullnullnullnullnullnull\340\336\336nullnullnullnullnullnullnull\340\336\336nullnullnullnullnullnull!");
    }

    @Test
    public void test11819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11819");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("H!!!H!!!H!!!H!!!H!!!H!!!H!!!H!!!!", "uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275nullnullnullnulluu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275nullnullnullnulluu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275nullnullnullnulluu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275nullnullnullnulluu\275\275uu\275\275uu\275\275uu\275\275uu\275\275uu\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!!" + "'", str2, "\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!\275!!!!");
    }

    @Test
    public void test11820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11820");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUU!", "\226\230\225\225\226\230\225\225\226\230\225\225\226\230\225\225\226\230\225\225\226\230\225\225\226\230\225\225\226\230\225\225\226\230\225\225\226\230\225\225\226\230\225\225\226\230\225\225\226\230\225\225\226\230\225\225\226\230\225\225\226\230\225\225\226\230\225\225\226\230\225\225\226\230\225\225\226\230\225\225!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11821");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\275!nullnullnull!nullnullnull!nullnullnull\275!nullnullnull!nullnullnull!nullnullnull\275!nullnullnull!nullnullnull!nullnullnull\275!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull\275\275!nullnullnull!nullnullnull\275\275!nullnullnull!nullnullnull\275\275!nullnullnull!nullnullnull\275\275\275!nullnullnull!nullnullnull!nullnullnull\275!nullnullnull!nullnullnull!nullnullnull\275!nullnullnull!nullnullnull!nullnullnull\275!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull\275\275!nullnullnull!nullnullnull\275\275!", "}~\200\200}~\200\200null^nullnullnull^nullnull}~\200\200}~\200\200null^nullnullnull^nullnull!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test11822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11822");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!\276\276\276\276\276!!!", "nullnulleenullnulleenullnull\220nullnulleenullnullee\200}}`nullnulleenullnulleenullnull\220nullnulleenullnullee]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\276\276\276\276\276!!!" + "'", str2, "!\276\276\276\276\276!!!");
    }

    @Test
    public void test11823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11823");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!!!!!!!!", "\275nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!" + "'", str2, "!!!!!!!!!");
    }

    @Test
    public void test11824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11824");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\200\200!", "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348u}}}u}}}u}}}!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200\200!" + "'", str2, "\200\200!");
    }

    @Test
    public void test11825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11825");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253\273\272\275\275\273\272\275\275\253\253\273\272\275\275\273\272\275\275\253\253\273\272\275\275\273\272\275\275\253\253\273\272\275\275\273\272\275\275\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253\273\272\275\275\273\272\275\275\253\253\273\272\275\275\273\272\275\275\253\253!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253\273null\275\275\273null\275\275\253\253\273null\275\275\273null\275\275\253\253\273null\275\275\273null\275\275\253\253\273null\275\275\273null\275\275\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253\273null\275\275\273null\275\275\253\253\273null\275\275\273null\275\275\253\253!" + "'", str2, "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253\273null\275\275\273null\275\275\253\253\273null\275\275\273null\275\275\253\253\273null\275\275\273null\275\275\253\253\273null\275\275\273null\275\275\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253\273null\275\275\273null\275\275\253\253\273null\275\275\273null\275\275\253\253!");
    }

    @Test
    public void test11826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11826");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!\276\276\276\276\276!!!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\276\276\276\276\276!!!" + "'", str2, "!\276\276\276\276\276!!!");
    }

    @Test
    public void test11827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11827");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!nullnullnull!nullnullnull!nullnullnull!nullnullnull\200}}`!nullnullnull!nullnullnull!nullnullnull!nullnullnull]]!", "UNLL]]]UNLL]]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!ihkkihkkihkk!ihkkihkkihkk!ihkkihkkihkk!ihkkihkkihkk\200}}`!ihkkihkkihkk!ihkkihkkihkk!ihkkihkkihkk!ihkkihkkihkk]]!" + "'", str2, "!ihkkihkkihkk!ihkkihkkihkk!ihkkihkkihkk!ihkkihkkihkk\200}}`!ihkkihkkihkk!ihkkihkkihkk!ihkkihkkihkk!ihkkihkkihkk]]!");
    }

    @Test
    public void test11828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11828");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!L!LLL!LL!!!", "!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!~!!\220!!!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test11829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11829");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```!", "!!NLLLNLLL!!NLLLNLLL!!!!NLLLNLLL!!NLLLNLLL!!!!NLLLNLLL!!NLLLNLLL!!!!NLLLNLLL!!NLLLNLLL!!!!NLLLNLLL!!NLLLNLLL!!!!NLLLNLLL!!NLLLNLLL!!!!NLLLNLLL!!NLLLNLLL!!!!NLLLNLLL!!NLLLNLLL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```!" + "'", str2, "\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```\353\356!!!\275\275!!!```!");
    }

    @Test
    public void test11830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11830");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\275UUU\276\276\276U\276\275UUU\275UUU!!\275UUU\276\276\276U\276\275UUU\275UUU!!!", "LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275nullnullnull\276\276\276null\276\275nullnullnull\275nullnullnull!!\275nullnullnull\276\276\276null\276\275nullnullnull\275nullnullnull!!!" + "'", str2, "\275nullnullnull\276\276\276null\276\275nullnullnull\275nullnullnull!!\275nullnullnull\276\276\276null\276\275nullnullnull\275nullnullnull!!!");
    }

    @Test
    public void test11831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11831");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295!", "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`null!nullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnull`null!nullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnull!" + "'", str2, "`null!nullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnull`null!nullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnull!");
    }

    @Test
    public void test11832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11832");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]\200}}`!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]]]!", "!!~ULLLULLL!!!!~ULLLULLL!!!!!!~ULLLULLL!!!!~ULLLULLL!!!!!!~ULLLULLL!!!!~ULLLULLL!!!!~ULLLULLL!!!!~ULLLULLL!!!!!!~ULLLULLL!!!!~ULLLULLL!!!!!!~ULLLULLL!!!!~ULLLULLL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]\200}}`!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]]]!" + "'", str2, "!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]\200}}`!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]]]!");
    }

    @Test
    public void test11833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11833");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "UU!!UU!!!!UU!!UU!!!!!!UU!!UU!!!!UU!!UU!!!!!!UU!!UU!!!!UU!!UU!!!!!!UU!!UU!!!!UU!!UU!!!!!!UU!!UU!!!!UU!!UU!!!!!!UU!!UU!!!!UU!!UU!!!!!!UU!!UU!!!!UU!!UU!!!!!!UU!!UU!!!!UU!!UU!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11834");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!\271\271!!\271\271\271\271!!\271\271!!!!\271\271!!\271\271\271\271!!\271\271!!!", "\336\336\336\336nullnullnull\256\254\254\336\336\336\336nullnullnull\256\254\254!!\336\336\336\336nullnullnull\256\254\254\336\336\336\336nullnullnull\256\254\254!!\336\336\336\336nullnullnull\256\254\254\336\336\336\336nullnullnull\256\254\254!!\336\336\336\336nullnullnull\256\254\254\336\336\336\336nullnullnull\256\254\254!!\336\336\336\336nullnullnull\256\254\254\336\336\336\336nullnullnull\256\254\254!!\336\336\336\336nullnullnull\256\254\254\336\336\336\336nullnullnull\256\254\254!!\336\336\336\336nullnullnull\256\254\254\336\336\336\336nullnullnull\256\254\254!!\336\336\336\336nullnullnull\256\254\254\336\336\336\336nullnullnull\256\254\254!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\271\271!!\271\271\271\271!!\271\271!!!!\271\271!!\271\271\271\271!!\271\271!!!" + "'", str2, "!!\271\271!!\271\271\271\271!!\271\271!!!!\271\271!!\271\271\271\271!!\271\271!!!");
    }

    @Test
    public void test11835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11835");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````!!````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````!!````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````!!````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````!!````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````!", "\266\266\266\266\266\266\266\266\266\266\266\266\266\266\266\266\200}}`\266\266\266\266\266\266\266\266\266\266\266\266\266\266\266\266]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````!!````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````!!````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````!!````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````!!````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````!" + "'", str2, "````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````!!````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````!!````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````!!````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````!!````\220````````\200~~````\220````````\200~~````\220````````````\220````````````\220````````\200~~````\220````````\200~~````\220````````````\220````````!");
    }

    @Test
    public void test11836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11836");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```NL!!!\275\275!!!```!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test11837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11837");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253\253\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253\253]]!", "LL!!!!LL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253\253\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253\253]]!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253\253\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\253\253\253]]!");
    }

    @Test
    public void test11838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11838");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\u02fa\u02fa\u02fa\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\u02faLNNNLNNNLNNN!", "LL!!LL!!LLLLLLLLLL!!LL!!LLLLLLLLLL!!LL!!LLLLLLLLLL!!LL!!LLLLLLLLLL!!LL!!LLLLLLLLLL!!LL!!LLLLLLLLLL!!LL!!LLLLLLLLLL!!LL!!LLLLLLLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\300nullnullnull\300nullnullnull\300\u02fa\300nullnullnull\300nullnullnull\300\u02fa\300nullnullnull\300nullnullnull\300\u02fa\300nullnullnull\300nullnullnull\300\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\300nullnullnull\300nullnullnull\300\u02fa\300nullnullnull\300nullnullnull\300nullnullnull!" + "'", str2, "\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\300nullnullnull\300nullnullnull\300\u02fa\300nullnullnull\300nullnullnull\300\u02fa\300nullnullnull\300nullnullnull\300\u02fa\300nullnullnull\300nullnullnull\300\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\300nullnullnull\300nullnullnull\300\u02fa\300nullnullnull\300nullnullnull\300nullnullnull!");
    }

    @Test
    public void test11839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11839");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("`UNUUUNUUUNUU`UNUUUNUUUNUU!", "NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!NHHHNHHHHH!!HH!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`NHNNNHNNNHNN`NHNNNHNNNHNN!" + "'", str2, "`NHNNNHNNNHNN`NHNNNHNNNHNN!");
    }

    @Test
    public void test11840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11840");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("nn!!uunnuunnuunnnn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!uunnuunnuunnnn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!!", "\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180\u0180!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\222\222!!\223\223\222\222\223\223\222\222\223\223\222\222\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\223\223\222\222\223\223\222\222\223\223\222\222\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!!" + "'", str2, "\222\222!!\223\223\222\222\223\223\222\222\223\223\222\222\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\223\223\222\222\223\223\222\222\223\223\222\222\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!\222\222!!!");
    }

    @Test
    public void test11841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11841");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230~}\200\200~}\200\200UNLL}\200\200UNLL}\200\200\230\230UNLL}\200\200UNLL}\200\200\230\230!", "\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!\214!!!\214!!!\214!!!\214!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200!!!!}\200\200!!!!}\200\200\230\230!!!!}\200\200!!!!}\200\200\230\230~}\200\200~}\200\200!!!!}\200\200!!!!}\200\200\230\230!!!!}\200\200!!!!}\200\200\230\230~}\200\200~}\200\200!!!!}\200\200!!!!}\200\200\230\230!!!!}\200\200!!!!}\200\200\230\230~}\200\200~}\200\200!!!!}\200\200!!!!}\200\200\230\230!!!!}\200\200!!!!}\200\200\230\230~}\200\200~}\200\200!!!!}\200\200!!!!}\200\200\230\230!!!!}\200\200!!!!}\200\200\230\230~}\200\200~}\200\200!!!!}\200\200!!!!}\200\200\230\230!!!!}\200\200!!!!}\200\200\230\230~}\200\200~}\200\200!!!!}\200\200!!!!}\200\200\230\230!!!!}\200\200!!!!}\200\200\230\230~}\200\200~}\200\200!!!!}\200\200!!!!}\200\200\230\230!!!!}\200\200!!!!}\200\200\230\230!" + "'", str2, "~}\200\200~}\200\200!!!!}\200\200!!!!}\200\200\230\230!!!!}\200\200!!!!}\200\200\230\230~}\200\200~}\200\200!!!!}\200\200!!!!}\200\200\230\230!!!!}\200\200!!!!}\200\200\230\230~}\200\200~}\200\200!!!!}\200\200!!!!}\200\200\230\230!!!!}\200\200!!!!}\200\200\230\230~}\200\200~}\200\200!!!!}\200\200!!!!}\200\200\230\230!!!!}\200\200!!!!}\200\200\230\230~}\200\200~}\200\200!!!!}\200\200!!!!}\200\200\230\230!!!!}\200\200!!!!}\200\200\230\230~}\200\200~}\200\200!!!!}\200\200!!!!}\200\200\230\230!!!!}\200\200!!!!}\200\200\230\230~}\200\200~}\200\200!!!!}\200\200!!!!}\200\200\230\230!!!!}\200\200!!!!}\200\200\230\230~}\200\200~}\200\200!!!!}\200\200!!!!}\200\200\230\230!!!!}\200\200!!!!}\200\200\230\230!");
    }

    @Test
    public void test11842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11842");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!!!LLLLLLLL!!LLLLLLLL!!!!LLLLLLLL!!LLLLLLLL!!!!LLLLLLLL!!LLLLLLLL!!!!LLLLLLLL!!LLLLLLLL!!!!LLLLLLLL!!LLLLLLLL!!!!LLLLLLLL!!LLLLLLLL!!!!LLLLLLLL!!LLLLLLLL!!!!LLLLLLLL!!LLLLLLLL!", "NN]]NN]]UNNNUNNNNN]]NN]]UNNNUNNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!NNNNNNNN!!NNNNNNNN!!!!NNNNNNNN!!NNNNNNNN!!!!NNNNNNNN!!NNNNNNNN!!!!NNNNNNNN!!NNNNNNNN!!!!NNNNNNNN!!NNNNNNNN!!!!NNNNNNNN!!NNNNNNNN!!!!NNNNNNNN!!NNNNNNNN!!!!NNNNNNNN!!NNNNNNNN!" + "'", str2, "!!!!NNNNNNNN!!NNNNNNNN!!!!NNNNNNNN!!NNNNNNNN!!!!NNNNNNNN!!NNNNNNNN!!!!NNNNNNNN!!NNNNNNNN!!!!NNNNNNNN!!NNNNNNNN!!!!NNNNNNNN!!NNNNNNNN!!!!NNNNNNNN!!NNNNNNNN!!!!NNNNNNNN!!NNNNNNNN!");
    }

    @Test
    public void test11843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11843");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!", "NNNN!nullnullNNNN!nullnull!nullnullnull!nullnullnullNNNN!nullnullNNNN!nullnull!nullnullnull!nullnullnull!!NNNN!nullnullNNNN!nullnull!nullnullnull!nullnullnullNNNN!nullnullNNNN!nullnull!nullnullnull!nullnullnull!!NNNN!nullnullNNNN!nullnull!nullnullnull!nullnullnullNNNN!nullnullNNNN!nullnull!nullnullnull!nullnullnullNNNN!nullnullNNNN!nullnull!nullnullnull!nullnullnullNNNN!nullnullNNNN!nullnull!nullnullnull!nullnullnull!!NNNN!nullnullNNNN!nullnull!nullnullnull!nullnullnullNNNN!nullnullNNNN!nullnull!nullnullnull!nullnullnull!!NNNN!nullnullNNNN!nullnull!nullnullnull!nullnullnullNNNN!nullnullNNNN!nullnull!nullnullnull!nullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!" + "'", str2, "!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!~~~!~~~!!!");
    }

    @Test
    public void test11844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11844");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!TTT!", "UUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNNNUUNNUUNNNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNNNUUNNUUNNNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNNNUUNNUUNNNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNNNUUNNUUNNNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNNNUUNNUUNNNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNNNUUNNUUNNNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNNNUUNNUUNNNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNUUNNNNUUNNUUNNNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!" + "'", str2, "!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!");
    }

    @Test
    public void test11845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11845");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullooonullooonullooonullooo\200}}`nullooonullooonullooonullooo]]!", "\u0245\u023d\u0248\u0248\u0245\u023d\u0248\u0248\u0245\u023d\u0248\u0248\u0245\u023d\u0248\u0248\u0245\u023d\u0248\u0248\u0245\u023d\u0248\u0248\u0245\u023d\u0248\u0248\u0245\u023d\u0248\u0248!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u019a\u028c\u0249\u0249\u0249\u0249\u0249\u019a\u028c\u0249\u0249\u0249\u0249\u0249\u019a\u028c\u0249\u0249\u0249\u0249\u0249\u019a\u028c\u0249\u0249\u0249\u0249\u0249\200\u019a\u028c\u0249\u0249\u0249\u0249\u0249\u019a\u028c\u0249\u0249\u0249\u0249\u0249\u019a\u028c\u0249\u0249\u0249\u0249\u0249\u019a\u028c\u0249\u0249\u0249\u0249\u0249]]!" + "'", str2, "\u019a\u028c\u0249\u0249\u0249\u0249\u0249\u019a\u028c\u0249\u0249\u0249\u0249\u0249\u019a\u028c\u0249\u0249\u0249\u0249\u0249\u019a\u028c\u0249\u0249\u0249\u0249\u0249\200\u019a\u028c\u0249\u0249\u0249\u0249\u0249\u019a\u028c\u0249\u0249\u0249\u0249\u0249\u019a\u028c\u0249\u0249\u0249\u0249\u0249\u019a\u028c\u0249\u0249\u0249\u0249\u0249]]!");
    }

    @Test
    public void test11846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11846");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\324null\326\326\324null\326\326\324\324\324null\326\326\324null\326\326\324\324!!\324null\326\326\324null\326\326\324\324\324null\326\326\324null\326\326\324\324!!\324null\326\326\324null\326\326\324\324\324null\326\326\324null\326\326\324\324!!\324null\326\326\324null\326\326\324\324\324null\326\326\324null\326\326\324\324!!\324null\326\326\324null\326\326\324\324\324null\326\326\324null\326\326\324\324!!\324null\326\326\324null\326\326\324\324\324null\326\326\324null\326\326\324\324!!\324null\326\326\324null\326\326\324\324\324null\326\326\324null\326\326\324\324!!\324null\326\326\324null\326\326\324\324\324null\326\326\324null\326\326\324\324!!!", "N\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNN!!N\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNN!!N\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNN!!N\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNN!!N\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNNN\275NNN\275NNNN!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test11847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11847");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("NNLLNNLLNNLLNNLLNNLL!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11848");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\215\216\230\230L!~~L!~~L!~~\215\216\230\230L!~~L!~~L!~~\215\216\230\230L!~~L!~~L!~~\215\216\230\230L!~~L!~~L!~~\215\216\230\230L!~~L!~~L!~~\215\216\230\230L!~~L!~~L!~~\215\216\230\230L!~~L!~~L!~~\215\216\230\230L!~~L!~~L!~~!", "}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200}!!!!!!!!!!!!!!!!!!!\200\200!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!!!!!!!!!!!!!!!!!~~!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\215\216\230\230null!~~null!~~null!~~\215\216\230\230null!~~null!~~null!~~\215\216\230\230null!~~null!~~null!~~\215\216\230\230null!~~null!~~null!~~\215\216\230\230null!~~null!~~null!~~\215\216\230\230null!~~null!~~null!~~\215\216\230\230null!~~null!~~null!~~\215\216\230\230null!~~null!~~null!~~!" + "'", str2, "\215\216\230\230null!~~null!~~null!~~\215\216\230\230null!~~null!~~null!~~\215\216\230\230null!~~null!~~null!~~\215\216\230\230null!~~null!~~null!~~\215\216\230\230null!~~null!~~null!~~\215\216\230\230null!~~null!~~null!~~\215\216\230\230null!~~null!~~null!~~\215\216\230\230null!~~null!~~null!~~!");
    }

    @Test
    public void test11849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11849");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "!!nullnullnullnullnullnullnullnull!!!!!!!!nullnullnullnullnullnullnullnull!!!!!!!!!!nullnullnullnullnullnullnullnull!!!!!!!!nullnullnullnullnullnullnullnull!!!!!!!!!!nullnullnullnullnullnullnullnull!!!!!!!!nullnullnullnullnullnullnullnull!!!!!!!!!!nullnullnullnullnullnullnullnull!!!!!!!!nullnullnullnullnullnullnullnull!!!!!!!!!!nullnullnullnullnullnullnullnull!!!!!!!!nullnullnullnullnullnullnullnull!!!!!!!!!!nullnullnullnullnullnullnullnull!!!!!!!!nullnullnullnullnullnullnullnull!!!!!!!!!!nullnullnullnullnullnullnullnull!!!!!!!!nullnullnullnullnullnullnullnull!!!!!!!!!!nullnullnullnullnullnullnullnull!!!!!!!!nullnullnullnullnullnullnullnull!!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11850");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0348\u0348\u0348\u037e\u037e\u0348\u0346\u0346!", "orrrorrrrrorrrorrrrrorrrorrrrrorrrorrrrrorrrorrrrrorrrorrrrrorrrorrrrrorrrorrrrr!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u037e\u037e\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u037e\u037e\u0348\u0346\u0346!");
    }

    @Test
    public void test11851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11851");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decodeu0346\u0348\u0348\u0348\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullHHnullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254nullnullHHnullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254nullnullHHnullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254nullnullHHnullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254nullnullHHnullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254nullnullHHnullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254nullnullHHnullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254nullnullHHnullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254!" + "'", str2, "nullnullHHnullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254nullnullHHnullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254nullnullHHnullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254nullnullHHnullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254nullnullHHnullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254nullnullHHnullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254nullnullHHnullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254nullnullHHnullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254\256nullnullHH\254\254!");
    }

    @Test
    public void test11852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11852");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]\200}}`!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]]]!", "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253!!!!!!!!\253\253!!!!!!!!\253\253!!!!!!!!\253\253!!!!!!!!\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253!!!!!!!!\253\253!!!!!!!!\253\253!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]\200}}`!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]]]!" + "'", str2, "!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]\200}}`!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]!]]]]]]]]]]]]]]!");
    }

    @Test
    public void test11853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11853");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0143\u0145\u0145\u0145\u0143\u0145\u0143\u0145\u0143\u0145\u0143\u0143\u0145\u0145\u0145\u0143\u0145\u0143!!!", "\275NNN\275NNN\275NNN\275NNN\275NNN\275NNN\275NNN\275NNN!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null!nullnullnullnull!!nullnull!!nullnull!!nullnull!!null!nullnullnullnull!!nullnull!!!" + "'", str2, "null!nullnullnullnull!!nullnull!!nullnull!!nullnull!!null!nullnullnullnull!!nullnull!!!");
    }

    @Test
    public void test11854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11854");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!!" + "'", str2, "]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!]\220!!\200~~]\220!!\200~~]\220!!]\220!!!");
    }

    @Test
    public void test11855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11855");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!!", "\u0348l!!\200\u0348l!!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!!" + "'", str2, "~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!~\200\200\200\200\220\216\216\200\220\216\216!!!!!!!");
    }

    @Test
    public void test11856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11856");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225!", "\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!\216\216~!!!~!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225!" + "'", str2, "^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225^```^```^```^```^```^```^```^```^```^```!!\225\225!!\225\225^```^```!!\225\225!!\225\225!");
    }

    @Test
    public void test11857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11857");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253!!\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253\256!\253\253!!\200\200\u0346\u0348\u0348!", "\255\256\260\260\255\256\260\260!!!!!\255\256\260\260\255\256\260\260!!!!!!!\255\256\260\260\255\256\260\260!!!!!\255\256\260\260\255\256\260\260!!!!!!!\255\256\260\260\255\256\260\260!!!!!\255\256\260\260\255\256\260\260!!!!!!!\255\256\260\260\255\256\260\260!!!!!\255\256\260\260\255\256\260\260!!!!!!!\255\256\260\260\255\256\260\260!!!!!\255\256\260\260\255\256\260\260!!!!!!!\255\256\260\260\255\256\260\260!!!!!\255\256\260\260\255\256\260\260!!!!!!!\255\256\260\260\255\256\260\260!!!!!\255\256\260\260\255\256\260\260!!!!!!!\255\256\260\260\255\256\260\260!!!!!\255\256\260\260\255\256\260\260!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\uu0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\uu0346\u0348\u0348!");
    }

    @Test
    public void test11858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11858");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u0317\u031a\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u0317\u031a\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u0317\u031a\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u0317\u031a\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0!", "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0317\u031a\u0317\u031a\u0317\u031a\u0317\u031anullnullnullnullnullnullnullnull!" + "'", str2, "\u0317\u031a\u0317\u031a\u0317\u031a\u0317\u031anullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11859");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("vvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuu\200}}`vvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuuvvuu]]!", "\u0366\u0365\u0368\u0368\215\215!!\215\215!!\215\215!!\215\215!!\213\213\213\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!");
    }

    @Test
    public void test11860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11860");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("t!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!!!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!!!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!!!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!!!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!!!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!!!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!!!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!t!!!!!!!!", "\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!!!!" + "'", str2, "null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!!!!!");
    }

    @Test
    public void test11861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11861");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108\u0105\u0108\u0108\u0108!", "nullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHH!!nullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHH!!nullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHH!!nullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHH!!nullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHHnullnullHH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUU!" + "'", str2, "LUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUU!");
    }

    @Test
    public void test11862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11862");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!!!", "\u0170\u0170\u0170\u0170nullnullnullnullnullnullnullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!~nullnull!!!!~nullnull!!!!!!~nullnull!!!!~nullnull!!!!!!~nullnull!!!!~nullnull!!!!~nullnull!!!!~nullnull!!!!!!~nullnull!!!!~nullnull!!!!!!~nullnull!!!!~nullnull!!!" + "'", str2, "!!~nullnull!!!!~nullnull!!!!!!~nullnull!!!!~nullnull!!!!!!~nullnull!!!!~nullnull!!!!~nullnull!!!!~nullnull!!!!!!~nullnull!!!!~nullnull!!!!!!~nullnull!!!!~nullnull!!!");
    }

    @Test
    public void test11863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11863");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("]^``]^``!!]^``]^``!!]^``]^``!!]^``]^``!!]^``]^``!!]^``]^``!!]^``]^``!!]^``]^``!!!", "FHHH\256\254\254FHHH\256\254\254!!FHHH\256\254\254FHHH\256\254\254!!FHHH\256\254\254FHHH\256\254\254!!FHHH\256\254\254FHHH\256\254\254!!FHHH\256\254\254FHHH\256\254\254!!FHHH\256\254\254FHHH\256\254\254!!FHHH\256\254\254FHHH\256\254\254!!FHHH\256\254\254FHHH\256\254\254!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]^``]^``!!]^``]^``!!]^``]^``!!]^``]^``!!]^``]^``!!]^``]^``!!]^``]^``!!]^``]^``!!!" + "'", str2, "]^``]^``!!]^``]^``!!]^``]^``!!]^``]^``!!]^``]^``!!]^``]^``!!]^``]^``!!]^``]^``!!!");
    }

    @Test
    public void test11864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11864");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!", "nullnullHHnullnullHH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!" + "'", str2, "````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!");
    }

    @Test
    public void test11865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11865");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test11866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11866");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!\271\271!!\271\271\271\271!!\271\271!!!!\271\271!!\271\271\271\271!!\271\271!!!", "UNLLLLLUNLLLLLLLUNLLLLLUNLLLLLLLUNLLLLLUNLLLLLLLUNLLLLLUNLLLLLLLUNLLLLLUNLLLLLLLUNLLLLLUNLLLLLLLUNLLLLLUNLLLLLLLUNLLLLLUNLLLLLLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\271\271!!\271\271\271\271!!\271\271!!!!\271\271!!\271\271\271\271!!\271\271!!!" + "'", str2, "!!\271\271!!\271\271\271\271!!\271\271!!!!\271\271!!\271\271\271\271!!\271\271!!!");
    }

    @Test
    public void test11867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11867");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode}}`LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!\276\276!!!" + "'", str
    }

    @Test
    public void test11868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11868");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LLLLLUUULUUULUUULUUULLLLLUUULUUU!", "LLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!" + "'", str2, "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!");
    }

    @Test
    public void test11869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11869");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("````````````````````````````````````````````````````````````````````````````````!", "}~\200\200}~\200\200n!nn^\214\214n!nn^\214\214}~\200\200}~\200\200n!nn^\214\214n!nn^\214\214!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "````````````````````````````````````````````````````````````````````````````````!" + "'", str2, "````````````````````````````````````````````````````````````````````````````````!");
    }

    @Test
    public void test11870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11870");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encodeu0228\u0228\u0228\u0228!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test11871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11871");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!", "\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243\u0244\u0246\u0243\u0243!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11872");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LLNNLLNNLLNNLLNN!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!", "}T!!!\200\200}T!!!\200\200}T!!!\200\200}T!!!\200\200T!~~T!~~T!~~T!~~T!~~T!~~T!~~T!~~T!~~T!~~T!~~T!~~T!~~T!~~T!~~T!~~}T!!!\200\200}T!!!\200\200}T!!!\200\200}T!!!\200\200T!~~T!~~T!~~T!~~T!~~T!~~T!~~T!~~!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test11873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11873");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11874");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull!", "nullnullnullnullnullnullnullnullnullnullnullnullnull\200}}nullnullnullnullnullnullnullnullnullnullnullnullnull\200}}nullnullnullnullnullnullnullnullnullnullnullnullnull\200}}nullnullnullnullnullnullnullnullnullnullnullnullnull\200}}nullnullnullnullnullnullnullnullnullnullnullnullnull\200}}nullnullnullnullnullnullnullnullnullnullnullnullnull\200}}nullnullnullnullnullnullnullnullnullnullnullnullnull\200}}nullnullnullnullnullnullnullnullnullnullnullnullnull\200}}!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test11875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11875");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\373\374\376\376\225\223\223\275\275\275\373\374\376\376\225\223\223\275\275\275!!\373\374\376\376\225\223\223\275\275\275\373\374\376\376\225\223\223\275\275\275!!\373\374\376\376\225\223\223\275\275\275\373\374\376\376\225\223\223\275\275\275\373\374\376\376\225\223\223\275\275\275\373\374\376\376\225\223\223\275\275\275!!\373\374\376\376\225\223\223\275\275\275\373\374\376\376\225\223\223\275\275\275!!\373\374\376\376\225\223\223\275\275\275\373\374\376\376\225\223\223\275\275\275!", "\u0346\u0348\u0348\u0348\342\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275!!nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275!!nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275!!nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275!!nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275!" + "'", str2, "nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275!!nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275!!nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275!!nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275!!nullnullnullnull\225\223\223\275\275\275nullnullnullnull\225\223\223\275\275\275!");
    }

    @Test
    public void test11876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11876");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11877");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\335nullnullnull!\276\276\335nullnullnull!\276\276\335nullnullnull!\276\276\335nullnullnull!\276\276\335nullnullnull!\276\276\335nullnullnull!\276\276\335nullnullnull!\276\276\335nullnullnull!\276\276!", "}\300!!!\200\200}\300!!!\200\200}\300!!!\200\200}\300!!!\200\200\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~}\300!!!\200\200}\300!!!\200\200}\300!!!\200\200}\300!!!\200\200\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~\300!~~!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnull!\276\276nullnullnullnullnullnullnullnullnullnullnullnullnull!\276\276nullnullnullnullnullnullnullnullnullnullnullnullnull!\276\276nullnullnullnullnullnullnullnullnullnullnullnullnull!\276\276nullnullnullnullnullnullnullnullnullnullnullnullnull!\276\276nullnullnullnullnullnullnullnullnullnullnullnullnull!\276\276nullnullnullnullnullnullnullnullnullnullnullnullnull!\276\276nullnullnullnullnullnullnullnullnullnullnullnullnull!\276\276!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnull!\276\276nullnullnullnullnullnullnullnullnullnullnullnullnull!\276\276nullnullnullnullnullnullnullnullnullnullnullnullnull!\276\276nullnullnullnullnullnullnullnullnullnullnullnullnull!\276\276nullnullnullnullnullnullnullnullnullnullnullnullnull!\276\276nullnullnullnullnullnullnullnullnullnullnullnullnull!\276\276nullnullnullnullnullnullnullnullnullnullnullnullnull!\276\276nullnullnullnullnullnullnullnullnullnullnullnullnull!\276\276!");
    }

    @Test
    public void test11878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11878");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("NUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUUNUUU!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11879");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\230nullnullnull\230nullnullnull\230nullnullnull\230nullnullnull\230nullnullnull!", "null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\230\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\230\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\230\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\230\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d!" + "'", str2, "\230\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\230\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\230\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\230\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\230\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d!");
    }

    @Test
    public void test11880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11880");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!~}}^``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!]]!", "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!~}}^``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!]]!" + "'", str2, "``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!~}}^``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!]]!");
    }

    @Test
    public void test11881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11881");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u016a\u016a\u016a\u016a\u016a\u016a\u016a\u016a!", "\250\250\246\246\250\250\246\246!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11882");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullnullnull\266nullnullnullnullnullnull\266nullnullnullnullnullnull\266nullnullnullnullnullnull\266nullnullnullnullnullnullnullnullnullnull\266nullnullnullnullnullnull\266nullnullnullnull!", "UNLLUNLLLLUNLLUNLLLL!!UNLLUNLLLLUNLLUNLLLL!!UNLLUNLLLLUNLLUNLLLL!!UNLLUNLLLLUNLLUNLLLL!!UNLLUNLLLLUNLLUNLLLL!!UNLLUNLLLLUNLLUNLLLL!!UNLLUNLLLLUNLLUNLLLL!!UNLLUNLLLLUNLLUNLLLL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!!" + "'", str2, "NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!!");
    }

    @Test
    public void test11883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11883");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!\255\256\260\260\255\256\260\260\255\256\260\260\255\256\260\260null\255\256\260\260\255\256\260\260\255\256\260\260null\255\256\260\260\255\256\260\260\255\256\260\260null\255\256\260\260\255\256\260\260\255\256\260\260null\255\256\260\260\255\256\260\260!\255\256\260\260\255\256\260\260\255\256\260\260\255\256\260\260null\255\256\260\260\255\256\260\260\255\256\260\260null\255\256\260\260\255\256\260\260!", "\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\255\256\260\260\255\256\260\260\255\256\260\260\255\256\260\260nullnullnullnull\255\256\260\260\255\256\260\260\255\256\260\260nullnullnullnull\255\256\260\260\255\256\260\260\255\256\260\260nullnullnullnull\255\256\260\260\255\256\260\260\255\256\260\260nullnullnullnull\255\256\260\260\255\256\260\260!\255\256\260\260\255\256\260\260\255\256\260\260\255\256\260\260nullnullnullnull\255\256\260\260\255\256\260\260\255\256\260\260nullnullnullnull\255\256\260\260\255\256\260\260!" + "'", str2, "!\255\256\260\260\255\256\260\260\255\256\260\260\255\256\260\260nullnullnullnull\255\256\260\260\255\256\260\260\255\256\260\260nullnullnullnull\255\256\260\260\255\256\260\260\255\256\260\260nullnullnullnull\255\256\260\260\255\256\260\260\255\256\260\260nullnullnullnull\255\256\260\260\255\256\260\260!\255\256\260\260\255\256\260\260\255\256\260\260\255\256\260\260nullnullnullnull\255\256\260\260\255\256\260\260\255\256\260\260nullnullnullnull\255\256\260\260\255\256\260\260!");
    }

    @Test
    public void test11884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11884");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EE!!EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE!", "!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!!!!]!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" + "'", str2, "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    @Test
    public void test11885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11885");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull]]]nullnullnullnull]]]!" + "'", str2, "nullnullnullnull]]]nullnullnullnull]]]!");
    }

    @Test
    public void test11886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11886");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!\253\253!!\253\253!!!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!", "\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e\u031a\u031a\u031a\u031a\u016e\u016e\u016e\u016e!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\253\253!!\253\253!!!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!\253\253!!\253\253!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!" + "'", str
    }

    @Test
    public void test11887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11887");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnull``!nullnull``nullnull``nullnull``!nullnull``nullnull``nullnull``!nullnull``nullnull``nullnull``!nullnull``nullnull``nullnull``!nullnull``nullnull``nullnull``!nullnull``nullnull``nullnull``!nullnull``nullnull``nullnull``!nullnull``nullnull``!", "\275```\275```\275```\275`````\275\275``\275\275``\275\275``\275\275\275```\275```\275```\275`````\275\275``\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "``````````!``````````````````````````````!``````````````````````````````!``````````````````````````````!``````````````````````````````!``````````````````````````````!``````````````````````````````!``````````````````````````````!````````````````````!" + "'", str2, "``````````!``````````````````````````````!``````````````````````````````!``````````````````````````````!``````````````````````````````!``````````````````````````````!``````````````````````````````!``````````````````````````````!````````````````````!");
    }

    @Test
    public void test11888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11888");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348}~\200\200}~\200\200`!!!`!!!}~\200\200}~\200\200`!!!`!!!}~\200\200}~\200\200`!!!`!!!}~\200\200}~\200\200\u0348\u0346\u0346!", "\336null\340\340null!nullnullnullnull\336null\340\340null!nullnullnullnull!!\336null\340\340null!nullnullnullnull\336null\340\340null!nullnullnullnull!!\336null\340\340null!nullnullnullnull\336null\340\340null!nullnullnullnull!!\336null\340\340null!nullnullnullnull\336null\340\340null!nullnullnullnull!!\336null\340\340null!nullnullnullnull\336null\340\340null!nullnullnullnull!!\336null\340\340null!nullnullnullnull\336null\340\340null!nullnullnullnull!!\336null\340\340null!nullnullnullnull\336null\340\340null!nullnullnullnull!!\336null\340\340null!nullnullnullnull\336null\340\340null!nullnullnullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348}~\200\200}~\200\200`!!!`!!!}~\200\200}~\200\200`!!!`!!!}~\200\200}~\200\200`!!!`!!!}~\200\200}~\200\200\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348}~\200\200}~\200\200`!!!`!!!}~\200\200}~\200\200`!!!`!!!}~\200\200}~\200\200`!!!`!!!}~\200\200}~\200\200\u0348\u0346\u0346!");
    }

    @Test
    public void test11889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11889");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("null!nullnullnull!nullnullnullnullnullnullnullnullnullnullnull!nullnullnull!nullnullnullnullnullnullnullnullnullnull!", "\u0107\u0107nullll\225\225\u0107\u0107nullll\225\225\u0107\u0107nullll\225\225\u0107\u0107nullll\225\225\u0107\u0107nullll\225\225\u0107\u0107nullll\225\225\u0107\u0107nullll\225\225\u0107\u0107nullll\225\225!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\331\332\336\336!\331\332\336\336\331\332\336\336\331\332\336\336!\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336!\331\332\336\336\331\332\336\336\331\332\336\336!\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336!" + "'", str2, "\331\332\336\336!\331\332\336\336\331\332\336\336\331\332\336\336!\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336!\331\332\336\336\331\332\336\336\331\332\336\336!\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336\331\332\336\336!");
    }

    @Test
    public void test11890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11890");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("nullnull]]nullnull]]LnullnullnullLnullnullnullnullnull]]nullnull]]LnullnullnullLnullnullnull!", "\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368\u0365\u0366\u0368\u0368!!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnull]]nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11891");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0\ua7b0\u029b\ua7b0\ua7b0!", "UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11892");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\215}\215\215\215}\215\215UU!!UU!!UU!!UU!!\215}\215\215\215}\215\215!", "]^``\230\226\226]^``\230\226\226]^``\230\226\226]^``\230\226\226]^``\230\226\226]^``\230\226\226]^``\230\226\226]^``\230\226\226!!]^``\230\226\226]^``\230\226\226]^``\230\226\226]^``\230\226\226]^``\230\226\226]^``\230\226\226]^``\230\226\226]^``\230\226\226!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\215}\215\215\215}\215\215nullnull!!nullnull!!nullnull!!nullnull!!\215}\215\215\215}\215\215!" + "'", str2, "\215}\215\215\215}\215\215nullnull!!nullnull!!nullnull!!nullnull!!\215}\215\215\215}\215\215!");
    }

    @Test
    public void test11893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11893");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230!", "LL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230!" + "'", str2, "~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230!");
    }

    @Test
    public void test11894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11894");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode}null\200\200}null\200\200}null\200\200}null\200\200nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull}null\200\200}null\200\200}null\200\200}null\200\200nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!!" + "'", str2, "}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!}}}}!!!!");
    }

    @Test
    public void test11895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11895");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\300\336\336\336\300\336\336\336\300\336\336\336\300\336\336\336\300\336\336\336\300\336\336\336\300\336\336\336\300\336\336\336!", "\u0366\u0365\u0368\uu0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11896");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!nullnull!!nullnull!!nullnull!!nullnullnullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnullnullnull!!nullnull!!!", "\215}\215\215\215}\215\215\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\215}\215\215\215}\215\215!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0!!!" + "'", str2, "\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0\u03c0\u03be\u03c0\u03c0!!!");
    }

    @Test
    public void test11897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11897");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348}~\200\200}~\200\200UUUU\214UUUUUUUUUUUU\214UUUUUUUU}~\200\200}~\200\200UUUU\214UUUUUUUUUUUU\214UUUUUUUU}~\200\200}~\200\200UUUU\214UUUUUUUUUUUU\214UUUUUUUU}~\200\200}~\200\200UUUU\214UUUUUUUUUUUU\214\u0348\u0346\u0346!", "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348}~\200\200}~\200\200JJJJ\214JJJJJJJJJJJJ\214JJJJJJJJ}~\200\200}~\200\200JJJJ\214JJJJJJJJJJJJ\214JJJJJJJJ}~\200\200}~\200\200JJJJ\214JJJJJJJJJJJJ\214JJJJJJJJ}~\200\200}~\200\200JJJJ\214JJJJJJJJJJJJ\214\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348}~\200\200}~\200\200JJJJ\214JJJJJJJJJJJJ\214JJJJJJJJ}~\200\200}~\200\200JJJJ\214JJJJJJJJJJJJ\214JJJJJJJJ}~\200\200}~\200\200JJJJ\214JJJJJJJJJJJJ\214JJJJJJJJ}~\200\200}~\200\200JJJJ\214JJJJJJJJJJJJ\214\u0348\u0346\u0346!");
    }

    @Test
    public void test11898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11898");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225!", "nullnullnullnull\362\363\365\365\362\363\365\365\362\363\365\365\362\363\365\365nullnullnullnull\362\363\365\365\362\363\365\365!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225!" + "'", str2, "\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225!");
    }

    @Test
    public void test11899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11899");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnull!!``nullnull``nullnull``nullnullnullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!``nullnull``nullnull``nullnullnullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!", "\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346\u0346\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!\200\u0346!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346L!!!!!" + "'", str2, "\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346L!!!!!");
    }

    @Test
    public void test11900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11900");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "PP!!PP!!!!PP!!PP!!!!PP!!PP!!!!PP!!PP!!!!PP!!PP!!!!PP!!PP!!!!PP!!PP!!!!PP!!PP!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11901");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("}~\200\200}~\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!}~\200\200}~\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", "!LNNNNN!LNNNNN!LNNNNN!LNNNNN!!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!LNNNNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~\200\200}~\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!}~\200\200}~\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" + "'", str2, "}~\200\200}~\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!}~\200\200}~\200\200!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    @Test
    public void test11902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11902");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!" + "'", str2, "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!");
    }

    @Test
    public void test11903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11903");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!U!LLU!LLU!LLU!LL!!!U!LLU!LLU!LLU!LL!!!!!U!LLU!LLU!LLU!LL!!!U!LLU!LLU!LLU!LL!!!!!U!LLU!LLU!LLU!LL!!!U!LLU!LLU!LLU!LL!!!!!U!LLU!LLU!LLU!LL!!!U!LLU!LLU!LLU!LL!!!!!U!LLU!LLU!LLU!LL!!!U!LLU!LLU!LLU!LL!!!!!U!LLU!LLU!LLU!LL!!!U!LLU!LLU!LLU!LL!!!!!U!LLU!LLU!LLU!LL!!!U!LLU!LLU!LLU!LL!!!!!U!LLU!LLU!LLU!LL!!!U!LLU!LLU!LLU!LL!!!!!", "nullnullcc!nullnullccnullnullccnullnullccnullnullcc!!nullnullccnullnullcc!!nullnullccnullnullcc!!nullnullccnullnullcc!!nullnullcc!nullnullccnullnullccnullnullccnullnullcc!!nullnullccnullnullcc!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!!!" + "'", str2, "!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!\374!\376\376\374!\376\376\374!\376\376\374!\376\376!!!!!");
    }

    @Test
    public void test11904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11904");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnull!!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!!nullnull!!!!!nullnull!!!!!\200}}`nullnull!!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!!nullnull!!!!!nullnull!!!!!]]!", "LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!LL!!LL!!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!\200}}`!!LL!!LL!!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!]]!" + "'", str2, "!!LL!!LL!!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!\200}}`!!LL!!LL!!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!!!!LL!!LL!!!!!!!LL!!LL!!!!!]]!");
    }

    @Test
    public void test11905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11905");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!\335\336\340\340\335\336\340\340!!!", "\275nullL]]]nullnullnullL]]]nullnullnullL]]]nullnull\275nullL]]]nullnullnullL]]]nullnullnullL]]]nullnull\275nullL]]]nullnullnullL]]]nullnullnullL]]]nullnull\275nullL]]]nullnullnullL]]]nullnullnullL]]]nullnullnullL]]]nullnullnullL]]]nullnull\275\275nullL]]]nullnullnullL]]]nullnull\275\275nullL]]]nullnullnullL]]]nullnull\275\275nullL]]]nullnullnullL]]]nullnull\275\275\275nullL]]]nullnullnullL]]]nullnullnullL]]]nullnull\275nullL]]]nullnullnullL]]]nullnullnullL]]]nullnull\275nullL]]]nullnullnullL]]]nullnullnullL]]]nullnull\275nullL]]]nullnullnullL]]]nullnullnullL]]]nullnullnullL]]]nullnullnullL]]]nullnull\275\275nullL]]]nullnullnullL]]]nullnull\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NULLNULL!!NULLNULL!!NULLNULL!!NULLNULL!!NULLNULL!!NULLNULL!!NULLNULL!!NULLNULL!!!" + "'", str2, "NULLNULL!!NULLNULL!!NULLNULL!!NULLNULL!!NULLNULL!!NULLNULL!!NULLNULL!!NULLNULL!!!");
    }

    @Test
    public void test11906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11906");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "]f!!]f!!!!]f!!]f!!!!]f!!]f!!]f!!]f!!!!]f!!]f!!!!]f!!]f!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test11907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11907");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!", "\367!\372\372\367!\372\372!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!" + "'", str2, "``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!");
    }

    @Test
    public void test11908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11908");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300null\273\300\300!", "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253\222\221\224\224\222\221\224\224\253\253\222\221\224\224\222\221\224\224\253\253\222\221\224\224\222\221\224\224\253\253\222\221\224\224\222\221\224\224\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253\222\221\224\224\222\221\224\224\253\253\222\221\224\224\222\221\224\224\253\253!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull!" + "'", str2, "\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull\253\224\224\224\273nullnull!");
    }

    @Test
    public void test11909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11909");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "\275\276!\225\225\276!\225\225\200\200\276!\225\225\276!\225\225\200\200\276!\225\225\276!\225\225\200\200\276\276!\225\225\276!\225\225\200\200\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11910");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~!", "LLUULLUULLUULLUU\256\254\254LLUULLUULLUULLUU\256\254\254!!LLUULLUULLUULLUU\256\254\254LLUULLUULLUULLUU\256\254\254!!LLUULLUULLUULLUU\256\254\254LLUULLUULLUULLUU\256\254\254!!LLUULLUULLUULLUU\256\254\254LLUULLUULLUULLUU\256\254\254!!LLUULLUULLUULLUU\256\254\254LLUULLUULLUULLUU\256\254\254!!LLUULLUULLUULLUU\256\254\254LLUULLUULLUULLUU\256\254\254!!LLUULLUULLUULLUU\256\254\254LLUULLUULLUULLUU\256\254\254!!LLUULLUULLUULLUU\256\254\254LLUULLUULLUULLUU\256\254\254!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~!" + "'", str2, "\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~\270\270^^\270~~!");
    }

    @Test
    public void test11911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11911");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "````````!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11912");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\275\u0126\u0128\u0128\u0126\u0128\u0128\200\200\u0126\u0128\u0128\u0126\u0128\u0128\200\200\u0126\u0128\u0128\u0126\u0128\u0128\200\200\276\u0126\u0128\u0128\u0126\u0128\u0128\200\200\275\275!", "PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!PP!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275PPP!!!!PPP!!!!\200\200PPP!!!!PPP!!!!\200\200PPP!!!!PPP!!!!\200\200\276PPP!!!!PPP!!!!\200\200\275\275!" + "'", str2, "\275PPP!!!!PPP!!!!\200\200PPP!!!!PPP!!!!\200\200PPP!!!!PPP!!!!\200\200\276PPP!!!!PPP!!!!\200\200\275\275!");
    }

    @Test
    public void test11913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11913");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!!!TT!!TT!!TT!!TT!!TT!!TT!!TT!!TT!", "\260\260\u037d\u037e\u0380\u0380\u037d\u037e\u0380\u0380\260\260\u037d\u037e\u0380\u0380\u037d\u037e\u0380\u0380}}\260\260\u037d\u037e\u0380\u0380\u037d\u037e\u0380\u0380\260\260\u037d\u037e\u0380\u0380\u037d\u037e\u0380\u0380}}!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380!" + "'", str2, "\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380\u0380!");
    }

    @Test
    public void test11914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11914");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0348\u0348\u0348\u0348\u0346\u0346!", "\300\300\276\276\300\300\276\276}}\300\300\276\276\300\300\276\276}}!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\300!\300\300\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\300!\300\300\u0348\u0346\u0346!");
    }

    @Test
    public void test11915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11915");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!", "``nullnull\200\200nullnull\200\200``nullnull\200\200nullnull\200\200``nullnull\200\200nullnull\200\200``nullnull\200\200nullnull\200\200``nullnull\200\200nullnull\200\200``nullnull\200\200nullnull\200\200``nullnull\200\200nullnull\200\200``nullnull\200\200nullnull\200\200!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!" + "'", str2, "!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!!\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``\230\226``!");
    }

    @Test
    public void test11916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11916");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("L]LLL]LL!!L]LLL]LL!!L]LLL]LLL]LLL]LL!!L]LLL]LL!!L]LLL]LL!", "nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!!nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!!nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!!nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!!nullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnullnullnullnullnull\200~~nullnullnullnull\200~~nullnullnullnullnullnullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390!" + "'", str2, "\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390!");
    }

    @Test
    public void test11917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11917");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("null\256\254\254null\256\254\254!!null\256\254\254null\256\254\254!!null\256\254\254null\256\254\254!!null\256\254\254null\256\254\254!!null\256\254\254null\256\254\254!!null\256\254\254null\256\254\254!!null\256\254\254null\256\254\254!!null\256\254\254null\256\254\254!!!", "LNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!!" + "'", str2, "\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!!");
    }

    @Test
    public void test11918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11918");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0420\u0420\u0420\u0420!!!", "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253LUNNLUNNLUNNLUNNLUNNLUNNLUNNLUNN\253\253LUNNLUNNLUNNLUNNLUNNLUNNLUNNLUNN\253\253LUNNLUNNLUNNLUNNLUNNLUNNLUNNLUNN\253\253LUNNLUNNLUNNLUNNLUNNLUNNLUNNLUNN\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253LUNNLUNNLUNNLUNNLUNNLUNNLUNNLUNN\253\253LUNNLUNNLUNNLUNNLUNNLUNNLUNNLUNN\253\253!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnull!!!" + "'", str2, "nullnull!!nullnull!!!");
    }

    @Test
    public void test11919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11919");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!L!!\216\254\254!L!!\216\254\254!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!\216\254\254!L!!\216\254\254!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!\216\254\254!L!!\216\254\254!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!\216\254\254!L!!\216\254\254!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!\216\254\254!L!!\216\254\254!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!\216\254\254!L!!\216\254\254!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!\216\254\254!L!!\216\254\254!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!\216\254\254!L!!\216\254\254!L!!!L!!!L!!!L!!!L!!!L!!!L!!!L!!!", "\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!" + "'", str2, "!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!");
    }

    @Test
    public void test11920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11920");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\231\u0346\u0348\u0348!", "UU!!UU!!!UUU!UUUUU!!UU!!!UUU!UUUUU!!UU!!!UUU!UUUUU!!UU!!!UUU!UUUUU!!UU!!!UUU!UUUUU!!UU!!!UUU!UUUUU!!UU!!!UUU!UUUUU!!UU!!!UUU!UUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\231\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\231\u0346\u0348\u0348!");
    }

    @Test
    public void test11921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11921");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\253\254\256\256``^^``^^``^^``^^\253\254\256\256``^^``^^!", "\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\254\256\256``^^``^^``^^``^^\253\254\256\256``^^``^^!" + "'", str2, "\253\254\256\256``^^``^^``^^``^^\253\254\256\256``^^``^^!");
    }

    @Test
    public void test11922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11922");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!\256LNLL\254\254\256LNLL\254\254!!\256LNLL\254\254\256LNLL\254\254!!\256LNLL\254\254\256LNLL\254\254!!\256LNLL\254\254\256LNLL\254\254!!\256LNLL\254\254\256LNLL\254\254!!\256LNLL\254\254\256LNLL\254\254!!\256LNLL\254\254\256LNLL\254\254!!\256LNLL\254\254\256LNLL\254\254!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\340\336\336nullnullnullnullnullnullnull\340\336\336nullnullnullnullnullnullnull\340\336\336nullnullnullnullnullnullnull\340\336\336nullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\256\374\371\374\374\254\254\256\374\371\374\374\254\254!!\256\374\371\374\374\254\254\256\374\371\374\374\254\254!!\256\374\371\374\374\254\254\256\374\371\374\374\254\254!!\256\374\371\374\374\254\254\256\374\371\374\374\254\254!!\256\374\371\374\374\254\254\256\374\371\374\374\254\254!!\256\374\371\374\374\254\254\256\374\371\374\374\254\254!!\256\374\371\374\374\254\254\256\374\371\374\374\254\254!!\256\374\371\374\374\254\254\256\374\371\374\374\254\254!" + "'", str2, "!!\256\374\371\374\374\254\254\256\374\371\374\374\254\254!!\256\374\371\374\374\254\254\256\374\371\374\374\254\254!!\256\374\371\374\374\254\254\256\374\371\374\374\254\254!!\256\374\371\374\374\254\254\256\374\371\374\374\254\254!!\256\374\371\374\374\254\254\256\374\371\374\374\254\254!!\256\374\371\374\374\254\254\256\374\371\374\374\254\254!!\256\374\371\374\374\254\254\256\374\371\374\374\254\254!!\256\374\371\374\374\254\254\256\374\371\374\374\254\254!");
    }

    @Test
    public void test11923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11923");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!~``!~``!!!~``!~``!!!~``!~``!~``!~``!!!~``!~``!!!~``!~``!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\236\276\276!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~``!~``!!!~``!~``!!!~``!~``!~``!~``!!!~``!~``!!!~``!~``!" + "'", str2, "!~``!~``!!!~``!~``!!!~``!~``!~``!~``!!!~``!~``!!!~``!~``!");
    }

    @Test
    public void test11924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11924");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("N!UUN!UUUUN!UUN!UUUUN!UUN!UUUUN!UUN!UUUUN!UUN!UUUUN!UUN!UUUUN!UUN!UUUUN!UUN!UUUU!", "nullnullnullnullnullnullnullnull\376\376!!null\214\214\376\376!!null\214\214nullnullnullnullnullnullnullnull\376\376!!null\214\214\376\376!!null\214\214nullnullnullnullnullnullnullnull\376\376!!null\214\214\376\376!!null\214\214nullnullnullnullnullnullnullnull\376\376!!null\214\214\376\376!!null\214\214nullnullnullnullnullnullnullnull\376\376!!null\214\214\376\376!!null\214\214nullnullnullnullnullnullnullnull\376\376!!null\214\214\376\376!!null\214\214nullnullnullnullnullnullnullnull\376\376!!null\214\214\376\376!!null\214\214nullnullnullnullnullnullnullnull\376\376!!null\214\214\376\376!!null\214\214!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u01db\u01dc\u01dc\u01db\u01dc\u01dc\u01dc\u01dc\u01db\u01dc\u01dc\u01db\u01dc\u01dc\u01dc\u01dc\u01db\u01dc\u01dc\u01db\u01dc\u01dc\u01dc\u01dc\u01db\u01dc\u01dc\u01db\u01dc\u01dc\u01dc\u01dc\u01db\u01dc\u01dc\u01db\u01dc\u01dc\u01dc\u01dc\u01db\u01dc\u01dc\u01db\u01dc\u01dc\u01dc\u01dc\u01db\u01dc\u01dc\u01db\u01dc\u01dc\u01dc\u01dc\u01db\u01dc\u01dc\u01db\u01dc\u01dc\u01dc\u01dc!" + "'", str2, "\u01db\u01dc\u01dc\u01db\u01dc\u01dc\u01dc\u01dc\u01db\u01dc\u01dc\u01db\u01dc\u01dc\u01dc\u01dc\u01db\u01dc\u01dc\u01db\u01dc\u01dc\u01dc\u01dc\u01db\u01dc\u01dc\u01db\u01dc\u01dc\u01dc\u01dc\u01db\u01dc\u01dc\u01db\u01dc\u01dc\u01dc\u01dc\u01db\u01dc\u01dc\u01db\u01dc\u01dc\u01dc\u01dc\u01db\u01dc\u01dc\u01db\u01dc\u01dc\u01dc\u01dc\u01db\u01dc\u01dc\u01db\u01dc\u01dc\u01dc\u01dc!");
    }

    @Test
    public void test11925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11925");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~]]UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~]]UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~]]UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~]]UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~UN~~!", "heeeheeeeeheeeheeeeeheeeheeeeeheeeheeeeeheeeheeeeeheeeheeeeeheeeheeeeeheeeheeeee!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~]]HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~]]HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~]]HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~]]HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~!" + "'", str2, "HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~]]HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~]]HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~]]HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~]]HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~HE~~!");
    }

    @Test
    public void test11926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11926");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("UUUUUUUU\214\214UUUUUUUU\214\214UUUUUUUU\214\214UUUUUUUU\214\214UUUUUUUU\214\214UUUUUUUU\214\214UUUUUUUU\214\214UUUUUUUU\214\214!", "]]!!]]!!\276]]]\276]]]]]!!]]!!\276]]]\276]]]]]!!]]!!\276]]]\276]]]]]!!]]!!\276]]]\276]]]]]!!]]!!\276]]]\276]]]]]!!]]!!\276]]]\276]]]]]!!]]!!\276]]]\276]]]]]!!]]!!\276]]]\276]]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]]]]]]]]\214\214]]]]]]]]\214\214]]]]]]]]\214\214]]]]]]]]\214\214]]]]]]]]\214\214]]]]]]]]\214\214]]]]]]]]\214\214]]]]]]]]\214\214!" + "'", str2, "]]]]]]]]\214\214]]]]]]]]\214\214]]]]]]]]\214\214]]]]]]]]\214\214]]]]]]]]\214\214]]]]]]]]\214\214]]]]]]]]\214\214]]]]]]]]\214\214!");
    }

    @Test
    public void test11927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11927");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LLUULLUU}}LLUULLUU}}
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull}}nullnullnullnullnullnullnullnull}}!" + "'", str2, "nullnullnullnullnullnullnullnull}}nullnullnullnullnullnullnullnull}}!");
    }

    @Test
    public void test11928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11928");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx!", "\306\306nullnull\306\306nullnull\306\306nullnull\306\306nullnull\306\306nullnull\306\306nullnull\306\306nullnull\306\306nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL!" + "'", str2, "\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL!");
    }

    @Test
    public void test11929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11929");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("null\266\u0346!!nullnullnull\266\u0346!!nullnull!!null\266\u0346!!nullnullnull\266\u0346!!nullnull!!null\266\u0346!!nullnullnull\266\u0346!!nullnull!!null\266\u0346!!nullnullnull\266\u0346!!nullnull!!null\266\u0346!!nullnullnull\266\u0346!!nullnull!!null\266\u0346!!nullnullnull\266\u0346!!nullnull!!null\266\u0346!!nullnullnull\266\u0346!!nullnull!!null\266\u0346!!nullnullnull\266\u0346!!nullnull!!!", "^```^```^```^```^```^```^```^```^```^```\226XXXX\230\230\226XXXX\230\230^```^```\226XXXX\230\230\226XXXX\230\230^```^```^```^```^```^```^```^```^```^```\226XXXX\230\230\226XXXX\230\230^```^```\226XXXX\230\230\226XXXX\230\230^```^```^```^```^```^```^```^```^```^```\226XXXX\230\230\226XXXX\230\230^```^```\226XXXX\230\230\226XXXX\230\230^```^```^```^```^```^```^```^```^```^```\226XXXX\230\230\226XXXX\230\230^```^```\226XXXX\230\230\226XXXX\230\230^```^```^```^```^```^```^```^```^```^```\226XXXX\230\230\226XXXX\230\230^```^```\226XXXX\230\230\226XXXX\230\230^```^```^```^```^```^```^```^```^```^```\226XXXX\230\230\226XXXX\230\230^```^```\226XXXX\230\230\226XXXX\230\230^```^```^```^```^```^```^```^```^```^```\226XXXX\230\230\226XXXX\230\230^```^```\226XXXX\230\230\226XXXX\230\230^```^```^```^```^```^```^```^```^```^```\226XXXX\230\230\226XXXX\230\230^```^```\226XXXX\230\230\226XXXX\230\230!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230\230XX\266\u0346!!\230\230XX\230\230XX\230\230XX\266\u0346!!\230\230XX\230\230XX!!\230\230XX\266\u0346!!\230\230XX\230\230XX\230\230XX\266\u0346!!\230\230XX\230\230XX!!\230\230XX\266\u0346!!\230\230XX\230\230XX\230\230XX\266\u0346!!\230\230XX\230\230XX!!\230\230XX\266\u0346!!\230\230XX\230\230XX\230\230XX\266\u0346!!\230\230XX\230\230XX!!\230\230XX\266\u0346!!\230\230XX\230\230XX\230\230XX\266\u0346!!\230\230XX\230\230XX!!\230\230XX\266\u0346!!\230\230XX\230\230XX\230\230XX\266\u0346!!\230\230XX\230\230XX!!\230\230XX\266\u0346!!\230\230XX\230\230XX\230\230XX\266\u0346!!\230\230XX\230\230XX!!\230\230XX\266\u0346!!\230\230XX\230\230XX\230\230XX\266\u0346!!\230\230XX\230\230XX!!!" + "'", str2, "\230\230XX\266\u0346!!\230\230XX\230\230XX\230\230XX\266\u0346!!\230\230XX\230\230XX!!\230\230XX\266\u0346!!\230\230XX\230\230XX\230\230XX\266\u0346!!\230\230XX\230\230XX!!\230\230XX\266\u0346!!\230\230XX\230\230XX\230\230XX\266\u0346!!\230\230XX\230\230XX!!\230\230XX\266\u0346!!\230\230XX\230\230XX\230\230XX\266\u0346!!\230\230XX\230\230XX!!\230\230XX\266\u0346!!\230\230XX\230\230XX\230\230XX\266\u0346!!\230\230XX\230\230XX!!\230\230XX\266\u0346!!\230\230XX\230\230XX\230\230XX\266\u0346!!\230\230XX\230\230XX!!\230\230XX\266\u0346!!\230\230XX\230\230XX\230\230XX\266\u0346!!\230\230XX\230\230XX!!\230\230XX\266\u0346!!\230\230XX\230\230XX\230\230XX\266\u0346!!\230\230XX\230\230XX!!!");
    }

    @Test
    public void test11930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11930");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lllnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225lnull\225\225ll!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11931");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!\253\256\256\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!", "UALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAAUALLUALLAAAAAAAA!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\253\256\256\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!" + "'", str2, "!\253\256\256\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271\266~\204\204\204\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!");
    }

    @Test
    public void test11932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11932");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("~\200}}~\200}}~\200}}~\200\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c~\200}}~\200}}~\200}}~\200\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c!", "N!LLL!LLL!LLLN!LLL!LLL!LLLN!LLL!LLL!LLLN!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLLN!LLL!LLL!LLLN!LLL!LLL!LLLN!LLL!LLL!LLLN!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!LLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~\200}}~\200}}~\200}}~\200}}L!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnull~\200}}~\200}}~\200}}~\200}}L!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnull!" + "'", str2, "~\200}}~\200}}~\200}}~\200}}L!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnull~\200}}~\200}}~\200}}~\200}}L!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnullL!LLnullnullnull!");
    }

    @Test
    public void test11933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11933");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0348l!!\200\u0348l!!]]!", "LNUULNUU!!LNUULNUU!!\276LNUULNUULNUU\276LNUULNUULNUULNUULNUU!!LNUULNUU!!\276LNUULNUULNUU\276LNUULNUULNUULNUULNUU!!LNUULNUU!!\276LNUULNUULNUU\276LNUULNUULNUULNUULNUU!!LNUULNUU!!\276LNUULNUULNUU\276LNUULNUULNUULNUULNUU!!LNUULNUU!!\276LNUULNUULNUU\276LNUULNUULNUULNUULNUU!!LNUULNUU!!\276LNUULNUULNUU\276LNUULNUULNUULNUULNUU!!LNUULNUU!!\276LNUULNUULNUU\276LNUULNUULNUULNUULNUU!!LNUULNUU!!\276LNUULNUULNUU\276LNUULNUULNUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u01cd!!\200\u0348\u01cd!!]]!" + "'", str2, "\u0348\u01cd!!\200\u0348\u01cd!!]]!");
    }

    @Test
    public void test11934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11934");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("]]!!]]!!}}]]!!]]!!}}
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]]!!]]!!}}]]!!]]!!}}!" + "'", str2, "]]!!]]!!}}]]!!]]!!}}!");
    }

    @Test
    public void test11935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11935");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" + "'", str2, "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    @Test
    public void test11936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11936");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "!LNN!LNN!!!LNN!LNN!!!LNN!LNN!!!LNN!LNN!!!LNN!LNN!!!LNN!LNN!!!LNN!LNN!!!LNN!LNN!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11937");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("nullnull\371\371nullnull\371\371\225\225nullnull\371\371nullnull\371\371\225\225nullnull\371\371nullnull\371\371\225\225nullnull\371\371nullnull\371\371\225\225nullnull\371\371nullnull\371\371\225\225nullnull\371\371nullnull\371\371\225\225nullnull\371\371nullnull\371\371\225\225nullnull\371\371nullnull\371\371\225\225!", "\276]]nullnull\275\275\276]]nullnull\275\275]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull\276]]nullnull\275\275\276]]nullnull\275\275]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull\276]]nullnull\275\275\276]]nullnull\275\275]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull\276]]nullnull\275\275\276]]nullnull\275\275]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull\276]]nullnull\275\275\276]]nullnull\275\275]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull\276]]nullnull\275\275\276]]nullnull\275\275]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull\276]]nullnull\275\275\276]]nullnull\275\275]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull\276]]nullnull\275\275\276]]nullnull\275\275]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull]!nullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0nullnull\225\225\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0nullnull\225\225\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0nullnull\225\225\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0nullnull\225\225\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0nullnull\225\225\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0nullnull\225\225\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0nullnull\225\225\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0nullnull\225\225!" + "'", str2, "\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0nullnull\225\225\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0nullnull\225\225\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0nullnull\225\225\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0nullnull\225\225\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0nullnull\225\225\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0nullnull\225\225\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0nullnull\225\225\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0\u03ad\u03ae\u03b0\u03b0nullnull\225\225!");
    }

    @Test
    public void test11938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11938");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("R!~~R!~~R!~~R!~~R!~~R!~~R!~~R!~~UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLR!~~R!~~R!~~R!~~R!~~R!~~R!~~R!~~UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!", "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~nullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnull!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~nullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRR!" + "'", str2, "null!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~nullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnull!~~null!~~null!~~null!~~null!~~null!~~null!~~null!~~nullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRRnullnullRR!");
    }

    @Test
    public void test11939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11939");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("L!!!L!!!L!!!L!!!\200\200!!\200\200!!\200\200!!\200\200!!!", "UNLLUNLL!!``UNLLUNLL``UNLLUNLL``UNLLUNLLUNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!``UNLLUNLL``UNLLUNLL``UNLLUNLLUNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`!!!`!!!`!!!`!!!\200\200!!\200\200!!\200\200!!\200\200!!!" + "'", str2, "`!!!`!!!`!!!`!!!\200\200!!\200\200!!\200\200!!\200\200!!!");
    }

    @Test
    public void test11940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11940");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275\275\200!!\275\275!!\275\275!", "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test11941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11941");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "!LLNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11942");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!\220!\220\220\220!\220\220!!!", "\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011a\u011aLL!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test11943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11943");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("FHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHH!", "\u0366\u0365\u0368\u0368\220\220!!\220\220!!\220\220!!\220\220\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11944");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad\u03aa\u03ab\u03ad\u03ad!", "]~^\200\200``]~^\200\200````]~^\200\200``]~^\200\200````!!]~^\200\200``]~^\200\200````]~^\200\200``]~^\200\200````!!]~^\200\200``]~^\200\200````]~^\200\200``]~^\200\200````!!]~^\200\200``]~^\200\200````]~^\200\200``]~^\200\200````!!]~^\200\200``]~^\200\200````]~^\200\200``]~^\200\200````!!]~^\200\200``]~^\200\200````]~^\200\200``]~^\200\200````!!]~^\200\200``]~^\200\200````]~^\200\200``]~^\200\200````!!]~^\200\200``]~^\200\200````]~^\200\200``]~^\200\200````!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11945");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11946");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("UUNNUUNN!!UUNNUUNN!!UUNNUUNNUUNNUUNN!!UUNNUUNN!!UUNNUUNN!", "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUNULLUUUUUUUUUUUUNULLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUNULLUUUUUUUUUUUUNULLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUNULLUUUUUUUUUUUUNULLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUNULLUUUUUUUUUUUUNULLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUNULLUUUUUUUUUUUUNULLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUNULLUUUUUUUUUUUUNULLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUNULLUUUUUUUUUUUUNULLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUNULLUUUUUUUUUUUUNULLUUUUUUUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UUUUUUUU!!UUUUUUUU!!UUUUUUUUUUUUUUUU!!UUUUUUUU!!UUUUUUUU!" + "'", str2, "UUUUUUUU!!UUUUUUUU!!UUUUUUUUUUUUUUUU!!UUUUUUUU!!UUUUUUUU!");
    }

    @Test
    public void test11947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11947");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^]^^^]^^^]^^^]^^^]^^^]^^^]^^^]^^!^]]!^]]^]^^^]^^^]^^^]^^^]^^^]^^^]^^^]^^!^]]!^]]^]^^^]^^^]^^^]^^^]^^^]^^^]^^^]^^!^]]!^]]^]^^^]^^^]^^^]^^^]^^^]^^^]^^^]^^!^]]!^]]^]^^^]^^^]^^^]^^^]^^^]^^^]^^^]^^!^]]!^]]^]^^^]^^^]^^^]^^^]^^^]^^^]^^^]^^!^]]!^]]^]^^^]^^^]^^^]^^^]^^^]^^^]^^^]^^!^]]!^]]^]^^^]^^^]^^^]^^^]^^^]^^^]^^^]^^!^]]!^]]!" + "'", str2, "^]^^^]^^^]^^^]^^^]^^^]^^^]^^^]^^!^]]!^]]^]^^^]^^^]^^^]^^^]^^^]^^^]^^^]^^!^]]!^]]^]^^^]^^^]^^^]^^^]^^^]^^^]^^^]^^!^]]!^]]^]^^^]^^^]^^^]^^^]^^^]^^^]^^^]^^!^]]!^]]^]^^^]^^^]^^^]^^^]^^^]^^^]^^^]^^!^]]!^]]^]^^^]^^^]^^^]^^^]^^^]^^^]^^^]^^!^]]!^]]^]^^^]^^^]^^^]^^^]^^^]^^^]^^^]^^!^]]!^]]^]^^^]^^^]^^^]^^^]^^^]^^^]^^^]^^!^]]!^]]!");
    }

    @Test
    public void test11948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11948");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!!", "\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\200\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!!" + "'", str2, "~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!~!!!~!!!~!!!~!!!!!!!");
    }

    @Test
    public void test11949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11949");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010b\u010bnullnull!", "!!!!!!!!!!!!!!!!!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!!!!!!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!!!!!!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!!!!!!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!!!!!!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!" + "'", str2, "!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!!!!!!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!!!!!!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!!!!!!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!!!!!!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!!!!null!!!!!!!!!");
    }

    @Test
    public void test11950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11950");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!~nullnull!~nullnull!!!~nullnull!~nullnull!!!~nullnull!~nullnull!~nullnull!~nullnull!!!~nullnull!~nullnull!!!~nullnull!~nullnull!", "LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```LLLL```!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~LLLLLLLL!~LLLLLLLL!!!~LLLLLLLL!~LLLLLLLL!!!~LLLLLLLL!~LLLLLLLL!~LLLLLLLL!~LLLLLLLL!!!~LLLLLLLL!~LLLLLLLL!!!~LLLLLLLL!~LLLLLLLL!" + "'", str2, "!~LLLLLLLL!~LLLLLLLL!!!~LLLLLLLL!~LLLLLLLL!!!~LLLLLLLL!~LLLLLLLL!~LLLLLLLL!~LLLLLLLL!!!~LLLLLLLL!~LLLLLLLL!!!~LLLLLLLL!~LLLLLLLL!");
    }

    @Test
    public void test11951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11951");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!!", "N~LLN~LL!!N~LLN~LL!!N~LLN~LLN~LLN~LL!!N~LLN~LL!!N~LLN~LL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!!" + "'", str2, "\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!\200}\200\200\200}\200\200!!!");
    }

    @Test
    public void test11952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11952");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("efhhefhh!", "\275^^^\275^^^\275^^^\275^^^^^\275\275^^\275\275^^\275\275^^\275\275\275^^^\275^^^\275^^^\275^^^^^\275\275^^\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11953");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!!", "!!!!UUUUUUUU!!UUUUUUUU!!UUUUUUUU!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!UUUUUUUU!!UUUUUUUU!!UUUUUUUU!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]]]]]]]]null\342nullnullnull\342nullnull]]]]]]]]null\342nullnullnull\342nullnull!!]]]]]]]]null\342nullnullnull\342nullnull]]]]]]]]null\342nullnullnull\342nullnull!!]]]]]]]]null\342nullnullnull\342nullnull]]]]]]]]null\342nullnullnull\342nullnull!!]]]]]]]]null\342nullnullnull\342nullnull]]]]]]]]null\342nullnullnull\342nullnull!!]]]]]]]]null\342nullnullnull\342nullnull]]]]]]]]null\342nullnullnull\342nullnull!!]]]]]]]]null\342nullnullnull\342nullnull]]]]]]]]null\342nullnullnull\342nullnull!!]]]]]]]]null\342nullnullnull\342nullnull]]]]]]]]null\342nullnullnull\342nullnull!!]]]]]]]]null\342nullnullnull\342nullnull]]]]]]]]null\342nullnullnull\342nullnull!!!" + "'", str2, "]]]]]]]]null\342nullnullnull\342nullnull]]]]]]]]null\342nullnullnull\342nullnull!!]]]]]]]]null\342nullnullnull\342nullnull]]]]]]]]null\342nullnullnull\342nullnull!!]]]]]]]]null\342nullnullnull\342nullnull]]]]]]]]null\342nullnullnull\342nullnull!!]]]]]]]]null\342nullnullnull\342nullnull]]]]]]]]null\342nullnullnull\342nullnull!!]]]]]]]]null\342nullnullnull\342nullnull]]]]]]]]null\342nullnullnull\342nullnull!!]]]]]]]]null\342nullnullnull\342nullnull]]]]]]]]null\342nullnullnull\342nullnull!!]]]]]]]]null\342nullnullnull\342nullnull]]]]]]]]null\342nullnullnull\342nullnull!!]]]]]]]]null\342nullnullnull\342nullnull]]]]]]]]null\342nullnullnull\342nullnull!!!");
    }

    @Test
    public void test11954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11954");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("`UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU`UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!", "!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!`!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" + "'", str2, "`!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!`!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    @Test
    public void test11955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11955");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!!!\200}}`!!!!]]!", "null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200null~\200\200null~\200\200~null\200\200~null\200\200!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!\200}}`!!!!]]!" + "'", str2, "!!!!\200}}`!!!!]]!");
    }

    @Test
    public void test11956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11956");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "\u0366\u0365\u0368\u0368\231\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test11957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11957");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!LLL!LLL!LLL!LLL!", "!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!!!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!!!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!!!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!!!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!!!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!!!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!!!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!\220````````!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\220\220\220!\220\220\220!\220\220\220!\220\220\220!" + "'", str2, "!!\220\220\220!\220\220\220!\220\220\220!\220\220\220!");
    }

    @Test
    public void test11958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11958");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230~}\200\200~}\200\200EE~~}\200\200EE~~}\200\200\230\230EE~~}\200\200EE~~}\200\200\230\230!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200nullnull~~}\200\200nullnull~~}\200\200\230\230nullnull~~}\200\200nullnull~~}\200\200\230\230~}\200\200~}\200\200nullnull~~}\200\200nullnull~~}\200\200\230\230nullnull~~}\200\200nullnull~~}\200\200\230\230~}\200\200~}\200\200nullnull~~}\200\200nullnull~~}\200\200\230\230nullnull~~}\200\200nullnull~~}\200\200\230\230~}\200\200~}\200\200nullnull~~}\200\200nullnull~~}\200\200\230\230nullnull~~}\200\200nullnull~~}\200\200\230\230~}\200\200~}\200\200nullnull~~}\200\200nullnull~~}\200\200\230\230nullnull~~}\200\200nullnull~~}\200\200\230\230~}\200\200~}\200\200nullnull~~}\200\200nullnull~~}\200\200\230\230nullnull~~}\200\200nullnull~~}\200\200\230\230~}\200\200~}\200\200nullnull~~}\200\200nullnull~~}\200\200\230\230nullnull~~}\200\200nullnull~~}\200\200\230\230~}\200\200~}\200\200nullnull~~}\200\200nullnull~~}\200\200\230\230nullnull~~}\200\200nullnull~~}\200\200\230\230!" + "'", str2, "~}\200\200~}\200\200nullnull~~}\200\200nullnull~~}\200\200\230\230nullnull~~}\200\200nullnull~~}\200\200\230\230~}\200\200~}\200\200nullnull~~}\200\200nullnull~~}\200\200\230\230nullnull~~}\200\200nullnull~~}\200\200\230\230~}\200\200~}\200\200nullnull~~}\200\200nullnull~~}\200\200\230\230nullnull~~}\200\200nullnull~~}\200\200\230\230~}\200\200~}\200\200nullnull~~}\200\200nullnull~~}\200\200\230\230nullnull~~}\200\200nullnull~~}\200\200\230\230~}\200\200~}\200\200nullnull~~}\200\200nullnull~~}\200\200\230\230nullnull~~}\200\200nullnull~~}\200\200\230\230~}\200\200~}\200\200nullnull~~}\200\200nullnull~~}\200\200\230\230nullnull~~}\200\200nullnull~~}\200\200\230\230~}\200\200~}\200\200nullnull~~}\200\200nullnull~~}\200\200\230\230nullnull~~}\200\200nullnull~~}\200\200\230\230~}\200\200~}\200\200nullnull~~}\200\200nullnull~~}\200\200\230\230nullnull~~}\200\200nullnull~~}\200\200\230\230!");
    }

    @Test
    public void test11959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11959");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0348\u0348\u0348\275\275\275\275\u0348\u0346\u0346!", "!!!nulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleffnulleff!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\275\275\275\275\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\275\275\275\275\u0348\u0346\u0346!");
    }

    @Test
    public void test11960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11960");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("`NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL`NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL!", "U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```U\200\200\200\200\275\275!!!```!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`U```U```U```U```U```U```U```U```U```U```U```U````U```U```U```U```U```U```U```U```U```U```U```U```!" + "'", str2, "`U```U```U```U```U```U```U```U```U```U```U```U````U```U```U```U```U```U```U```U```U```U```U```U```!");
    }

    @Test
    public void test11961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11961");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\276!!!\276!!!\276!!!\276!!!\200}}`\276!!!\276!!!\276!!!\276!!!]]!", "!\253\256\256\266rtrr\271\271\266rtrr\271\271\266rtrr\271\271\266rtrr\271\271\266rtrr\271\271\266rtrr\271\271\266rtrr\271\271\266rtrr\271\271\266rtrr\271\271\266rtrr\271\271\266rtrr\271\271\266rtrr\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256\266rtrr\271\271\266rtrr\271\271\266rtrr\271\271\266rtrr\271\271\266rtrr\271\271\266rtrr\271\271\266rtrr\271\271\266rtrr\271\271\266rtrr\271\271\266rtrr\271\271\266rtrr\271\271\266rtrr\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276!!!\276!!!\276!!!\276!!!\200}}`\276!!!\276!!!\276!!!\276!!!]]!" + "'", str2, "\276!!!\276!!!\276!!!\276!!!\200}}`\276!!!\276!!!\276!!!\276!!!]]!");
    }

    @Test
    public void test11962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11962");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!LLUULLUULLUULLUU!", "null\236\276\276null\236\276\276!!null\236\276\276null\236\276\276!!null\236\276\276null\236\276\276null\236\276\276null\236\276\276!!null\236\276\276null\236\276\276!!null\236\276\276null\236\276\276!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\236\236\236\236\236\236\236\236\236\236\236\236\236\236\236\236!" + "'", str2, "!\236\236\236\236\236\236\236\236\236\236\236\236\236\236\236\236!");
    }

    @Test
    public void test11963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11963");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\335\335\300\300~\335\335\300\300\335\335\300\300\335\335\300\300~\335\335\300\300\335\335\300\300!!\335\335\300\300~\335\335\300\300\335\335\300\300\335\335\300\300~\335\335\300\300\335\335\300\300!!\335\335\300\300~\335\335\300\300\335\335\300\300\335\335\300\300~\335\335\300\300\335\335\300\300\335\335\300\300~\335\335\300\300\335\335\300\300\335\335\300\300~\335\335\300\300\335\335\300\300!!\335\335\300\300~\335\335\300\300\335\335\300\300\335\335\300\300~\335\335\300\300\335\335\300\300!!\335\335\300\300~\335\335\300\300\335\335\300\300\335\335\300\300~\335\335\300\300\335\335\300\300!", "LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}LNUULNUU\200LNUU}}\200LNUU}}!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11964");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "!null!!!null!!!null!!!null!!null!null!!!!null!null!!!!null!null!!!!null!null!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11965");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240\u0260\u0260\u0240\u0240!", "`!!LL!!LL!!LL`!!LL!!LL!!LL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!!nullnullnullnull~nullnullnullnullnullnullnullnullnullnullnullnull~nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11966");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("XXXXXXXXXXXXXXXX\200}}`XXXXXXXXXXXXXXXX]]!", "!\236\236\236\236\236\236\236\236\236\236\236\236\236\236\236\236!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!");
    }

    @Test
    public void test11967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11967");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\276null\266\266~nullnull\276null\266\266~nullnull!!\276null\266\266~nullnull\276null\266\266~nullnull!!\276null\266\266~nullnull\276null\266\266~nullnull\276null\266\266~nullnull\276null\266\266~nullnull!!\276null\266\266~nullnull\276null\266\266~nullnull!!\276null\266\266~nullnull\276null\266\266~nullnull!", "u\375llu\375llu\375llu\375llu\375llu\375llu\375llu\375lluuu\375llu\375llu\375llu\375llu\375llu\375llu\375llu\375lluuu\375llu\375llu\375llu\375llu\375llu\375llu\375llu\375lluuu\375llu\375llu\375llu\375llu\375llu\375llu\375llu\375lluuu\375llu\375llu\375llu\375llu\375llu\375llu\375llu\375lluuu\375llu\375llu\375llu\375llu\375llu\375llu\375llu\375lluuu\375llu\375llu\375llu\375llu\375llu\375llu\375llu\375lluuu\375llu\375llu\375llu\375llu\375llu\375llu\375llu\375lluu!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e!!\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e!!\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e!!\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e!!\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e!" + "'", str2, "\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e!!\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e!!\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e!!\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e!!\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e\276\u0170\u016e\u016e\266\266\u0170\u016e\u016e\u0170\u016e\u016e!");
    }

    @Test
    public void test11968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11968");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````!", "FHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHHFHHH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````!" + "'", str2, "~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````!");
    }

    @Test
    public void test11969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11969");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!\256NN\200\200\254\254\256NN\200\200\254\254!!\256NN\200\200\254\254\256NN\200\200\254\254!!\256NN\200\200\254\254\256NN\200\200\254\254!!\256NN\200\200\254\254\256NN\200\200\254\254!!\256NN\200\200\254\254\256NN\200\200\254\254!!\256NN\200\200\254\254\256NN\200\200\254\254!!\256NN\200\200\254\254\256NN\200\200\254\254!!\256NN\200\200\254\254\256NN\200\200\254\254!", "\275``!~UU!~UU!~UU!~UU!~UU!~UU!~UU!~UU``!~UU!~UU!~UU!~UU!~UU!~UU!~UU!~UU``!~UU!~UU!~UU!~UU!~UU!~UU!~UU!~UU\276``!~UU!~UU!~UU!~UU!~UU!~UU!~UU!~UU\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!" + "'", str2, "!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!!\256nullnull\200\200\254\254\256nullnull\200\200\254\254!");
    }

    @Test
    public void test11970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11970");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL!!\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL!!\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL!!\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL!!\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL!!\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL!!\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL!!\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL\335ULL!!!", "\275\u0104\u0104\u0104\u0104\u0104\u0104\276\u0104\u0104\275\275!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104!!!" + "'", str2, "\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104\u0104!!!");
    }

    @Test
    public void test11971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11971");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!", "!\276\275\275!L~~!!L~~!L~~!L~~!L~~!\276\275\275!L~~!!L~~!L~~!L~~!L~~!!!\276\275\275!L~~!!L~~!L~~!L~~!L~~!\276\275\275!L~~!!L~~!L~~!L~~!L~~!!!\276\275\275!L~~!!L~~!L~~!L~~!L~~!\276\275\275!L~~!!L~~!L~~!L~~!L~~!!!\276\275\275!L~~!!L~~!L~~!L~~!L~~!\276\275\275!L~~!!L~~!L~~!L~~!L~~!!!\276\275\275!L~~!!L~~!L~~!L~~!L~~!\276\275\275!L~~!!L~~!L~~!L~~!L~~!!!\276\275\275!L~~!!L~~!L~~!L~~!L~~!\276\275\275!L~~!!L~~!L~~!L~~!L~~!!!\276\275\275!L~~!!L~~!L~~!L~~!L~~!\276\275\275!L~~!!L~~!L~~!L~~!L~~!!!\276\275\275!L~~!!L~~!L~~!L~~!L~~!\276\275\275!L~~!!L~~!L~~!L~~!L~~!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!" + "'", str2, "!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!");
    }

    @Test
    public void test11972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11972");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "\u0348\u0348\u01e0\u01e0\u01e0\u0348\u0348\u01e0\u01e0\u01e0\u0348\u0348\u01e0\u01e0\u01e0\u0348\u0348\u01e0\u01e0\u01e0\200\u0348\u0348\u01e0\u01e0\u01e0\u0348\u0348\u01e0\u01e0\u01e0\u0348\u0348\u01e0\u01e0\u01e0\u0348\u0348\u01e0\u01e0\u01e0]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test11973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11973");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~!", "\u0366\u0365\u0368\u0368nullnull\226\226nullnull\226\226\204\204nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226\204\204nullnull\226\226nullnull\226\226nullnull\226\226!!nullnull\226\226nullnull\226\226\204\204nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226\204\204nullnull\226\226nullnull\226\226nullnull\226\226!!nullnull\226\226nullnull\226\226\204\204nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226\204\204nullnull\226\226nullnull\226\226nullnull\226\226!!nullnull\226\226nullnull\226\226\204\204nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226nullnull\226\226\204\204nullnull\226\226nullnull\226\226nullnull\226\226\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~!" + "'", str2, "\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250\246\250\250\250~~!");
    }

    @Test
    public void test11974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11974");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("ORRRORRRRRORRRORRRRRORRRORRRRRORRRORRRRRORRRORRRRRORRRORRRRRORRRORRRRRORRRORRRRR!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LUUULUUUUULUUULUUUUULUUULUUUUULUUULUUUUULUUULUUUUULUUULUUUUULUUULUUUUULUUULUUUUU!" + "'", str2, "LUUULUUUUULUUULUUUUULUUULUUUUULUUULUUUUULUUULUUUUULUUULUUUUULUUULUUUUULUUULUUUUU!");
    }

    @Test
    public void test11975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11975");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnull]]]nullnullnullnull]]]!", "nulluuu\225\230nullnull!!nulluuu\225\230nullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull]]]nullnullnullnull]]]!" + "'", str2, "nullnullnullnull]]]nullnullnullnull]]]!");
    }

    @Test
    public void test11976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11976");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!!!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!!!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!!!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!!!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!!!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!!!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!!!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!\300\336\336!!!", "\275UNLLUNLLUNLL\276UNLL\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!" + "'", str2, "!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!!!");
    }

    @Test
    public void test11977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11977");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\200}}`NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN]]!", "!\253\256\256\266\214!\214\214\271\271\266\214!\214\214\271\271\266\214!\214\214\271\271\266\214!\214\214\271\271\266\214!\214\214\271\271\266\214!\214\214\271\271\266\214!\214\214\271\271\266\214!\214\214\271\271\266\214!\214\214\271\271\266\214!\214\214\271\271\266\214!\214\214\271\271\266\214!\214\214\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256\266\214!\214\214\271\271\266\214!\214\214\271\271\266\214!\214\214\271\271\266\214!\214\214\271\271\266\214!\214\214\271\271\266\214!\214\214\271\271\266\214!\214\214\271\271\266\214!\214\214\271\271\266\214!\214\214\271\271\266\214!\214\214\271\271\266\214!\214\214\271\271\266\214!\214\214\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!");
    }

    @Test
    public void test11978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11978");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226!!~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226!!!", "\230\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\230\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\230\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\230\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\230\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226!!~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226!!!" + "'", str2, "~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226!!~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226~!!!\230\226\226!!!");
    }

    @Test
    public void test11979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11979");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "\u0366\u0365\u0368\u0368!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!!!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!LNN!!\200\200\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11980");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJ!!LLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJ!!LLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJ!!LLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJ!!LLJJLLJJLLJJLLJJLLJJLLJJLLJJLLJJ!", "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253]!]]]!]]\253\253]!]]]!]]\253\253]!]]]!]]\253\253]!]]]!]]\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253]!]]]!]]\253\253]!]]]!]]\253\253!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test11981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11981");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!!N!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NN!", "\u0240\u0240!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!" + "'", str2, "!!!null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!");
    }

    @Test
    public void test11982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11982");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("JILLJILLJILLJILLJILLJILLJILLJILL!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11983");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\275``NNNNNNNN``NNNNNNNN``NNNNNNNN\276``NNNNNNNN\275\275!", "\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013d\u013dnullnullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\276\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\275\275!" + "'", str2, "\275\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\276\u014d\u014d\u014d\u014d\u014d\u014d\u014d\u014d\275\275!");
    }

    @Test
    public void test11984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11984");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encodenullnull!!NN]]NN]]NN]]nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!NN]]NN]]NN]]nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test11985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11985");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200\u014e\u014e\u014e\u014e\u014e\u014eLL}~\200\200}~\200\200\u014e\u014e\u014e\u014e\u014e\u014eLL}~\200\200}~\200\200\u014e\u014e\u014e\u014e\u014e\u014eLL}~\200\200}~\200\200\u014e\u014e\u014e\u014e\u014e\u014e\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null]nullnullnull]nullnull!!null]nullnullnull]nullnull!!null]nullnullnull]nullnullnull]nullnullnull]nullnull!!null]nullnullnull]nullnull!!null]nullnullnull]nullnull!" + "'", str2, "null]nullnullnull]nullnull!!null]nullnullnull]nullnull!!null]nullnullnull]nullnullnull]nullnullnull]nullnull!!null]nullnullnull]nullnull!!null]nullnullnull]nullnull!");
    }

    @Test
    public void test11986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11986");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("NULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL!", "null!nullnullnullnull!!nullnull!!nullnull!!nullnull!!null!nullnullnullnull!!nullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL!" + "'", str2, "NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL!");
    }

    @Test
    public void test11987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11987");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b\u029b!", "LNNN!LNNNLNNNLNNN!LNNNLNNNLNNN!LNNNLNNNLNNN!LNNNLNNNLNNN!LNNNLNNNLNNN!LNNNLNNNLNNN!LNNNLNNNLNNN!LNNNLNNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11988");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0346\u0348\u0348\u0348\300!\300\300\u0348\u0346\u0346!", "\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test11989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11989");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LULLLULL!!LULLLULL!!LULLLULLLULLLULL!!LULLLULL!!LULLLULL!", "\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c\u020c!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce!" + "'", str2, "\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce\u02ce\u02cc\u02ce\u02ce!");
    }

    @Test
    public void test11990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11990");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270!!}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270!!}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270!!}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270!!}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270!!}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270!!}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270!!}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270}^\270\270!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11991");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\276\276\275\275\275\275\276\276!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276\276\275\275\275\275\276\276!" + "'", str2, "\276\276\275\275\275\275\276\276!");
    }

    @Test
    public void test11992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11992");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("null\200}}`null]]!", "NLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u022d\u022e\u0230\u0230\200\u022d\u022e\u0230\u0230]]!" + "'", str2, "\u022d\u022e\u0230\u0230\200\u022d\u022e\u0230\u0230]]!");
    }

    @Test
    public void test11993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11993");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("U\336LLU\336LLLLU\336LLU\336LLLL!!U\336LLU\336LLLLU\336LLU\336LLLL!!U\336LLU\336LLLLU\336LLU\336LLLL!!U\336LLU\336LLLLU\336LLU\336LLLL!!U\336LLU\336LLLLU\336LLU\336LLLL!!U\336LLU\336LLLLU\336LLU\336LLLL!!U\336LLU\336LLLLU\336LLU\336LLLL!!U\336LLU\336LLLLU\336LLU\336LLLL!!!", "\200\275!!\200\275!!\200\275!!\200\275!!\200\275!!\200\275!!\200\275!!\200\275!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!");
    }

    @Test
    public void test11994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11994");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u028d\u028e\u0290\u0290nullnullnullnull!", "\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368\u0368!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test11995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11995");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!", "HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!" + "'", str2, "!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!~\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!\250!!!!");
    }

    @Test
    public void test11996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11996");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\275\275!!\275\275!!!!\275\275!!\275\275!!!!!", "uu}}uu}}uu}}uu}}!uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}!uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}!uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}!uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}!uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}!uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}!uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}!uu}}uu}}uu}}uu}}uu}}uu}}uu}}uu}}!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\275!!\275\275!!!!\275\275!!\275\275!!!!!" + "'", str2, "\275\275!!\275\275!!!!\275\275!!\275\275!!!!!");
    }

    @Test
    public void test11997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11997");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348\u037e\u037e\u0348\u0346\u0346!", "\u0366\u0365\u0368\u0368\220\220!!\220\220!!\220\220!!\220\220\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u037e\u037e\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u037e\u037e\u0348\u0346\u0346!");
    }

    @Test
    public void test11998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11998");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encodeu031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031a\u031anullnullnullnullnullnullnullnull!!!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test11999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11999");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("`\231\231\220\220\231\231\220\220\231\231\220\220`\231\231\220\220\231\231\220\220\231\231\220\220!", "null~}\200\200nullnullnull~}\200\200nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`\231\231\220\220\231\231\220\220\231\231\220\220`\231\231\220\220\231\231\220\220\231\231\220\220!" + "'", str2, "`\231\231\220\220\231\231\220\220\231\231\220\220`\231\231\220\220\231\231\220\220\231\231\220\220!");
    }

    @Test
    public void test12000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test12000");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("^^]]^^]]^^]]^^]]~}}^^^]]^^]]^^]]^^]]]]!", "uuuu\260\255\255\225\230\230uuuu\260\255\255\225\230\230uuuu\260\255\255\225\230\230uuuu\260\255\255\225\230\230\200}}`uuuu\260\255\255\225\230\230uuuu\260\255\255\225\230\230uuuu\260\255\255\225\230\230uuuu\260\255\255\225\230\230]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^^]]^^]]^^]]^^]]~}}^^^]]^^]]^^]]^^]]]]!" + "'", str2, "^^]]^^]]^^]]^^]]~}}^^^]]^^]]^^]]^^]]]]!");
    }
}

package maths.ADTFraction;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) (-1));
        java.lang.Class<?> wildcardClass5 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        java.lang.Class<?> wildcardClass12 = aDTFraction11.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.Class<?> wildcardClass18 = aDTFraction14.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) (-1));
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        java.lang.Class<?> wildcardClass14 = aDTFraction5.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        java.lang.Class<?> wildcardClass13 = aDTFraction5.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 10);
        java.lang.String str3 = aDTFraction2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100/10" + "'", str3, "100/10");
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        java.lang.Class<?> wildcardClass25 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction2.numerator();
        java.lang.Class<?> wildcardClass13 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) ' ', (int) (byte) 100);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        java.lang.Class<?> wildcardClass4 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        boolean boolean41 = aDTFraction39.equals((java.lang.Object) 1L);
        int int42 = aDTFraction39.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        float float12 = aDTFraction5.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction5.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction25.times(aDTFraction28);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction38.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        int int13 = aDTFraction12.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction5.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        int int18 = aDTFraction17.numerator();
        int int19 = aDTFraction17.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        java.lang.String str5 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0/-1" + "'", str5, "0/-1");
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        java.lang.Class<?> wildcardClass45 = aDTFraction15.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction36.times(aDTFraction42);
        int int46 = aDTFraction42.numerator();
        int int47 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        boolean boolean57 = aDTFraction53.equals((java.lang.Object) ' ');
        boolean boolean59 = aDTFraction53.equals((java.lang.Object) "");
        float float60 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction42.times(aDTFraction53);
        boolean boolean62 = aDTFraction33.equals((java.lang.Object) aDTFraction42);
        boolean boolean63 = aDTFraction17.equals((java.lang.Object) aDTFraction42);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction17.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        int int23 = aDTFraction8.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction22.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        boolean boolean10 = aDTFraction2.equals((java.lang.Object) (short) 1);
        java.lang.Class<?> wildcardClass11 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        java.lang.Class<?> wildcardClass40 = aDTFraction39.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction42.times(aDTFraction48);
        int int52 = aDTFraction42.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        boolean boolean69 = aDTFraction61.equals((java.lang.Object) aDTFraction67);
        java.lang.String str70 = aDTFraction67.toString();
        java.lang.String str71 = aDTFraction67.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.times(aDTFraction74);
        boolean boolean77 = aDTFraction42.equals((java.lang.Object) aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction39.times(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-1" + "'", str70, "0/-1");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(aDTFraction78);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.Class<?> wildcardClass13 = aDTFraction5.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        java.lang.Class<?> wildcardClass35 = aDTFraction34.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        float float19 = aDTFraction14.value();
        int int20 = aDTFraction14.numerator();
        float float21 = aDTFraction14.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        boolean boolean40 = aDTFraction32.equals((java.lang.Object) aDTFraction38);
        java.lang.String str41 = aDTFraction38.toString();
        java.lang.String str42 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction14.plus(aDTFraction44);
        java.lang.String str46 = aDTFraction44.toString();
        java.lang.Class<?> wildcardClass47 = aDTFraction44.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0/-1" + "'", str46, "0/-1");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction50.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int63 = aDTFraction62.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction50.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction47.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        boolean boolean75 = aDTFraction71.equals((java.lang.Object) ' ');
        boolean boolean77 = aDTFraction71.equals((java.lang.Object) "");
        java.lang.String str78 = aDTFraction71.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction65.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction39.times(aDTFraction79);
        float float81 = aDTFraction39.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0/-1" + "'", str78, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        int int19 = aDTFraction13.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction13.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction27.times((int) (byte) 100);
        float float34 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction13.plus(aDTFraction27);
        boolean boolean36 = aDTFraction2.equals((java.lang.Object) aDTFraction27);
        java.lang.String str37 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0/-1" + "'", str37, "0/-1");
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) (byte) 100);
        int int16 = aDTFraction5.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) (byte) -1);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int58 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction45.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction59);
        int int61 = aDTFraction59.denominator();
        boolean boolean62 = aDTFraction34.equals((java.lang.Object) aDTFraction59);
        int int63 = aDTFraction34.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction7.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times((int) (byte) 10);
        java.lang.Class<?> wildcardClass30 = aDTFraction29.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        java.lang.Class<?> wildcardClass17 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        boolean boolean40 = aDTFraction32.equals((java.lang.Object) aDTFraction38);
        java.lang.String str41 = aDTFraction38.toString();
        java.lang.String str42 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction14.plus(aDTFraction44);
        int int46 = aDTFraction14.denominator();
        int int47 = aDTFraction14.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        int int25 = aDTFraction10.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        int int39 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction31.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction10.plus(aDTFraction41);
        int int43 = aDTFraction41.denominator();
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) '4');
        boolean boolean46 = aDTFraction5.equals((java.lang.Object) boolean45);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (short) 100);
        java.lang.Class<?> wildcardClass21 = aDTFraction14.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction25.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction25.times((int) (short) 1);
        java.lang.Class<?> wildcardClass41 = aDTFraction40.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        int int28 = aDTFraction11.numerator();
        java.lang.String str29 = aDTFraction11.toString();
        java.lang.String str30 = aDTFraction11.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction12.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction2.plus(aDTFraction34);
        java.lang.Class<?> wildcardClass36 = aDTFraction34.getClass();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        int int27 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        java.lang.Class<?> wildcardClass37 = aDTFraction34.getClass();
        boolean boolean38 = aDTFraction14.equals((java.lang.Object) aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction2.times(aDTFraction53);
        java.lang.Class<?> wildcardClass55 = aDTFraction53.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) '#');
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        float float34 = aDTFraction12.value();
        int int35 = aDTFraction12.denominator();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 0.0f + "'", float34 == 0.0f);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction19.equals((java.lang.Object) 10);
        boolean boolean27 = aDTFraction14.equals((java.lang.Object) aDTFraction19);
        java.lang.Class<?> wildcardClass28 = aDTFraction19.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        java.lang.Class<?> wildcardClass18 = aDTFraction16.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.Class<?> wildcardClass17 = aDTFraction14.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        int int13 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        boolean boolean25 = aDTFraction19.equals((java.lang.Object) "");
        float float26 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction8.times(aDTFraction19);
        java.lang.Class<?> wildcardClass28 = aDTFraction19.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        float float86 = aDTFraction85.value();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + 0.0f + "'", float86 == 0.0f);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction23.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction14.times(1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction22.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        float float23 = aDTFraction22.value();
        java.lang.Object obj24 = null;
        boolean boolean25 = aDTFraction22.equals(obj24);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        float float91 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + 1.0f + "'", float91 == 1.0f);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        int int24 = aDTFraction14.denominator();
        float float25 = aDTFraction14.value();
        java.lang.Class<?> wildcardClass26 = aDTFraction14.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        java.lang.String str12 = aDTFraction8.toString();
        int int13 = aDTFraction8.numerator();
        int int14 = aDTFraction8.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        boolean boolean10 = aDTFraction2.equals((java.lang.Object) (short) 1);
        java.lang.String str11 = aDTFraction2.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction5.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction14.plus(aDTFraction50);
        float float53 = aDTFraction52.value();
        int int54 = aDTFraction52.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        java.lang.Class<?> wildcardClass19 = aDTFraction14.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        int int32 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction26.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        float float47 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction26.plus(aDTFraction40);
        int int49 = aDTFraction26.numerator();
        java.lang.String str50 = aDTFraction26.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction22.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction22.times((int) (short) 100);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0/-1" + "'", str50, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction53);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int8 = aDTFraction7.denominator();
        boolean boolean9 = aDTFraction2.equals((java.lang.Object) int8);
        java.lang.Class<?> wildcardClass10 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        boolean boolean39 = aDTFraction31.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction42.equals((java.lang.Object) 10);
        boolean boolean50 = aDTFraction37.equals((java.lang.Object) aDTFraction42);
        boolean boolean51 = aDTFraction15.equals((java.lang.Object) boolean50);
        java.lang.Class<?> wildcardClass52 = aDTFraction15.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction12.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction19.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(52, (int) (short) 100);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        int int36 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction39.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction33.times(aDTFraction49);
        java.lang.String str51 = aDTFraction33.toString();
        int int52 = aDTFraction33.denominator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction33.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        int int14 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        boolean boolean24 = aDTFraction20.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction20.times((int) (byte) 100);
        java.lang.String str27 = aDTFraction20.toString();
        int int28 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction20.times((int) ' ');
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction5.plus(aDTFraction30);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction30.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction2.reciprocal();
        java.lang.Class<?> wildcardClass22 = aDTFraction21.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        java.lang.Class<?> wildcardClass10 = aDTFraction5.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        int int32 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction26.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        float float47 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction26.plus(aDTFraction40);
        int int49 = aDTFraction26.numerator();
        java.lang.String str50 = aDTFraction26.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction22.plus(aDTFraction26);
        float float52 = aDTFraction51.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0/-1" + "'", str50, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.times(aDTFraction42);
        java.lang.Class<?> wildcardClass45 = aDTFraction39.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        float float17 = aDTFraction11.value();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        float float40 = aDTFraction39.value();
        java.lang.Class<?> wildcardClass41 = aDTFraction39.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        int int26 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        java.lang.String str35 = aDTFraction29.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (byte) 100);
        java.lang.String str48 = aDTFraction41.toString();
        int int49 = aDTFraction41.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction41.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction29.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction24.times(aDTFraction52);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction52.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(52, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction16.times(0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction18.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) ' ');
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction47.times(aDTFraction53);
        int int57 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        java.lang.String str66 = aDTFraction60.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction53.plus(aDTFraction60);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        int int77 = aDTFraction71.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction71.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction82.plus(aDTFraction85);
        boolean boolean89 = aDTFraction85.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction85.times((int) (byte) 100);
        float float92 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction71.plus(aDTFraction85);
        int int94 = aDTFraction71.numerator();
        java.lang.String str95 = aDTFraction71.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction67.plus(aDTFraction71);
        java.lang.Class<?> wildcardClass97 = aDTFraction67.getClass();
        boolean boolean98 = aDTFraction39.equals((java.lang.Object) aDTFraction67);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 0.0f + "'", float68 == 0.0f);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + (-0.0f) + "'", float92 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "0/-1" + "'", str95, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertNotNull(wildcardClass97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        float float12 = aDTFraction5.value();
        java.lang.String str13 = aDTFraction5.toString();
        java.lang.Class<?> wildcardClass14 = aDTFraction5.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        int int9 = aDTFraction7.denominator();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction36.times(aDTFraction42);
        int int46 = aDTFraction42.numerator();
        int int47 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        boolean boolean57 = aDTFraction53.equals((java.lang.Object) ' ');
        boolean boolean59 = aDTFraction53.equals((java.lang.Object) "");
        float float60 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction42.times(aDTFraction53);
        boolean boolean62 = aDTFraction33.equals((java.lang.Object) aDTFraction42);
        boolean boolean63 = aDTFraction17.equals((java.lang.Object) aDTFraction42);
        java.lang.String str64 = aDTFraction42.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-1" + "'", str64, "0/-1");
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        int int38 = aDTFraction34.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction8.times(aDTFraction25);
        java.lang.String str41 = aDTFraction8.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction8.plus(aDTFraction42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        java.lang.String str12 = aDTFraction8.toString();
        int int13 = aDTFraction8.numerator();
        boolean boolean15 = aDTFraction8.equals((java.lang.Object) 100.0d);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction39.times((int) (short) 1);
        java.lang.String str42 = aDTFraction41.toString();
        java.lang.String str43 = aDTFraction41.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-100" + "'", str42, "0/-100");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-100" + "'", str43, "0/-100");
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        boolean boolean10 = aDTFraction2.equals((java.lang.Object) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction16.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction16.times(aDTFraction28);
        int int31 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction37.times((int) (byte) 100);
        java.lang.String str44 = aDTFraction37.toString();
        int int45 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction37.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction16.plus(aDTFraction47);
        int int49 = aDTFraction47.denominator();
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction5.times(aDTFraction47);
        float float53 = aDTFraction52.value();
        java.lang.String str54 = aDTFraction52.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/1" + "'", str54, "0/1");
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        float float23 = aDTFraction22.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction22.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction4.plus(aDTFraction5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(aDTFraction4);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int36 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction23.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction23.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction20.plus(aDTFraction23);
        int int44 = aDTFraction20.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int58 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction45.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction59);
        int int61 = aDTFraction59.denominator();
        boolean boolean62 = aDTFraction34.equals((java.lang.Object) aDTFraction59);
        int int63 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.times((int) (short) 0);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-100) + "'", int63 == (-100));
        org.junit.Assert.assertNotNull(aDTFraction65);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction39.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction12.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction2.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction34.times((int) (short) 0);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction37);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction14.plus(aDTFraction50);
        int int53 = aDTFraction50.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction42.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction57.times(aDTFraction63);
        int int67 = aDTFraction63.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction54.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        java.lang.Class<?> wildcardClass77 = aDTFraction74.getClass();
        boolean boolean78 = aDTFraction54.equals((java.lang.Object) aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float85 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction81.plus(aDTFraction84);
        boolean boolean88 = aDTFraction84.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction84.times((int) (byte) 100);
        java.lang.String str91 = aDTFraction84.toString();
        int int92 = aDTFraction84.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction74.plus(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction42.times(aDTFraction93);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction25.plus(aDTFraction42);
        float float96 = aDTFraction42.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-0.0f) + "'", float85 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0/-1" + "'", str91, "0/-1");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertTrue("'" + float96 + "' != '" + (-1.0f) + "'", float96 == (-1.0f));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        float float25 = aDTFraction16.value();
        java.lang.Class<?> wildcardClass26 = aDTFraction16.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction14.denominator();
        int int18 = aDTFraction14.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction25.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction41.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int54 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction41.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction41.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.times(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction62.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction41.times(aDTFraction77);
        boolean boolean79 = aDTFraction25.equals((java.lang.Object) aDTFraction41);
        java.lang.Class<?> wildcardClass80 = aDTFraction25.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        int int27 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        java.lang.Class<?> wildcardClass37 = aDTFraction34.getClass();
        boolean boolean38 = aDTFraction14.equals((java.lang.Object) aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction2.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction65.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int78 = aDTFraction77.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction65.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction62.times(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction54.plus(aDTFraction62);
        float float82 = aDTFraction54.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + 0.0f + "'", float82 == 0.0f);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction14.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction11.denominator();
        java.lang.String str13 = aDTFraction11.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction11.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int41 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction28.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction43.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction59.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int72 = aDTFraction71.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction59.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction59.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float81 = aDTFraction80.value();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction77.plus(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float92 = aDTFraction91.value();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction88.plus(aDTFraction91);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction85.times(aDTFraction91);
        com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction80.plus(aDTFraction94);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction59.times(aDTFraction95);
        boolean boolean97 = aDTFraction43.equals((java.lang.Object) aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction17.times(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + (-0.0f) + "'", float92 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertNotNull(aDTFraction95);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(aDTFraction98);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction7.times(100);
        int int28 = aDTFraction27.numerator();
        java.lang.String str29 = aDTFraction27.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/1" + "'", str29, "0/1");
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction2.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        int int27 = aDTFraction17.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean32 = aDTFraction30.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction41);
        int int45 = aDTFraction35.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction48.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        boolean boolean62 = aDTFraction54.equals((java.lang.Object) aDTFraction60);
        java.lang.String str63 = aDTFraction60.toString();
        java.lang.String str64 = aDTFraction60.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction60.times(aDTFraction67);
        boolean boolean70 = aDTFraction35.equals((java.lang.Object) aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction30.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction17.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction2.times(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0/-1" + "'", str63, "0/-1");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-1" + "'", str64, "0/-1");
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 100);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction46);
        java.lang.String str49 = aDTFraction48.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/1000000" + "'", str49, "0/1000000");
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction14.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        java.lang.String str23 = aDTFraction22.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times(100);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/1" + "'", str23, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction25);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        int int11 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        int int24 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        java.lang.String str33 = aDTFraction27.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction20.plus(aDTFraction27);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        int int44 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction38.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        boolean boolean56 = aDTFraction52.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction52.times((int) (byte) 100);
        float float59 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction38.plus(aDTFraction52);
        int int61 = aDTFraction38.numerator();
        java.lang.String str62 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction34.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction2.plus(aDTFraction63);
        java.lang.Class<?> wildcardClass65 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/-1" + "'", str33, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0/-1" + "'", str62, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int18 = aDTFraction17.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction5.times(aDTFraction17);
        int int20 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        boolean boolean30 = aDTFraction26.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction26.times((int) (byte) 100);
        java.lang.String str33 = aDTFraction26.toString();
        int int34 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction26.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction36);
        int int38 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        int int47 = aDTFraction41.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction41.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        int int58 = aDTFraction52.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction52.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        boolean boolean70 = aDTFraction66.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction66.times((int) (byte) 100);
        float float73 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction52.plus(aDTFraction66);
        boolean boolean75 = aDTFraction41.equals((java.lang.Object) aDTFraction66);
        boolean boolean76 = aDTFraction36.equals((java.lang.Object) aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction2.plus(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/-1" + "'", str33, "0/-1");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(aDTFraction77);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        boolean boolean29 = aDTFraction21.equals((java.lang.Object) aDTFraction27);
        java.lang.String str30 = aDTFraction27.toString();
        java.lang.String str31 = aDTFraction27.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction34);
        boolean boolean37 = aDTFraction2.equals((java.lang.Object) aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction2.reciprocal();
        java.lang.String str39 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0/-1" + "'", str31, "0/-1");
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1/1" + "'", str39, "-1/1");
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) '4');
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str3 = aDTFraction2.toString();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        java.lang.Class<?> wildcardClass13 = aDTFraction12.getClass();
        boolean boolean14 = aDTFraction2.equals((java.lang.Object) aDTFraction12);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/1" + "'", str3, "-1/1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-1.0f) + "'", float4 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        int int36 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction39.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction33.times(aDTFraction49);
        java.lang.String str51 = aDTFraction33.toString();
        int int52 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        boolean boolean69 = aDTFraction61.equals((java.lang.Object) aDTFraction67);
        java.lang.String str70 = aDTFraction67.toString();
        java.lang.String str71 = aDTFraction67.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction82.plus(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction79.times(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float92 = aDTFraction91.value();
        boolean boolean93 = aDTFraction85.equals((java.lang.Object) aDTFraction91);
        java.lang.String str94 = aDTFraction91.toString();
        java.lang.String str95 = aDTFraction91.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction91.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction67.plus(aDTFraction97);
        com.thealgorithms.maths.ADTFraction aDTFraction99 = aDTFraction33.times(aDTFraction98);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-1" + "'", str70, "0/-1");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + (-0.0f) + "'", float92 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "0/-1" + "'", str94, "0/-1");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "0/-1" + "'", str95, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction97);
        org.junit.Assert.assertNotNull(aDTFraction98);
        org.junit.Assert.assertNotNull(aDTFraction99);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        java.lang.String str21 = aDTFraction19.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        java.lang.String str11 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        java.lang.String str16 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        int int29 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction23.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction37.times((int) (byte) 100);
        float float44 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction23.plus(aDTFraction37);
        int int46 = aDTFraction23.numerator();
        java.lang.String str47 = aDTFraction23.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction53.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction54.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean60 = aDTFraction56.equals((java.lang.Object) aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        int int69 = aDTFraction63.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction59.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction50.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction2.times(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-100), (int) (short) 1);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        int int7 = aDTFraction5.denominator();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, (int) 'a');
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction36.times(aDTFraction42);
        int int46 = aDTFraction42.numerator();
        int int47 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        boolean boolean57 = aDTFraction53.equals((java.lang.Object) ' ');
        boolean boolean59 = aDTFraction53.equals((java.lang.Object) "");
        float float60 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction42.times(aDTFraction53);
        boolean boolean62 = aDTFraction33.equals((java.lang.Object) aDTFraction42);
        boolean boolean63 = aDTFraction17.equals((java.lang.Object) aDTFraction42);
        int int64 = aDTFraction42.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times((int) '4');
        int int26 = aDTFraction22.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction19.equals((java.lang.Object) 10);
        boolean boolean27 = aDTFraction14.equals((java.lang.Object) aDTFraction19);
        boolean boolean29 = aDTFraction14.equals((java.lang.Object) false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction14.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        java.lang.String str8 = aDTFraction7.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0/1" + "'", str8, "0/1");
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        int int24 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        int int33 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction27.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        int int46 = aDTFraction40.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction36.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str51 = aDTFraction50.toString();
        boolean boolean52 = aDTFraction36.equals((java.lang.Object) aDTFraction50);
        boolean boolean53 = aDTFraction23.equals((java.lang.Object) boolean52);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-1/10" + "'", str51, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction7.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times((int) (short) 100);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction29);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction23.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction2.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str43 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int67 = aDTFraction66.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction54.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction51.times(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction72.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction69.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction69.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction42.times(aDTFraction69);
        java.lang.String str86 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction2.times(aDTFraction42);
        java.lang.Class<?> wildcardClass88 = aDTFraction42.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/-1" + "'", str86, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction13.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction10.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        boolean boolean38 = aDTFraction34.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction34.times((int) (byte) 100);
        java.lang.String str41 = aDTFraction34.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction10.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction56.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction53.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int66 = aDTFraction65.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction53.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction50.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        boolean boolean78 = aDTFraction74.equals((java.lang.Object) ' ');
        boolean boolean80 = aDTFraction74.equals((java.lang.Object) "");
        java.lang.String str81 = aDTFraction74.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction42.times(aDTFraction82);
        java.lang.Class<?> wildcardClass84 = aDTFraction83.getClass();
        boolean boolean85 = aDTFraction2.equals((java.lang.Object) aDTFraction83);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0/-1" + "'", str81, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) ' ');
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-1.0f) + "'", float4 == (-1.0f));
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        boolean boolean10 = aDTFraction2.equals((java.lang.Object) (short) 1);
        java.lang.String str11 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction2.times((int) 'a');
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction13);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        int int17 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        java.lang.Class<?> wildcardClass26 = aDTFraction25.getClass();
        boolean boolean27 = aDTFraction5.equals((java.lang.Object) aDTFraction25);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        java.lang.String str26 = aDTFraction19.toString();
        int int27 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction19.times((int) (byte) 10);
        boolean boolean32 = aDTFraction5.equals((java.lang.Object) aDTFraction31);
        int int33 = aDTFraction31.numerator();
        int int34 = aDTFraction31.numerator();
        int int35 = aDTFraction31.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction25.times(aDTFraction28);
        int int39 = aDTFraction28.denominator();
        int int40 = aDTFraction28.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        java.lang.String str23 = aDTFraction22.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction22.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/1" + "'", str23, "0/1");
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        int int91 = aDTFraction2.denominator();
        int int92 = aDTFraction2.numerator();
        float float93 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertTrue("'" + float93 + "' != '" + 1.0f + "'", float93 == 1.0f);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        float float26 = aDTFraction7.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        boolean boolean43 = aDTFraction35.equals((java.lang.Object) aDTFraction41);
        java.lang.String str44 = aDTFraction41.toString();
        java.lang.String str45 = aDTFraction41.toString();
        float float46 = aDTFraction41.value();
        int int47 = aDTFraction41.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction58.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int71 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction58.times(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction55.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction41.plus(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction7.plus(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        int int36 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction39.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction33.times(aDTFraction49);
        java.lang.String str51 = aDTFraction33.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction33.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        boolean boolean30 = aDTFraction25.equals((java.lang.Object) float29);
        int int31 = aDTFraction25.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        boolean boolean19 = aDTFraction11.equals((java.lang.Object) aDTFraction17);
        java.lang.String str20 = aDTFraction17.toString();
        java.lang.String str21 = aDTFraction17.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        boolean boolean43 = aDTFraction35.equals((java.lang.Object) aDTFraction41);
        java.lang.String str44 = aDTFraction41.toString();
        java.lang.String str45 = aDTFraction41.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction17.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction2.times(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int53 = aDTFraction52.denominator();
        boolean boolean54 = aDTFraction17.equals((java.lang.Object) int53);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction17.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/-1" + "'", str20, "0/-1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times((int) (byte) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int22 = aDTFraction21.denominator();
        boolean boolean24 = aDTFraction21.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction21.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction11.times(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        int int4 = aDTFraction2.denominator();
        java.lang.Class<?> wildcardClass5 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = aDTFraction22.equals(obj23);
        float float25 = aDTFraction22.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction40.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction41.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction5.times(aDTFraction43);
        java.lang.Class<?> wildcardClass45 = aDTFraction44.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        java.lang.Class<?> wildcardClass23 = aDTFraction11.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        int int13 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int37 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction24.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction21.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction45.times((int) (byte) 100);
        java.lang.String str52 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction21.times(aDTFraction45);
        int int54 = aDTFraction21.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction8.plus(aDTFraction21);
        java.lang.Class<?> wildcardClass56 = aDTFraction21.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        java.lang.String str39 = aDTFraction32.toString();
        int int40 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction22.plus(aDTFraction32);
        java.lang.String str42 = aDTFraction22.toString();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        java.lang.String str12 = aDTFraction8.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str16 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int40 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction27.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction24.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction42.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction42.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction15.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        int int67 = aDTFraction61.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction61.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float76 = aDTFraction75.value();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction72.plus(aDTFraction75);
        int int78 = aDTFraction72.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction72.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float87 = aDTFraction86.value();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction83.plus(aDTFraction86);
        boolean boolean90 = aDTFraction86.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction86.times((int) (byte) 100);
        float float93 = aDTFraction86.value();
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction72.plus(aDTFraction86);
        boolean boolean95 = aDTFraction61.equals((java.lang.Object) aDTFraction86);
        float float96 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction42.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction98 = aDTFraction8.plus(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + (-0.0f) + "'", float76 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + (-0.0f) + "'", float87 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + float93 + "' != '" + (-0.0f) + "'", float93 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + float96 + "' != '" + (-0.0f) + "'", float96 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction97);
        org.junit.Assert.assertNotNull(aDTFraction98);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) 100.0d);
        java.lang.Class<?> wildcardClass5 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction20.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean90 = aDTFraction88.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction85.plus(aDTFraction88);
        java.lang.Class<?> wildcardClass92 = aDTFraction91.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        java.lang.Class<?> wildcardClass86 = aDTFraction84.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        boolean boolean5 = aDTFraction2.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.reciprocal();
        int int7 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, 10);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction13.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction10.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        boolean boolean38 = aDTFraction34.equals((java.lang.Object) ' ');
        boolean boolean40 = aDTFraction34.equals((java.lang.Object) "");
        java.lang.String str41 = aDTFraction34.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        int int55 = aDTFraction45.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float65 = aDTFraction64.value();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction61.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction58.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        boolean boolean72 = aDTFraction64.equals((java.lang.Object) aDTFraction70);
        java.lang.String str73 = aDTFraction70.toString();
        java.lang.String str74 = aDTFraction70.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction70.times(aDTFraction77);
        boolean boolean80 = aDTFraction45.equals((java.lang.Object) aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction45.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction34.times(aDTFraction81);
        java.lang.Class<?> wildcardClass83 = aDTFraction81.getClass();
        boolean boolean84 = aDTFraction2.equals((java.lang.Object) wildcardClass83);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + (-0.0f) + "'", float65 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "0/-1" + "'", str73, "0/-1");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0/-1" + "'", str74, "0/-1");
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        java.lang.String str26 = aDTFraction19.toString();
        int int27 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction19.times((int) (byte) 10);
        boolean boolean32 = aDTFraction5.equals((java.lang.Object) aDTFraction31);
        java.lang.String str33 = aDTFraction31.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/-1" + "'", str33, "0/-1");
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (byte) 1);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        float float40 = aDTFraction39.value();
        java.lang.String str41 = aDTFraction39.toString();
        int int42 = aDTFraction39.denominator();
        int int43 = aDTFraction39.numerator();
        java.lang.Class<?> wildcardClass44 = aDTFraction39.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-100" + "'", str41, "0/-100");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-100) + "'", int42 == (-100));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        int int32 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction26.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        float float47 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction26.plus(aDTFraction40);
        int int49 = aDTFraction26.numerator();
        java.lang.String str50 = aDTFraction26.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction22.plus(aDTFraction26);
        int int52 = aDTFraction22.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0/-1" + "'", str50, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        int int27 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        java.lang.Class<?> wildcardClass37 = aDTFraction34.getClass();
        boolean boolean38 = aDTFraction14.equals((java.lang.Object) aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction2.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction65.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int78 = aDTFraction77.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction65.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction62.times(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction54.plus(aDTFraction62);
        java.lang.Class<?> wildcardClass82 = aDTFraction62.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        int int27 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        java.lang.Class<?> wildcardClass37 = aDTFraction34.getClass();
        boolean boolean38 = aDTFraction14.equals((java.lang.Object) aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction2.times(aDTFraction53);
        java.lang.Class<?> wildcardClass55 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction2.reciprocal();
        java.lang.String str22 = aDTFraction21.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1/-1" + "'", str22, "1/-1");
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, (int) '4');
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        int int45 = aDTFraction15.numerator();
        int int46 = aDTFraction15.numerator();
        int int47 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction15.times(aDTFraction48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (int) (short) 1);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction34.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction46);
        java.lang.Class<?> wildcardClass49 = aDTFraction43.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        java.lang.String str15 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction13.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times((int) (byte) -1);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        int int18 = aDTFraction16.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction16.times((int) (byte) 10);
        int int21 = aDTFraction20.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        boolean boolean15 = aDTFraction11.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction11.times((int) (byte) 100);
        java.lang.String str18 = aDTFraction11.toString();
        int int19 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction11.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        int int34 = aDTFraction30.numerator();
        int int35 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        boolean boolean47 = aDTFraction41.equals((java.lang.Object) "");
        float float48 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction30.times(aDTFraction41);
        boolean boolean50 = aDTFraction21.equals((java.lang.Object) aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        int int59 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        int int72 = aDTFraction66.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction62.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction21.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction2.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction75.times((int) (byte) 0);
        float float78 = aDTFraction75.value();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        int int20 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction14.times((int) '#');
        boolean boolean23 = aDTFraction5.equals((java.lang.Object) aDTFraction22);
        java.lang.String str24 = aDTFraction5.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        int int14 = aDTFraction5.denominator();
        int int15 = aDTFraction5.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        boolean boolean41 = aDTFraction39.equals((java.lang.Object) 1L);
        java.lang.Class<?> wildcardClass42 = aDTFraction39.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction13.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction10.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        boolean boolean38 = aDTFraction34.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction34.times((int) (byte) 100);
        java.lang.String str41 = aDTFraction34.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction10.times(aDTFraction34);
        java.lang.String str43 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction2.times(aDTFraction42);
        int int45 = aDTFraction42.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean90 = aDTFraction88.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction85.plus(aDTFraction88);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction85.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(aDTFraction91);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (short) -1);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str3 = aDTFraction2.toString();
        java.lang.String str4 = aDTFraction2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/-1" + "'", str3, "0/-1");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        int int45 = aDTFraction15.numerator();
        int int46 = aDTFraction15.numerator();
        float float47 = aDTFraction15.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        int int13 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction7.times((int) '#');
        int int16 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        int int29 = aDTFraction25.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        java.lang.String str38 = aDTFraction32.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.plus(aDTFraction32);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        int int49 = aDTFraction43.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction43.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        boolean boolean61 = aDTFraction57.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction57.times((int) (byte) 100);
        float float64 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction43.plus(aDTFraction57);
        int int66 = aDTFraction43.numerator();
        java.lang.String str67 = aDTFraction43.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction39.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction7.plus(aDTFraction68);
        boolean boolean70 = aDTFraction2.equals((java.lang.Object) aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + 0.0f + "'", float40 == 0.0f);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        java.lang.Object obj3 = null;
        boolean boolean4 = aDTFraction2.equals(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        float float15 = aDTFraction8.value();
        boolean boolean16 = aDTFraction2.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction22.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction22.times((int) (byte) 100);
        java.lang.String str29 = aDTFraction22.toString();
        int int30 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction22.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction8.times(aDTFraction32);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction8.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0/-1" + "'", str29, "0/-1");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction2.reciprocal();
        java.lang.Class<?> wildcardClass22 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction11.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction29.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.times(aDTFraction29);
        java.lang.String str46 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction49.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        int int68 = aDTFraction62.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction58.times(aDTFraction62);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction69.times((int) (short) 0);
        float float73 = aDTFraction72.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction45.times(aDTFraction72);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/-1" + "'", str3, "0/-1");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0/-100" + "'", str46, "0/-100");
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + 0.0f + "'", float70 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + 0.0f + "'", float73 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction74);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction50.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int63 = aDTFraction62.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction50.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction47.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        boolean boolean75 = aDTFraction71.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction71.times((int) (byte) 100);
        java.lang.String str78 = aDTFraction71.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction47.times(aDTFraction71);
        int int80 = aDTFraction79.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction31.times(aDTFraction79);
        float float82 = aDTFraction79.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0/-1" + "'", str78, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction28.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        boolean boolean46 = aDTFraction42.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction42.times((int) (byte) 100);
        float float49 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction28.plus(aDTFraction42);
        java.lang.Class<?> wildcardClass51 = aDTFraction50.getClass();
        boolean boolean52 = aDTFraction25.equals((java.lang.Object) aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction50.plus(aDTFraction53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        boolean boolean14 = aDTFraction10.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction10.times((int) (byte) 100);
        java.lang.String str17 = aDTFraction10.toString();
        int int18 = aDTFraction10.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction10.times((int) ' ');
        int int21 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction27.times((int) (byte) 100);
        java.lang.String str34 = aDTFraction27.toString();
        int int35 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction38.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int51 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction38.times(aDTFraction50);
        int int53 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction56.plus(aDTFraction59);
        boolean boolean63 = aDTFraction59.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.times((int) (byte) 100);
        java.lang.String str66 = aDTFraction59.toString();
        int int67 = aDTFraction59.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction59.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction38.plus(aDTFraction69);
        int int71 = aDTFraction69.denominator();
        boolean boolean73 = aDTFraction69.equals((java.lang.Object) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction27.times(aDTFraction69);
        boolean boolean75 = aDTFraction20.equals((java.lang.Object) aDTFraction74);
        boolean boolean76 = aDTFraction2.equals((java.lang.Object) boolean75);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-1.0f) + "'", float4 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0/-1" + "'", str34, "0/-1");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction46.reciprocal();
        float float50 = aDTFraction49.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 1.0f + "'", float50 == 1.0f);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        boolean boolean40 = aDTFraction32.equals((java.lang.Object) aDTFraction38);
        java.lang.String str41 = aDTFraction38.toString();
        java.lang.String str42 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction14.plus(aDTFraction44);
        java.lang.Class<?> wildcardClass46 = aDTFraction45.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(52, 10);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        boolean boolean39 = aDTFraction31.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction42.equals((java.lang.Object) 10);
        boolean boolean50 = aDTFraction37.equals((java.lang.Object) aDTFraction42);
        boolean boolean51 = aDTFraction15.equals((java.lang.Object) boolean50);
        java.lang.String str52 = aDTFraction15.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        boolean boolean54 = aDTFraction50.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction50.times((int) (byte) 100);
        java.lang.String str57 = aDTFraction50.toString();
        int int58 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction61.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int74 = aDTFraction73.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction61.times(aDTFraction73);
        int int76 = aDTFraction61.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float83 = aDTFraction82.value();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction79.plus(aDTFraction82);
        boolean boolean86 = aDTFraction82.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction82.times((int) (byte) 100);
        java.lang.String str89 = aDTFraction82.toString();
        int int90 = aDTFraction82.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction82.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction61.plus(aDTFraction92);
        int int94 = aDTFraction92.denominator();
        boolean boolean96 = aDTFraction92.equals((java.lang.Object) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction50.times(aDTFraction92);
        float float98 = aDTFraction97.value();
        boolean boolean99 = aDTFraction15.equals((java.lang.Object) aDTFraction97);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0/-1" + "'", str57, "0/-1");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "0/-1" + "'", str89, "0/-1");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(aDTFraction97);
        org.junit.Assert.assertTrue("'" + float98 + "' != '" + 0.0f + "'", float98 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        boolean boolean14 = aDTFraction8.equals((java.lang.Object) "");
        int int15 = aDTFraction8.denominator();
        java.lang.String str16 = aDTFraction8.toString();
        java.lang.String str17 = aDTFraction8.toString();
        int int18 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction2.plus(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction19);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        int int13 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        boolean boolean25 = aDTFraction19.equals((java.lang.Object) "");
        float float26 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction8.times(aDTFraction19);
        int int28 = aDTFraction19.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        int int19 = aDTFraction13.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction13.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        boolean boolean31 = aDTFraction27.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction27.times((int) (byte) 100);
        float float34 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction13.plus(aDTFraction27);
        boolean boolean36 = aDTFraction2.equals((java.lang.Object) aDTFraction27);
        float float37 = aDTFraction27.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        int int45 = aDTFraction15.numerator();
        int int46 = aDTFraction15.numerator();
        java.lang.Class<?> wildcardClass47 = aDTFraction15.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        boolean boolean19 = aDTFraction11.equals((java.lang.Object) aDTFraction17);
        java.lang.String str20 = aDTFraction17.toString();
        java.lang.String str21 = aDTFraction17.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        boolean boolean43 = aDTFraction35.equals((java.lang.Object) aDTFraction41);
        java.lang.String str44 = aDTFraction41.toString();
        java.lang.String str45 = aDTFraction41.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction17.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction2.times(aDTFraction17);
        java.lang.String str50 = aDTFraction17.toString();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/-1" + "'", str20, "0/-1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0/-1" + "'", str50, "0/-1");
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        int int20 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction14.times((int) '#');
        boolean boolean23 = aDTFraction5.equals((java.lang.Object) aDTFraction22);
        int int24 = aDTFraction22.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        float float3 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 10);
        int int3 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction22.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        boolean boolean51 = aDTFraction45.equals((java.lang.Object) "");
        int int52 = aDTFraction45.denominator();
        java.lang.String str53 = aDTFraction45.toString();
        java.lang.String str54 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction22.plus(aDTFraction45);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction22.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction55);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction56.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        float float74 = aDTFraction73.value();
        boolean boolean75 = aDTFraction70.equals((java.lang.Object) float74);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 1.0f + "'", float74 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        int int11 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        int int24 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        java.lang.String str33 = aDTFraction27.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction20.plus(aDTFraction27);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        int int44 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction38.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        boolean boolean56 = aDTFraction52.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction52.times((int) (byte) 100);
        float float59 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction38.plus(aDTFraction52);
        int int61 = aDTFraction38.numerator();
        java.lang.String str62 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction34.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction2.plus(aDTFraction63);
        java.lang.Class<?> wildcardClass65 = aDTFraction64.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/-1" + "'", str33, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0/-1" + "'", str62, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction7.times(100);
        java.lang.Class<?> wildcardClass28 = aDTFraction7.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (int) (byte) -1);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction11.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction29.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction2.times(52);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/-1" + "'", str3, "0/-1");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction47);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction50.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int63 = aDTFraction62.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction50.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction47.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        boolean boolean75 = aDTFraction71.equals((java.lang.Object) ' ');
        boolean boolean77 = aDTFraction71.equals((java.lang.Object) "");
        java.lang.String str78 = aDTFraction71.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction65.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction39.times(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction80.times(10000);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0/-1" + "'", str78, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction82);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        float float19 = aDTFraction14.value();
        int int20 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction14.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        java.lang.String str52 = aDTFraction50.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction50.plus(aDTFraction55);
        boolean boolean57 = aDTFraction14.equals((java.lang.Object) aDTFraction56);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        java.lang.String str8 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        boolean boolean18 = aDTFraction14.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (byte) 100);
        java.lang.String str21 = aDTFraction14.toString();
        int int22 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction14.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction2.plus(aDTFraction14);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction14.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0/-1" + "'", str8, "0/-1");
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        int int36 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction39.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction33.times(aDTFraction49);
        java.lang.String str51 = aDTFraction33.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction33.times(0);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        float float16 = aDTFraction5.value();
        float float17 = aDTFraction5.value();
        int int18 = aDTFraction5.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.reciprocal();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction10);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction46.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction52.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction53.times(52);
        float float56 = aDTFraction55.value();
        boolean boolean57 = aDTFraction46.equals((java.lang.Object) aDTFraction55);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 166.4f + "'", float56 == 166.4f);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction2.times((int) 'a');
        int int27 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        boolean boolean37 = aDTFraction33.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction33.times((int) (byte) 100);
        java.lang.String str40 = aDTFraction33.toString();
        int int41 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction33.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction33.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        boolean boolean55 = aDTFraction51.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction51.times((int) (byte) 100);
        java.lang.String str58 = aDTFraction51.toString();
        int int59 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction51.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction64.times(aDTFraction70);
        int int74 = aDTFraction70.numerator();
        int int75 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction78.plus(aDTFraction81);
        boolean boolean85 = aDTFraction81.equals((java.lang.Object) ' ');
        boolean boolean87 = aDTFraction81.equals((java.lang.Object) "");
        float float88 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction70.times(aDTFraction81);
        boolean boolean90 = aDTFraction61.equals((java.lang.Object) aDTFraction70);
        boolean boolean91 = aDTFraction45.equals((java.lang.Object) aDTFraction70);
        float float92 = aDTFraction70.value();
        boolean boolean93 = aDTFraction26.equals((java.lang.Object) float92);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0/-1" + "'", str40, "0/-1");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0/-1" + "'", str58, "0/-1");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + (-0.0f) + "'", float88 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + (-0.0f) + "'", float92 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction35.times((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction39);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        java.lang.String str13 = aDTFraction5.toString();
        java.lang.String str14 = aDTFraction5.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0/-1" + "'", str14, "0/-1");
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        java.lang.String str39 = aDTFraction32.toString();
        int int40 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction22.plus(aDTFraction32);
        int int42 = aDTFraction32.numerator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction2.reciprocal();
        int int19 = aDTFraction18.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        java.lang.String str10 = aDTFraction5.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0/-1" + "'", str10, "0/-1");
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) 'a');
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int53 = aDTFraction52.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction40.times(aDTFraction52);
        java.lang.String str55 = aDTFraction52.toString();
        boolean boolean56 = aDTFraction37.equals((java.lang.Object) str55);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100/100" + "'", str55, "100/100");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int18 = aDTFraction17.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction5.times(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction26.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction5.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str46 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction57.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int70 = aDTFraction69.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction57.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction54.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction78.plus(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction75.times(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction72.times(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction72.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction45.times(aDTFraction72);
        java.lang.String str89 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction5.times(aDTFraction45);
        boolean boolean91 = aDTFraction2.equals((java.lang.Object) aDTFraction5);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0/-1" + "'", str46, "0/-1");
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "0/-1" + "'", str89, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        int int17 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction11.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        boolean boolean29 = aDTFraction25.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.times((int) (byte) 100);
        float float32 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction11.plus(aDTFraction25);
        int int34 = aDTFraction11.numerator();
        java.lang.String str35 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction11.times((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction38.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        int int17 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction11.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        boolean boolean29 = aDTFraction25.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.times((int) (byte) 100);
        float float32 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction11.plus(aDTFraction25);
        int int34 = aDTFraction11.numerator();
        java.lang.String str35 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction11.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction41.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction42.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        int int57 = aDTFraction51.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction47.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction38.plus(aDTFraction47);
        java.lang.Class<?> wildcardClass60 = aDTFraction47.getClass();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        int int24 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        boolean boolean41 = aDTFraction33.equals((java.lang.Object) aDTFraction39);
        java.lang.String str42 = aDTFraction39.toString();
        java.lang.String str43 = aDTFraction39.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction39.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction54.plus(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction51.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        boolean boolean65 = aDTFraction57.equals((java.lang.Object) aDTFraction63);
        java.lang.String str66 = aDTFraction63.toString();
        java.lang.String str67 = aDTFraction63.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction63.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction39.plus(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction69.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction23.times(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) (byte) 100);
        int int16 = aDTFraction15.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        int int18 = aDTFraction16.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction16.times((int) (byte) 10);
        boolean boolean22 = aDTFraction16.equals((java.lang.Object) true);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        java.lang.String str23 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.times((int) (byte) -1);
        int int26 = aDTFraction15.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/-1" + "'", str23, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        java.lang.String str18 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction2.reciprocal();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1/1" + "'", str18, "-1/1");
        org.junit.Assert.assertNotNull(aDTFraction19);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction24.times((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(aDTFraction46);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction25.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction25.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction40.times((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction42);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        int int28 = aDTFraction11.numerator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction11.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int58 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction45.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction59);
        int int61 = aDTFraction59.denominator();
        boolean boolean62 = aDTFraction34.equals((java.lang.Object) aDTFraction59);
        int int63 = aDTFraction59.numerator();
        java.lang.Class<?> wildcardClass64 = aDTFraction59.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-100) + "'", int63 == (-100));
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        boolean boolean19 = aDTFraction11.equals((java.lang.Object) aDTFraction17);
        java.lang.String str20 = aDTFraction17.toString();
        java.lang.String str21 = aDTFraction17.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        boolean boolean43 = aDTFraction35.equals((java.lang.Object) aDTFraction41);
        java.lang.String str44 = aDTFraction41.toString();
        java.lang.String str45 = aDTFraction41.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction17.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction2.times(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction63.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction60.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int73 = aDTFraction72.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction60.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction57.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction78.plus(aDTFraction81);
        boolean boolean85 = aDTFraction81.equals((java.lang.Object) ' ');
        boolean boolean87 = aDTFraction81.equals((java.lang.Object) "");
        java.lang.String str88 = aDTFraction81.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction75.times(aDTFraction81);
        com.thealgorithms.maths.ADTFraction aDTFraction92 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction75.times(aDTFraction92);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction17.times(aDTFraction75);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/-1" + "'", str20, "0/-1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "0/-1" + "'", str88, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction19.equals((java.lang.Object) 10);
        boolean boolean27 = aDTFraction14.equals((java.lang.Object) aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        int int43 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        java.lang.Class<?> wildcardClass53 = aDTFraction50.getClass();
        boolean boolean54 = aDTFraction30.equals((java.lang.Object) aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        boolean boolean64 = aDTFraction60.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction60.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction50.times(aDTFraction66);
        boolean boolean68 = aDTFraction19.equals((java.lang.Object) aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction66.times((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(aDTFraction70);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int40 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction27.times(aDTFraction39);
        int int42 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        boolean boolean52 = aDTFraction48.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction48.times((int) (byte) 100);
        java.lang.String str55 = aDTFraction48.toString();
        int int56 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction48.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction27.plus(aDTFraction58);
        boolean boolean60 = aDTFraction2.equals((java.lang.Object) aDTFraction58);
        int int61 = aDTFraction58.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        boolean boolean15 = aDTFraction11.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction11.times((int) (byte) 100);
        java.lang.String str18 = aDTFraction11.toString();
        int int19 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction11.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        int int34 = aDTFraction30.numerator();
        int int35 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        boolean boolean47 = aDTFraction41.equals((java.lang.Object) "");
        float float48 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction30.times(aDTFraction41);
        boolean boolean50 = aDTFraction21.equals((java.lang.Object) aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        int int59 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        int int72 = aDTFraction66.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction62.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction21.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction2.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float82 = aDTFraction81.value();
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction78.plus(aDTFraction81);
        boolean boolean85 = aDTFraction81.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction81.times((int) (byte) 100);
        java.lang.String str88 = aDTFraction81.toString();
        int int89 = aDTFraction81.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction81.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction81.times((int) (byte) 10);
        int int94 = aDTFraction93.denominator();
        boolean boolean95 = aDTFraction2.equals((java.lang.Object) int94);
        int int96 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + (-0.0f) + "'", float82 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "0/-1" + "'", str88, "0/-1");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.times(aDTFraction42);
        int int45 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.times(0);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction47);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction42.times(aDTFraction48);
        int int52 = aDTFraction42.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction55.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        boolean boolean69 = aDTFraction61.equals((java.lang.Object) aDTFraction67);
        java.lang.String str70 = aDTFraction67.toString();
        java.lang.String str71 = aDTFraction67.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.times(aDTFraction74);
        boolean boolean77 = aDTFraction42.equals((java.lang.Object) aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction42.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction31.times(aDTFraction78);
        int int80 = aDTFraction78.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0/-1" + "'", str70, "0/-1");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        int int36 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction39.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction33.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int54 = aDTFraction53.denominator();
        boolean boolean56 = aDTFraction53.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction49.times(aDTFraction53);
        int int58 = aDTFraction57.numerator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction57.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction23.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction2.times(aDTFraction38);
        java.lang.Class<?> wildcardClass40 = aDTFraction39.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        int int25 = aDTFraction16.numerator();
        java.lang.String str26 = aDTFraction16.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction16.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        int int41 = aDTFraction37.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction28.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        java.lang.Class<?> wildcardClass51 = aDTFraction48.getClass();
        boolean boolean52 = aDTFraction28.equals((java.lang.Object) aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float59 = aDTFraction58.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction55.plus(aDTFraction58);
        boolean boolean62 = aDTFraction58.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction58.times((int) (byte) 100);
        java.lang.String str65 = aDTFraction58.toString();
        int int66 = aDTFraction58.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction48.plus(aDTFraction58);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction67.times(52);
        boolean boolean70 = aDTFraction25.equals((java.lang.Object) aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction15.plus(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0/-1" + "'", str65, "0/-1");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(aDTFraction71);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        int int4 = aDTFraction2.denominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        boolean boolean19 = aDTFraction11.equals((java.lang.Object) aDTFraction17);
        java.lang.String str20 = aDTFraction17.toString();
        java.lang.String str21 = aDTFraction17.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        boolean boolean43 = aDTFraction35.equals((java.lang.Object) aDTFraction41);
        java.lang.String str44 = aDTFraction41.toString();
        java.lang.String str45 = aDTFraction41.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction17.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction2.times(aDTFraction17);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/-1" + "'", str20, "0/-1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        boolean boolean29 = aDTFraction21.equals((java.lang.Object) aDTFraction27);
        java.lang.String str30 = aDTFraction27.toString();
        java.lang.String str31 = aDTFraction27.toString();
        float float32 = aDTFraction27.value();
        boolean boolean33 = aDTFraction5.equals((java.lang.Object) float32);
        int int34 = aDTFraction5.denominator();
        int int35 = aDTFraction5.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0/-1" + "'", str31, "0/-1");
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.Class<?> wildcardClass17 = aDTFraction8.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        int int27 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction8.times(aDTFraction24);
        java.lang.String str29 = aDTFraction24.toString();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "100/100" + "'", str29, "100/100");
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction25.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int47 = aDTFraction46.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction46);
        float float49 = aDTFraction48.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 0.0f + "'", float49 == 0.0f);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction8.times(aDTFraction14);
        int int18 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction5.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        java.lang.Class<?> wildcardClass28 = aDTFraction25.getClass();
        boolean boolean29 = aDTFraction5.equals((java.lang.Object) aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction35.times((int) (byte) 100);
        java.lang.String str42 = aDTFraction35.toString();
        int int43 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction25.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction44.times(52);
        boolean boolean47 = aDTFraction2.equals((java.lang.Object) aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float68 = aDTFraction67.value();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction64.plus(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction61.times(aDTFraction67);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int74 = aDTFraction73.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction61.times(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction58.times(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float83 = aDTFraction82.value();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction79.plus(aDTFraction82);
        boolean boolean86 = aDTFraction82.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction82.times((int) (byte) 100);
        java.lang.String str89 = aDTFraction82.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction58.times(aDTFraction82);
        java.lang.String str91 = aDTFraction90.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction50.times(aDTFraction90);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction2.plus(aDTFraction92);
        float float94 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + (-0.0f) + "'", float68 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "0/-1" + "'", str89, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0/-1" + "'", str91, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + float94 + "' != '" + 100.0f + "'", float94 == 100.0f);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        java.lang.String str34 = aDTFraction33.toString();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0/-1" + "'", str34, "0/-1");
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction22.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        boolean boolean51 = aDTFraction45.equals((java.lang.Object) "");
        int int52 = aDTFraction45.denominator();
        java.lang.String str53 = aDTFraction45.toString();
        java.lang.String str54 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction22.plus(aDTFraction45);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction55.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction55);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        boolean boolean37 = aDTFraction29.equals((java.lang.Object) aDTFraction35);
        java.lang.String str38 = aDTFraction35.toString();
        java.lang.String str39 = aDTFraction35.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction47.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        boolean boolean61 = aDTFraction53.equals((java.lang.Object) aDTFraction59);
        java.lang.String str62 = aDTFraction59.toString();
        java.lang.String str63 = aDTFraction59.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction35.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction20.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction17.plus(aDTFraction35);
        float float69 = aDTFraction35.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction35.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0/-1" + "'", str62, "0/-1");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0/-1" + "'", str63, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + (-0.0f) + "'", float69 == (-0.0f));
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction22.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction42);
        float float44 = aDTFraction42.value();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 1.0f + "'", float44 == 1.0f);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction30.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        boolean boolean60 = aDTFraction54.equals((java.lang.Object) "");
        java.lang.String str61 = aDTFraction54.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction48.times(aDTFraction54);
        float float63 = aDTFraction62.value();
        java.lang.String str64 = aDTFraction62.toString();
        int int65 = aDTFraction62.denominator();
        boolean boolean66 = aDTFraction20.equals((java.lang.Object) int65);
        int int67 = aDTFraction20.denominator();
        int int68 = aDTFraction20.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-100" + "'", str64, "0/-100");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-100) + "'", int65 == (-100));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        int int9 = aDTFraction2.numerator();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        float float23 = aDTFraction20.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        int int25 = aDTFraction2.denominator();
        float float26 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        float float25 = aDTFraction16.value();
        int int26 = aDTFraction16.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        int int40 = aDTFraction7.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        boolean boolean29 = aDTFraction21.equals((java.lang.Object) aDTFraction27);
        java.lang.String str30 = aDTFraction27.toString();
        java.lang.String str31 = aDTFraction27.toString();
        float float32 = aDTFraction27.value();
        boolean boolean33 = aDTFraction5.equals((java.lang.Object) float32);
        int int34 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        int int43 = aDTFraction37.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction37.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        int int56 = aDTFraction50.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction46.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str61 = aDTFraction60.toString();
        boolean boolean62 = aDTFraction46.equals((java.lang.Object) aDTFraction60);
        int int63 = aDTFraction60.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction5.plus(aDTFraction60);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0/-1" + "'", str31, "0/-1");
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1/10" + "'", str61, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(aDTFraction64);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        float float13 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        boolean boolean29 = aDTFraction21.equals((java.lang.Object) aDTFraction27);
        java.lang.String str30 = aDTFraction27.toString();
        java.lang.String str31 = aDTFraction27.toString();
        float float32 = aDTFraction27.value();
        boolean boolean33 = aDTFraction5.equals((java.lang.Object) float32);
        int int34 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction5.times((-100));
        float float37 = aDTFraction36.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0/-1" + "'", str31, "0/-1");
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        int int10 = aDTFraction5.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        float float25 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        int int38 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean43 = aDTFraction41.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        int int56 = aDTFraction46.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction59.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        boolean boolean73 = aDTFraction65.equals((java.lang.Object) aDTFraction71);
        java.lang.String str74 = aDTFraction71.toString();
        java.lang.String str75 = aDTFraction71.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction71.times(aDTFraction78);
        boolean boolean81 = aDTFraction46.equals((java.lang.Object) aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction41.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction28.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction16.times(aDTFraction82);
        int int85 = aDTFraction82.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0/-1" + "'", str74, "0/-1");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0/-1" + "'", str75, "0/-1");
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-100), (int) (byte) 100);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        int int14 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        boolean boolean24 = aDTFraction20.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction20.times((int) (byte) 100);
        java.lang.String str27 = aDTFraction20.toString();
        int int28 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction20.times((int) ' ');
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction5.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction41);
        int int45 = aDTFraction41.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        java.lang.String str54 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction41.plus(aDTFraction48);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction55.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction32.plus(aDTFraction55);
        java.lang.String str60 = aDTFraction59.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/1" + "'", str60, "0/1");
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        boolean boolean40 = aDTFraction32.equals((java.lang.Object) aDTFraction38);
        java.lang.String str41 = aDTFraction38.toString();
        java.lang.String str42 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction14.plus(aDTFraction44);
        java.lang.String str46 = aDTFraction44.toString();
        java.lang.String str47 = aDTFraction44.toString();
        java.lang.String str48 = aDTFraction44.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0/-1" + "'", str46, "0/-1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction16.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction16.times(aDTFraction28);
        int int31 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction37.times((int) (byte) 100);
        java.lang.String str44 = aDTFraction37.toString();
        int int45 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction37.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction16.plus(aDTFraction47);
        int int49 = aDTFraction47.denominator();
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction5.times(aDTFraction47);
        float float53 = aDTFraction52.value();
        int int54 = aDTFraction52.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', 52);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        int int45 = aDTFraction15.numerator();
        int int46 = aDTFraction15.numerator();
        int int47 = aDTFraction15.numerator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction15.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction2.times((int) 'a');
        int int27 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction26.times(aDTFraction28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, (int) ' ');
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10000, (int) (byte) -1);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction56.times(0);
        int int71 = aDTFraction70.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction50.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int63 = aDTFraction62.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction50.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction47.times(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        boolean boolean75 = aDTFraction71.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction71.times((int) (byte) 100);
        java.lang.String str78 = aDTFraction71.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction47.times(aDTFraction71);
        int int80 = aDTFraction79.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction31.times(aDTFraction79);
        java.lang.Class<?> wildcardClass82 = aDTFraction81.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0/-1" + "'", str78, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        boolean boolean10 = aDTFraction2.equals((java.lang.Object) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.times((int) (short) -1);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(aDTFraction12);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        int int13 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        boolean boolean25 = aDTFraction19.equals((java.lang.Object) "");
        float float26 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction8.times(aDTFraction19);
        int int28 = aDTFraction27.numerator();
        int int29 = aDTFraction27.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction5.times(0);
        int int8 = aDTFraction7.numerator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10000, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        java.lang.Class<?> wildcardClass40 = aDTFraction25.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction30.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        boolean boolean60 = aDTFraction54.equals((java.lang.Object) "");
        java.lang.String str61 = aDTFraction54.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction48.times(aDTFraction54);
        float float63 = aDTFraction62.value();
        java.lang.String str64 = aDTFraction62.toString();
        int int65 = aDTFraction62.denominator();
        boolean boolean66 = aDTFraction20.equals((java.lang.Object) int65);
        int int67 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction20.times((int) (short) 100);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-100" + "'", str64, "0/-100");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-100) + "'", int65 == (-100));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(aDTFraction69);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        int int11 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        int int24 = aDTFraction20.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        java.lang.String str33 = aDTFraction27.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction20.plus(aDTFraction27);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        int int44 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction38.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        boolean boolean56 = aDTFraction52.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction52.times((int) (byte) 100);
        float float59 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction38.plus(aDTFraction52);
        int int61 = aDTFraction38.numerator();
        java.lang.String str62 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction34.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction2.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction64.plus(aDTFraction65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/-1" + "'", str33, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + (-0.0f) + "'", float59 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0/-1" + "'", str62, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction19.times((int) (byte) 100);
        java.lang.String str26 = aDTFraction19.toString();
        int int27 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction19.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction19.times((int) (byte) 10);
        boolean boolean32 = aDTFraction5.equals((java.lang.Object) aDTFraction31);
        int int33 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int37 = aDTFraction36.denominator();
        boolean boolean39 = aDTFraction36.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction36.times(aDTFraction42);
        int int44 = aDTFraction36.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, (int) (byte) 1);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        boolean boolean25 = aDTFraction19.equals((java.lang.Object) "");
        float float26 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction5.times(aDTFraction28);
        java.lang.String str30 = aDTFraction5.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times((int) '#');
        java.lang.Class<?> wildcardClass6 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) '4');
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        boolean boolean29 = aDTFraction21.equals((java.lang.Object) aDTFraction27);
        java.lang.String str30 = aDTFraction27.toString();
        java.lang.String str31 = aDTFraction27.toString();
        float float32 = aDTFraction27.value();
        boolean boolean33 = aDTFraction5.equals((java.lang.Object) float32);
        int int34 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction5.times((-100));
        java.lang.String str37 = aDTFraction5.toString();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0/-1" + "'", str31, "0/-1");
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0/-1" + "'", str37, "0/-1");
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.times(aDTFraction42);
        int int45 = aDTFraction42.denominator();
        int int46 = aDTFraction42.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        int int25 = aDTFraction2.numerator();
        java.lang.String str26 = aDTFraction2.toString();
        java.lang.Class<?> wildcardClass27 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (byte) 1);
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, 10000);
        java.lang.String str3 = aDTFraction2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1/10000" + "'", str3, "1/10000");
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        boolean boolean37 = aDTFraction31.equals((java.lang.Object) "");
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction31);
        float float40 = aDTFraction25.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + 0.0f + "'", float40 == 0.0f);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction24.times(52);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction26);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (-1));
        int int3 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        float float26 = aDTFraction7.value();
        int int27 = aDTFraction7.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        java.lang.String str13 = aDTFraction5.toString();
        java.lang.Class<?> wildcardClass14 = aDTFraction5.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        int int9 = aDTFraction2.denominator();
        java.lang.Class<?> wildcardClass10 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        int int18 = aDTFraction17.numerator();
        boolean boolean20 = aDTFraction17.equals((java.lang.Object) 10.0f);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str3 = aDTFraction2.toString();
        java.lang.Class<?> wildcardClass4 = aDTFraction2.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/10" + "'", str3, "-1/10");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction22.equals((java.lang.Object) ' ');
        boolean boolean28 = aDTFraction22.equals((java.lang.Object) "");
        int int29 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        boolean boolean46 = aDTFraction38.equals((java.lang.Object) aDTFraction44);
        java.lang.String str47 = aDTFraction44.toString();
        java.lang.String str48 = aDTFraction44.toString();
        float float49 = aDTFraction44.value();
        boolean boolean50 = aDTFraction22.equals((java.lang.Object) float49);
        int int51 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction22.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction11.times(aDTFraction53);
        int int55 = aDTFraction54.denominator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times((int) (byte) 0);
        java.lang.Class<?> wildcardClass19 = aDTFraction18.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        int int3 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        int int11 = aDTFraction2.numerator();
        java.lang.String str12 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str16 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int40 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction27.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction24.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction42.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction42.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction15.times(aDTFraction42);
        boolean boolean59 = aDTFraction2.equals((java.lang.Object) aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str63 = aDTFraction62.toString();
        float float64 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction42.plus(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-1/1" + "'", str63, "-1/1");
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-1.0f) + "'", float64 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction11.plus(aDTFraction12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        int int44 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction38.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction49.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        boolean boolean67 = aDTFraction63.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction63.times((int) (byte) 100);
        float float70 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction49.plus(aDTFraction63);
        boolean boolean72 = aDTFraction38.equals((java.lang.Object) aDTFraction63);
        boolean boolean73 = aDTFraction33.equals((java.lang.Object) aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction38.times(0);
        java.lang.String str76 = aDTFraction38.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0/-1" + "'", str76, "0/-1");
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        boolean boolean19 = aDTFraction11.equals((java.lang.Object) aDTFraction17);
        java.lang.String str20 = aDTFraction17.toString();
        java.lang.String str21 = aDTFraction17.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        boolean boolean43 = aDTFraction35.equals((java.lang.Object) aDTFraction41);
        java.lang.String str44 = aDTFraction41.toString();
        java.lang.String str45 = aDTFraction41.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction17.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction2.times(aDTFraction17);
        java.lang.Class<?> wildcardClass50 = aDTFraction17.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/-1" + "'", str20, "0/-1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction40.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction41.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction5.times(aDTFraction43);
        int int45 = aDTFraction44.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-10) + "'", int45 == (-10));
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        java.lang.String str27 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        int int24 = aDTFraction14.denominator();
        float float25 = aDTFraction14.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction14.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        boolean boolean19 = aDTFraction11.equals((java.lang.Object) aDTFraction17);
        java.lang.String str20 = aDTFraction17.toString();
        java.lang.String str21 = aDTFraction17.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        boolean boolean43 = aDTFraction35.equals((java.lang.Object) aDTFraction41);
        java.lang.String str44 = aDTFraction41.toString();
        java.lang.String str45 = aDTFraction41.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction17.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction2.times(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int53 = aDTFraction52.denominator();
        boolean boolean54 = aDTFraction17.equals((java.lang.Object) int53);
        java.lang.Class<?> wildcardClass55 = aDTFraction17.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/-1" + "'", str20, "0/-1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction25.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction41.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int54 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction41.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction41.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.times(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction62.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction41.times(aDTFraction77);
        boolean boolean79 = aDTFraction25.equals((java.lang.Object) aDTFraction41);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction25.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        int int36 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction39.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction33.times(aDTFraction49);
        int int51 = aDTFraction49.denominator();
        java.lang.String str52 = aDTFraction49.toString();
        int int53 = aDTFraction49.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/1" + "'", str52, "0/1");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (byte) 1);
        java.lang.Class<?> wildcardClass3 = aDTFraction2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction6.times((-10));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/1" + "'", str3, "-1/1");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, (-10));
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        int int21 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        boolean boolean38 = aDTFraction30.equals((java.lang.Object) aDTFraction36);
        java.lang.String str39 = aDTFraction36.toString();
        java.lang.String str40 = aDTFraction36.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction36.times(aDTFraction43);
        java.lang.String str46 = aDTFraction36.toString();
        boolean boolean47 = aDTFraction5.equals((java.lang.Object) str46);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0/-1" + "'", str40, "0/-1");
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0/-1" + "'", str46, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction7.times(aDTFraction13);
        int int17 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        boolean boolean34 = aDTFraction26.equals((java.lang.Object) aDTFraction32);
        java.lang.String str35 = aDTFraction32.toString();
        java.lang.String str36 = aDTFraction32.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction39);
        boolean boolean42 = aDTFraction7.equals((java.lang.Object) aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction2.times(aDTFraction7);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction43.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0/-1" + "'", str36, "0/-1");
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        int int27 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        java.lang.Class<?> wildcardClass37 = aDTFraction34.getClass();
        boolean boolean38 = aDTFraction14.equals((java.lang.Object) aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction2.times(aDTFraction53);
        java.lang.String str55 = aDTFraction2.toString();
        float float56 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1/1" + "'", str55, "-1/1");
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-1.0f) + "'", float56 == (-1.0f));
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        float float10 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction24.plus(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction21.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int34 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction21.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction18.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction18.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction8.times(aDTFraction18);
        int int40 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction5.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        boolean boolean53 = aDTFraction47.equals((java.lang.Object) "");
        float float54 = aDTFraction47.value();
        boolean boolean55 = aDTFraction5.equals((java.lang.Object) aDTFraction47);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int58 = aDTFraction57.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction45.times(aDTFraction57);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction59);
        int int61 = aDTFraction59.denominator();
        boolean boolean62 = aDTFraction34.equals((java.lang.Object) aDTFraction59);
        int int63 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(10, (int) (byte) 10);
        boolean boolean67 = aDTFraction59.equals((java.lang.Object) aDTFraction66);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-100) + "'", int63 == (-100));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (-10));
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        int int10 = aDTFraction8.denominator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times((int) (byte) 10);
        int int18 = aDTFraction5.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction56.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction56.times((int) (short) -1);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction72);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        boolean boolean26 = aDTFraction19.equals((java.lang.Object) 10);
        boolean boolean27 = aDTFraction14.equals((java.lang.Object) aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        int int43 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        java.lang.Class<?> wildcardClass53 = aDTFraction50.getClass();
        boolean boolean54 = aDTFraction30.equals((java.lang.Object) aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        boolean boolean64 = aDTFraction60.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction60.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction50.times(aDTFraction66);
        boolean boolean68 = aDTFraction19.equals((java.lang.Object) aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction66.times(10);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(aDTFraction70);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction11.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction29.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.times(aDTFraction29);
        java.lang.Class<?> wildcardClass46 = aDTFraction45.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/-1" + "'", str3, "0/-1");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        int int10 = aDTFraction9.denominator();
        java.lang.String str11 = aDTFraction9.toString();
        boolean boolean13 = aDTFraction9.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int17 = aDTFraction16.denominator();
        float float18 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction16.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction9.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        boolean boolean37 = aDTFraction29.equals((java.lang.Object) aDTFraction35);
        java.lang.String str38 = aDTFraction35.toString();
        java.lang.String str39 = aDTFraction35.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction35.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction44.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int57 = aDTFraction56.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction44.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction44.reciprocal();
        int int60 = aDTFraction59.numerator();
        float float61 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction41.times(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction65.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        boolean boolean79 = aDTFraction71.equals((java.lang.Object) aDTFraction77);
        java.lang.String str80 = aDTFraction77.toString();
        java.lang.String str81 = aDTFraction77.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float85 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction77.times(aDTFraction84);
        int int87 = aDTFraction77.denominator();
        float float88 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction59.times(aDTFraction77);
        boolean boolean90 = aDTFraction20.equals((java.lang.Object) aDTFraction59);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 1.0f + "'", float18 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-1.0f) + "'", float61 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "0/-1" + "'", str80, "0/-1");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0/-1" + "'", str81, "0/-1");
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-0.0f) + "'", float85 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + (-0.0f) + "'", float88 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.Class<?> wildcardClass12 = aDTFraction5.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        int int14 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction8.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        int int27 = aDTFraction21.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction17.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        boolean boolean45 = aDTFraction37.equals((java.lang.Object) aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        boolean boolean55 = aDTFraction48.equals((java.lang.Object) 10);
        boolean boolean56 = aDTFraction43.equals((java.lang.Object) aDTFraction48);
        boolean boolean57 = aDTFraction21.equals((java.lang.Object) boolean56);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction2.times(aDTFraction21);
        java.lang.String str59 = aDTFraction21.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0/-1" + "'", str59, "0/-1");
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (int) (byte) 100);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        boolean boolean30 = aDTFraction17.equals((java.lang.Object) aDTFraction29);
        float float31 = aDTFraction29.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        boolean boolean20 = aDTFraction16.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction16.times((int) (byte) 100);
        float float23 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction30.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction27.times(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int40 = aDTFraction39.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction27.times(aDTFraction39);
        int int42 = aDTFraction27.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        boolean boolean52 = aDTFraction48.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction48.times((int) (byte) 100);
        java.lang.String str55 = aDTFraction48.toString();
        int int56 = aDTFraction48.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction48.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction27.plus(aDTFraction58);
        boolean boolean60 = aDTFraction2.equals((java.lang.Object) aDTFraction58);
        float float61 = aDTFraction58.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + (-0.0f) + "'", float34 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0/-1" + "'", str55, "0/-1");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        boolean boolean19 = aDTFraction11.equals((java.lang.Object) aDTFraction17);
        java.lang.String str20 = aDTFraction17.toString();
        java.lang.String str21 = aDTFraction17.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        boolean boolean43 = aDTFraction35.equals((java.lang.Object) aDTFraction41);
        java.lang.String str44 = aDTFraction41.toString();
        java.lang.String str45 = aDTFraction41.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction17.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction2.times(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction2.times((int) 'a');
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0/-1" + "'", str20, "0/-1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction51);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times(1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction18.times((int) '#');
        java.lang.Class<?> wildcardClass21 = aDTFraction20.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 1);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        int int36 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction39.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction33.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int54 = aDTFraction53.denominator();
        boolean boolean56 = aDTFraction53.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction49.times(aDTFraction53);
        int int58 = aDTFraction49.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction17.times(aDTFraction23);
        int int27 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        java.lang.Class<?> wildcardClass37 = aDTFraction34.getClass();
        boolean boolean38 = aDTFraction14.equals((java.lang.Object) aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction2.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction65.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int78 = aDTFraction77.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction65.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction62.times(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction54.plus(aDTFraction62);
        int int82 = aDTFraction54.denominator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction54.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(1, (-1));
        int int3 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction4 = aDTFraction2.reciprocal();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction4);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction6.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction15.times((int) (byte) 0);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.times(aDTFraction22);
        float float25 = aDTFraction24.value();
        java.lang.String str26 = aDTFraction24.toString();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0/-1" + "'", str26, "0/-1");
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int26 = aDTFraction25.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction13.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction10.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        boolean boolean38 = aDTFraction34.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction34.times((int) (byte) 100);
        java.lang.String str41 = aDTFraction34.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction10.times(aDTFraction34);
        java.lang.String str43 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction2.times(aDTFraction42);
        java.lang.String str45 = aDTFraction2.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100/100" + "'", str45, "100/100");
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction25.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction41.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int54 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction41.times(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction41.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction67.times(aDTFraction73);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction62.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction41.times(aDTFraction77);
        boolean boolean79 = aDTFraction25.equals((java.lang.Object) aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction82.plus(aDTFraction85);
        int int88 = aDTFraction82.numerator();
        int int89 = aDTFraction82.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction25.plus(aDTFraction82);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction90);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction22.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        int int17 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction11.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        boolean boolean29 = aDTFraction25.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.times((int) (byte) 100);
        float float32 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction11.plus(aDTFraction25);
        int int34 = aDTFraction11.numerator();
        java.lang.String str35 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction11.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction41.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction42.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        int int57 = aDTFraction51.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction47.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction38.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str63 = aDTFraction62.toString();
        boolean boolean64 = aDTFraction38.equals((java.lang.Object) str63);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0/-1" + "'", str63, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        float float15 = aDTFraction8.value();
        boolean boolean16 = aDTFraction2.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        boolean boolean68 = aDTFraction60.equals((java.lang.Object) aDTFraction66);
        java.lang.String str69 = aDTFraction66.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction51.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction51.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction8.times(aDTFraction51);
        java.lang.String str73 = aDTFraction8.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "0/-1" + "'", str73, "0/-1");
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 100, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction8.times(aDTFraction14);
        int int18 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction5.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        java.lang.Class<?> wildcardClass28 = aDTFraction25.getClass();
        boolean boolean29 = aDTFraction5.equals((java.lang.Object) aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction35.times((int) (byte) 100);
        java.lang.String str42 = aDTFraction35.toString();
        int int43 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction25.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction44.times(52);
        boolean boolean47 = aDTFraction2.equals((java.lang.Object) aDTFraction46);
        int int48 = aDTFraction46.denominator();
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction2.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        java.lang.String str15 = aDTFraction13.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction13.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction2.plus(aDTFraction13);
        float float21 = aDTFraction20.value();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 1.0f + "'", float21 == 1.0f);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float28 = aDTFraction27.value();
        boolean boolean29 = aDTFraction21.equals((java.lang.Object) aDTFraction27);
        java.lang.String str30 = aDTFraction27.toString();
        java.lang.String str31 = aDTFraction27.toString();
        float float32 = aDTFraction27.value();
        boolean boolean33 = aDTFraction5.equals((java.lang.Object) float32);
        int int34 = aDTFraction5.denominator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction5.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + (-0.0f) + "'", float28 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0/-1" + "'", str31, "0/-1");
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        boolean boolean40 = aDTFraction32.equals((java.lang.Object) aDTFraction38);
        java.lang.String str41 = aDTFraction38.toString();
        java.lang.String str42 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction14.plus(aDTFraction44);
        float float46 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction49.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction14.plus(aDTFraction49);
        java.lang.Class<?> wildcardClass53 = aDTFraction52.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        java.lang.String str13 = aDTFraction8.toString();
        float float14 = aDTFraction8.value();
        java.lang.String str15 = aDTFraction8.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction18.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        int int35 = aDTFraction29.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction29.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        boolean boolean47 = aDTFraction43.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction43.times((int) (byte) 100);
        float float50 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction29.plus(aDTFraction43);
        boolean boolean52 = aDTFraction18.equals((java.lang.Object) aDTFraction43);
        float float53 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction8.times(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0/-1" + "'", str15, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times(aDTFraction28);
        java.lang.String str30 = aDTFraction28.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        int int48 = aDTFraction33.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction54.times((int) (byte) 100);
        java.lang.String str61 = aDTFraction54.toString();
        int int62 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction54.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction33.plus(aDTFraction64);
        int int66 = aDTFraction64.denominator();
        int int67 = aDTFraction64.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        int int76 = aDTFraction70.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction70.plus(aDTFraction79);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction64.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int85 = aDTFraction84.denominator();
        boolean boolean87 = aDTFraction84.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction80.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction28.times(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction88.times((-100));
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/10" + "'", str30, "0/10");
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction91);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean17 = aDTFraction15.equals((java.lang.Object) 100.0d);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int33 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction20.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction20.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction46.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction41.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction20.times(aDTFraction56);
        boolean boolean58 = aDTFraction15.equals((java.lang.Object) aDTFraction57);
        boolean boolean59 = aDTFraction2.equals((java.lang.Object) aDTFraction57);
        float float60 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-1.0f) + "'", float60 == (-1.0f));
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        boolean boolean35 = aDTFraction31.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction31.times((int) (byte) 100);
        java.lang.String str38 = aDTFraction31.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.times(aDTFraction42);
        int int45 = aDTFraction42.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        int int21 = aDTFraction5.denominator();
        int int22 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str26 = aDTFraction25.toString();
        float float27 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction42);
        int int45 = aDTFraction30.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        boolean boolean55 = aDTFraction51.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction51.times((int) (byte) 100);
        java.lang.String str58 = aDTFraction51.toString();
        int int59 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction51.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction30.plus(aDTFraction61);
        int int63 = aDTFraction61.denominator();
        int int64 = aDTFraction61.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        int int73 = aDTFraction67.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction67.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction61.times(aDTFraction77);
        boolean boolean79 = aDTFraction25.equals((java.lang.Object) aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction82.plus(aDTFraction85);
        java.lang.Class<?> wildcardClass88 = aDTFraction82.getClass();
        boolean boolean89 = aDTFraction61.equals((java.lang.Object) aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction5.times(aDTFraction61);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction90.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/1" + "'", str26, "-1/1");
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-1.0f) + "'", float27 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0/-1" + "'", str58, "0/-1");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(aDTFraction90);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        int int16 = aDTFraction12.numerator();
        java.lang.String str17 = aDTFraction12.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction3.plus(aDTFraction12);
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction18);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        java.lang.Object obj13 = null;
        boolean boolean14 = aDTFraction12.equals(obj13);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-10), 100);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        boolean boolean18 = aDTFraction14.equals((java.lang.Object) 'a');
        int int19 = aDTFraction14.numerator();
        float float20 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction31.times(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int44 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction31.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction28.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction46.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction46.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction14.plus(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        int int36 = aDTFraction33.denominator();
        java.lang.Class<?> wildcardClass37 = aDTFraction33.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        int int38 = aDTFraction34.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction25.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction8.times(aDTFraction25);
        java.lang.String str41 = aDTFraction8.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction8.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction22.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        boolean boolean51 = aDTFraction45.equals((java.lang.Object) "");
        int int52 = aDTFraction45.denominator();
        java.lang.String str53 = aDTFraction45.toString();
        java.lang.String str54 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction22.plus(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        boolean boolean65 = aDTFraction61.equals((java.lang.Object) ' ');
        boolean boolean67 = aDTFraction61.equals((java.lang.Object) "");
        java.lang.String str68 = aDTFraction61.toString();
        int int69 = aDTFraction61.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float76 = aDTFraction75.value();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction72.plus(aDTFraction75);
        boolean boolean79 = aDTFraction75.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction75.times((int) (byte) 100);
        java.lang.String str82 = aDTFraction75.toString();
        int int83 = aDTFraction75.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction75.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction75.times((int) (byte) 10);
        boolean boolean88 = aDTFraction61.equals((java.lang.Object) aDTFraction87);
        int int89 = aDTFraction87.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction87.times((int) (byte) 1);
        int int92 = aDTFraction87.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction22.plus(aDTFraction87);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0/-1" + "'", str68, "0/-1");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + (-0.0f) + "'", float76 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0/-1" + "'", str82, "0/-1");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(aDTFraction93);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction5.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        java.lang.String str28 = aDTFraction11.toString();
        int int29 = aDTFraction11.numerator();
        int int30 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        boolean boolean43 = aDTFraction39.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction39.times((int) (byte) 100);
        float float46 = aDTFraction39.value();
        boolean boolean47 = aDTFraction33.equals((java.lang.Object) aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        boolean boolean57 = aDTFraction53.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction53.times((int) (byte) 100);
        java.lang.String str60 = aDTFraction53.toString();
        int int61 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction39.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction11.plus(aDTFraction63);
        int int66 = aDTFraction11.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/-1" + "'", str60, "0/-1");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(32, (int) (byte) -1);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        int int21 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction5.times((int) (short) -1);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction23);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        int int39 = aDTFraction35.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction26.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        java.lang.Class<?> wildcardClass49 = aDTFraction46.getClass();
        boolean boolean50 = aDTFraction26.equals((java.lang.Object) aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        boolean boolean60 = aDTFraction56.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction56.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction46.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction22.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float78 = aDTFraction77.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction74.plus(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction71.times(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int84 = aDTFraction83.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction71.times(aDTFraction83);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction71.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction86.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction68.plus(aDTFraction87);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + (-0.0f) + "'", float78 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 100 + "'", int84 == 100);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction88);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction5.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction7.times(aDTFraction13);
        int int17 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        boolean boolean34 = aDTFraction26.equals((java.lang.Object) aDTFraction32);
        java.lang.String str35 = aDTFraction32.toString();
        java.lang.String str36 = aDTFraction32.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction39);
        boolean boolean42 = aDTFraction7.equals((java.lang.Object) aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction2.times(aDTFraction7);
        int int44 = aDTFraction2.numerator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0/-1" + "'", str36, "0/-1");
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction23.plus(aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction2.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str43 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction46.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int67 = aDTFraction66.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction54.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction51.times(aDTFraction68);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction72.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction69.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction69.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction42.times(aDTFraction69);
        java.lang.String str86 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction2.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction2.times((int) (short) -1);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0/-1" + "'", str43, "0/-1");
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0/-1" + "'", str86, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction89);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        int int27 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction8.times(aDTFraction24);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        boolean boolean46 = aDTFraction38.equals((java.lang.Object) aDTFraction44);
        java.lang.String str47 = aDTFraction44.toString();
        java.lang.String str48 = aDTFraction44.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction44.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction56.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float69 = aDTFraction68.value();
        boolean boolean70 = aDTFraction62.equals((java.lang.Object) aDTFraction68);
        java.lang.String str71 = aDTFraction68.toString();
        java.lang.String str72 = aDTFraction68.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction68.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction44.plus(aDTFraction74);
        float float76 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction79.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction44.plus(aDTFraction79);
        boolean boolean83 = aDTFraction28.equals((java.lang.Object) aDTFraction79);
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + (-0.0f) + "'", float69 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-1" + "'", str71, "0/-1");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0/-1" + "'", str72, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + (-0.0f) + "'", float76 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int36 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction23.reciprocal();
        int int39 = aDTFraction38.numerator();
        float float40 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction20.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction44.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        boolean boolean58 = aDTFraction50.equals((java.lang.Object) aDTFraction56);
        java.lang.String str59 = aDTFraction56.toString();
        java.lang.String str60 = aDTFraction56.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction56.times(aDTFraction63);
        int int66 = aDTFraction56.denominator();
        float float67 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction38.times(aDTFraction56);
        java.lang.Class<?> wildcardClass69 = aDTFraction38.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-1.0f) + "'", float40 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0/-1" + "'", str59, "0/-1");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/-1" + "'", str60, "0/-1");
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        int int6 = aDTFraction3.denominator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction20.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction30.times(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        boolean boolean60 = aDTFraction54.equals((java.lang.Object) "");
        java.lang.String str61 = aDTFraction54.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction48.times(aDTFraction54);
        float float63 = aDTFraction62.value();
        java.lang.String str64 = aDTFraction62.toString();
        int int65 = aDTFraction62.denominator();
        boolean boolean66 = aDTFraction20.equals((java.lang.Object) int65);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float73 = aDTFraction72.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction69.plus(aDTFraction72);
        int int75 = aDTFraction69.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = aDTFraction69.plus(aDTFraction78);
        boolean boolean80 = aDTFraction20.equals((java.lang.Object) aDTFraction78);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0/-100" + "'", str64, "0/-100");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-100) + "'", int65 == (-100));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(aDTFraction79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.numerator();
        int int5 = aDTFraction2.denominator();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/10" + "'", str3, "-1/10");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction6.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction15.times((int) (byte) 0);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.times(aDTFraction22);
        float float25 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.times(aDTFraction26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction((int) (byte) 10, 1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction68.times(aDTFraction71);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction72);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        int int27 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction8.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        int int37 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction31.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction31.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction24.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        boolean boolean59 = aDTFraction51.equals((java.lang.Object) aDTFraction57);
        java.lang.String str60 = aDTFraction57.toString();
        java.lang.String str61 = aDTFraction57.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction57.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float73 = aDTFraction72.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction69.plus(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction66.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int79 = aDTFraction78.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction66.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction66.plus(aDTFraction83);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction66.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction63.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction31.times(aDTFraction66);
        int int88 = aDTFraction31.denominator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/-1" + "'", str60, "0/-1");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 100 + "'", int79 == 100);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction34.times(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction44.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction14.times(aDTFraction46);
        java.lang.Object obj48 = null;
        boolean boolean49 = aDTFraction46.equals(obj48);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        float float91 = aDTFraction88.value();
        java.lang.Class<?> wildcardClass92 = aDTFraction88.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + 0.3125f + "'", float91 == 0.3125f);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        int int28 = aDTFraction25.denominator();
        int int29 = aDTFraction25.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean7 = aDTFraction5.equals((java.lang.Object) (-1));
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        int int20 = aDTFraction10.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        boolean boolean37 = aDTFraction29.equals((java.lang.Object) aDTFraction35);
        java.lang.String str38 = aDTFraction35.toString();
        java.lang.String str39 = aDTFraction35.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction42);
        boolean boolean45 = aDTFraction10.equals((java.lang.Object) aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction5.times(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction2.times(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction50.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction51.times(52);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction10.plus(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 166.4f + "'", float54 == 166.4f);
        org.junit.Assert.assertNotNull(aDTFraction55);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction11.times((int) (byte) 0);
        float float19 = aDTFraction11.value();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        int int13 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction2.plus(aDTFraction7);
        int int15 = aDTFraction7.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        int int35 = aDTFraction33.denominator();
        int int36 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        int int45 = aDTFraction39.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction39.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction33.times(aDTFraction49);
        int int51 = aDTFraction50.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        java.lang.Class<?> wildcardClass23 = aDTFraction15.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        int int91 = aDTFraction2.denominator();
        java.lang.Class<?> wildcardClass92 = aDTFraction2.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times(aDTFraction28);
        java.lang.String str30 = aDTFraction28.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int46 = aDTFraction45.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction33.times(aDTFraction45);
        int int48 = aDTFraction33.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction54.times((int) (byte) 100);
        java.lang.String str61 = aDTFraction54.toString();
        int int62 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction54.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction33.plus(aDTFraction64);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float72 = aDTFraction71.value();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction68.plus(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction79 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float83 = aDTFraction82.value();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction79.plus(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction76.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int89 = aDTFraction88.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction76.times(aDTFraction88);
        com.thealgorithms.maths.ADTFraction aDTFraction91 = aDTFraction73.times(aDTFraction90);
        int int92 = aDTFraction90.denominator();
        boolean boolean93 = aDTFraction65.equals((java.lang.Object) aDTFraction90);
        boolean boolean94 = aDTFraction28.equals((java.lang.Object) aDTFraction65);
        java.lang.Class<?> wildcardClass95 = aDTFraction28.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/10" + "'", str30, "0/10");
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + (-0.0f) + "'", float72 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + (-0.0f) + "'", float83 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(aDTFraction91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction12.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction2.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction38.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int51 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction38.times(aDTFraction50);
        int int53 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction56.plus(aDTFraction59);
        boolean boolean63 = aDTFraction59.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.times((int) (byte) 100);
        java.lang.String str66 = aDTFraction59.toString();
        int int67 = aDTFraction59.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction59.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction38.plus(aDTFraction69);
        int int71 = aDTFraction69.denominator();
        int int72 = aDTFraction69.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        int int81 = aDTFraction75.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction75.plus(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction69.times(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int90 = aDTFraction89.denominator();
        boolean boolean92 = aDTFraction89.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction85.times(aDTFraction89);
        boolean boolean94 = aDTFraction2.equals((java.lang.Object) aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction85.times((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 100 + "'", int90 == 100);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(aDTFraction96);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times((int) (byte) 10);
        int int18 = aDTFraction17.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction17.times((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction20);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        int int10 = aDTFraction9.denominator();
        java.lang.String str11 = aDTFraction9.toString();
        boolean boolean13 = aDTFraction9.equals((java.lang.Object) (byte) 10);
        int int14 = aDTFraction9.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction12.times(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int25 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.times(aDTFraction24);
        int int27 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction8.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        int int37 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction31.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction31.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction24.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction45.times(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float58 = aDTFraction57.value();
        boolean boolean59 = aDTFraction51.equals((java.lang.Object) aDTFraction57);
        java.lang.String str60 = aDTFraction57.toString();
        java.lang.String str61 = aDTFraction57.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction57.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float73 = aDTFraction72.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction69.plus(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction66.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int79 = aDTFraction78.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction66.times(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction66.plus(aDTFraction83);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction66.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction63.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction31.times(aDTFraction66);
        int int88 = aDTFraction66.denominator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/-1" + "'", str60, "0/-1");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 100 + "'", int79 == 100);
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float13 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction9.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction6.times(aDTFraction12);
        int int16 = aDTFraction12.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.String str25 = aDTFraction19.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction12.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        int int42 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction29.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction12.times(aDTFraction29);
        java.lang.String str45 = aDTFraction12.toString();
        float float46 = aDTFraction12.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction2.times(aDTFraction12);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/10" + "'", str3, "-1/10");
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + (-0.0f) + "'", float13 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0/-1" + "'", str25, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction20.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction21.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction42);
        int int45 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction26.times(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float53 = aDTFraction52.value();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction49.plus(aDTFraction52);
        int int55 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction49.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction49.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction42.times(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction17.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction60.times((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-0.0f) + "'", float53 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction63);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        boolean boolean5 = aDTFraction2.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times(aDTFraction8);
        int int10 = aDTFraction8.denominator();
        int int11 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float18 = aDTFraction17.value();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction14.plus(aDTFraction17);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction22.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction17.plus(aDTFraction31);
        java.lang.String str33 = aDTFraction32.toString();
        boolean boolean34 = aDTFraction8.equals((java.lang.Object) str33);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-0.0f) + "'", float18 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0/1" + "'", str33, "0/1");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        float float35 = aDTFraction34.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-1.0f) + "'", float35 == (-1.0f));
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        float float3 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction9.times(aDTFraction15);
        int int19 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction6.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction15.times((int) (byte) 0);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction2.times(aDTFraction22);
        int int25 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float35 = aDTFraction34.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction31.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction28.times(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        boolean boolean42 = aDTFraction34.equals((java.lang.Object) aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        boolean boolean52 = aDTFraction45.equals((java.lang.Object) 10);
        boolean boolean53 = aDTFraction40.equals((java.lang.Object) aDTFraction45);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float66 = aDTFraction65.value();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction62.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction59.times(aDTFraction65);
        int int69 = aDTFraction65.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction56.times(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float77 = aDTFraction76.value();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction73.plus(aDTFraction76);
        java.lang.Class<?> wildcardClass79 = aDTFraction76.getClass();
        boolean boolean80 = aDTFraction56.equals((java.lang.Object) aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float87 = aDTFraction86.value();
        com.thealgorithms.maths.ADTFraction aDTFraction88 = aDTFraction83.plus(aDTFraction86);
        boolean boolean90 = aDTFraction86.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction86.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction76.times(aDTFraction92);
        boolean boolean94 = aDTFraction45.equals((java.lang.Object) aDTFraction92);
        boolean boolean95 = aDTFraction22.equals((java.lang.Object) boolean94);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-1.0f) + "'", float3 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-0.0f) + "'", float35 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-0.0f) + "'", float66 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + (-0.0f) + "'", float77 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + (-0.0f) + "'", float87 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        int int10 = aDTFraction9.denominator();
        java.lang.String str11 = aDTFraction9.toString();
        boolean boolean13 = aDTFraction9.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        int int22 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction16.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        int int35 = aDTFraction29.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction25.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str40 = aDTFraction39.toString();
        boolean boolean41 = aDTFraction25.equals((java.lang.Object) aDTFraction39);
        int int42 = aDTFraction39.denominator();
        boolean boolean43 = aDTFraction9.equals((java.lang.Object) int42);
        java.lang.Class<?> wildcardClass44 = aDTFraction9.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1/10" + "'", str40, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction40.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction41.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction5.times(aDTFraction43);
        int int45 = aDTFraction43.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        float float23 = aDTFraction22.value();
        java.lang.Class<?> wildcardClass24 = aDTFraction22.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction22.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction42);
        java.lang.Class<?> wildcardClass44 = aDTFraction42.getClass();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction16.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction29.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int42 = aDTFraction41.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction29.times(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction26.times(aDTFraction43);
        int int45 = aDTFraction43.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        java.lang.String str54 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        boolean boolean64 = aDTFraction60.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction60.times((int) (byte) 100);
        java.lang.String str67 = aDTFraction60.toString();
        int int68 = aDTFraction60.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction60.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction48.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction43.times(aDTFraction71);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction16.plus(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0/-1" + "'", str67, "0/-1");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        int int34 = aDTFraction33.numerator();
        int int35 = aDTFraction33.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction33.times(10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction37);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str3 = aDTFraction2.toString();
        int int4 = aDTFraction2.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.times((int) (byte) 10);
        java.lang.Class<?> wildcardClass7 = aDTFraction6.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/1" + "'", str3, "-1/1");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        int int10 = aDTFraction9.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction9.times((int) (short) -1);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction12);
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str3 = aDTFraction2.toString();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction7.times(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int20 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction7.times(aDTFraction19);
        int int22 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        boolean boolean32 = aDTFraction28.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction28.times((int) (byte) 100);
        java.lang.String str35 = aDTFraction28.toString();
        int int36 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction28.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction7.plus(aDTFraction38);
        int int40 = aDTFraction38.denominator();
        int int41 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        int int50 = aDTFraction44.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction44.plus(aDTFraction53);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction38.times(aDTFraction54);
        boolean boolean56 = aDTFraction2.equals((java.lang.Object) aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction38.times((int) (byte) 10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/1" + "'", str3, "-1/1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-1.0f) + "'", float4 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(aDTFraction58);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        int int14 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        boolean boolean24 = aDTFraction20.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction20.times((int) (byte) 100);
        java.lang.String str27 = aDTFraction20.toString();
        int int28 = aDTFraction20.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction20.times((int) ' ');
        int int31 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction5.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction41);
        int int45 = aDTFraction41.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        java.lang.String str54 = aDTFraction48.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction41.plus(aDTFraction48);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction55.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction32.plus(aDTFraction55);
        int int60 = aDTFraction55.denominator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0/-1" + "'", str27, "0/-1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        int int18 = aDTFraction16.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction16.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        boolean boolean37 = aDTFraction29.equals((java.lang.Object) aDTFraction35);
        java.lang.String str38 = aDTFraction35.toString();
        java.lang.String str39 = aDTFraction35.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction35.times(aDTFraction42);
        int int45 = aDTFraction35.denominator();
        float float46 = aDTFraction35.value();
        boolean boolean47 = aDTFraction20.equals((java.lang.Object) float46);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0/-1" + "'", str38, "0/-1");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.plus(aDTFraction7);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        int int17 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction11.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        boolean boolean29 = aDTFraction25.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction25.times((int) (byte) 100);
        float float32 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction11.plus(aDTFraction25);
        int int34 = aDTFraction11.numerator();
        java.lang.String str35 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction11.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction41.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction42.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        int int57 = aDTFraction51.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction47.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction38.plus(aDTFraction47);
        java.lang.String str60 = aDTFraction59.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction63.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int76 = aDTFraction75.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction63.times(aDTFraction75);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction63.reciprocal();
        float float79 = aDTFraction63.value();
        int int80 = aDTFraction63.numerator();
        float float81 = aDTFraction63.value();
        boolean boolean82 = aDTFraction59.equals((java.lang.Object) float81);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-100/-100" + "'", str60, "-100/-100");
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-1.0f) + "'", float79 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-1.0f) + "'", float81 == (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        int int33 = aDTFraction29.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction20.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        java.lang.Class<?> wildcardClass43 = aDTFraction40.getClass();
        boolean boolean44 = aDTFraction20.equals((java.lang.Object) aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        boolean boolean54 = aDTFraction50.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction50.times((int) (byte) 100);
        java.lang.String str57 = aDTFraction50.toString();
        int int58 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction40.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction2.times(aDTFraction50);
        java.lang.String str61 = aDTFraction60.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0/-1" + "'", str57, "0/-1");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        boolean boolean40 = aDTFraction32.equals((java.lang.Object) aDTFraction38);
        java.lang.String str41 = aDTFraction38.toString();
        java.lang.String str42 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction14.plus(aDTFraction44);
        float float46 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction49.times(10);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction14.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction55.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction56.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean62 = aDTFraction58.equals((java.lang.Object) aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float69 = aDTFraction68.value();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction65.plus(aDTFraction68);
        int int71 = aDTFraction65.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction61.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction78.times((int) 'a');
        int int83 = aDTFraction82.denominator();
        java.lang.String str84 = aDTFraction82.toString();
        boolean boolean86 = aDTFraction82.equals((java.lang.Object) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int90 = aDTFraction89.denominator();
        float float91 = aDTFraction89.value();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction89.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction82.plus(aDTFraction89);
        com.thealgorithms.maths.ADTFraction aDTFraction94 = aDTFraction61.plus(aDTFraction89);
        boolean boolean95 = aDTFraction14.equals((java.lang.Object) aDTFraction89);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + (-0.0f) + "'", float69 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0/-1" + "'", str84, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 100 + "'", int90 == 100);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + 1.0f + "'", float91 == 1.0f);
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertNotNull(aDTFraction94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction8.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction14.plus(aDTFraction50);
        float float53 = aDTFraction52.value();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction52.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction22.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        boolean boolean49 = aDTFraction45.equals((java.lang.Object) ' ');
        boolean boolean51 = aDTFraction45.equals((java.lang.Object) "");
        int int52 = aDTFraction45.denominator();
        java.lang.String str53 = aDTFraction45.toString();
        java.lang.String str54 = aDTFraction45.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction22.plus(aDTFraction45);
        java.lang.String str56 = aDTFraction45.toString();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0/-1" + "'", str53, "0/-1");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0/-1" + "'", str56, "0/-1");
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int36 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction20.times(aDTFraction37);
        int int39 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float46 = aDTFraction45.value();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction42.plus(aDTFraction45);
        java.lang.String str48 = aDTFraction42.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction51.plus(aDTFraction54);
        boolean boolean58 = aDTFraction54.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction54.times((int) (byte) 100);
        java.lang.String str61 = aDTFraction54.toString();
        int int62 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction54.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction42.plus(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction37.times(aDTFraction65);
        int int67 = aDTFraction65.numerator();
        boolean boolean68 = aDTFraction12.equals((java.lang.Object) int67);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0/-1" + "'", str61, "0/-1");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        int int53 = aDTFraction47.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction47.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        int int66 = aDTFraction60.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction56.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction15.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction56.times(0);
        int int71 = aDTFraction56.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction56.times(1);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(aDTFraction73);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction17.times((-10));
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction19);
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) 1, (int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        int int11 = aDTFraction5.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.plus(aDTFraction14);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        int int24 = aDTFraction18.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction14.times(aDTFraction18);
        int int26 = aDTFraction14.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction2.plus(aDTFraction14);
        int int28 = aDTFraction14.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        int int24 = aDTFraction14.denominator();
        float float25 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (short) 10);
        boolean boolean29 = aDTFraction14.equals((java.lang.Object) aDTFraction28);
        int int30 = aDTFraction28.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        java.lang.String str4 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction12.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction2.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction38.times(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int51 = aDTFraction50.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction38.times(aDTFraction50);
        int int53 = aDTFraction38.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float60 = aDTFraction59.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction56.plus(aDTFraction59);
        boolean boolean63 = aDTFraction59.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction59.times((int) (byte) 100);
        java.lang.String str66 = aDTFraction59.toString();
        int int67 = aDTFraction59.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction59.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction38.plus(aDTFraction69);
        int int71 = aDTFraction69.denominator();
        int int72 = aDTFraction69.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction75.plus(aDTFraction78);
        int int81 = aDTFraction75.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction75.plus(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction69.times(aDTFraction85);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int90 = aDTFraction89.denominator();
        boolean boolean92 = aDTFraction89.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction93 = aDTFraction85.times(aDTFraction89);
        boolean boolean94 = aDTFraction2.equals((java.lang.Object) aDTFraction85);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction95 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0/-1" + "'", str4, "0/-1");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/-1" + "'", str66, "0/-1");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 100 + "'", int90 == 100);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(aDTFraction93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction26.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        boolean boolean40 = aDTFraction32.equals((java.lang.Object) aDTFraction38);
        java.lang.String str41 = aDTFraction38.toString();
        java.lang.String str42 = aDTFraction38.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction14.plus(aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction44.times(52);
        int int48 = aDTFraction44.denominator();
        java.lang.String str49 = aDTFraction44.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0/-1" + "'", str41, "0/-1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0/-1" + "'", str42, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0/-1" + "'", str49, "0/-1");
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int36 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction23.reciprocal();
        int int39 = aDTFraction38.numerator();
        float float40 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction20.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float51 = aDTFraction50.value();
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction47.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction44.times(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        boolean boolean58 = aDTFraction50.equals((java.lang.Object) aDTFraction56);
        java.lang.String str59 = aDTFraction56.toString();
        java.lang.String str60 = aDTFraction56.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction56.times(aDTFraction63);
        int int66 = aDTFraction56.denominator();
        float float67 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction38.times(aDTFraction56);
        int int69 = aDTFraction56.denominator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-1.0f) + "'", float40 == (-1.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-0.0f) + "'", float51 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0/-1" + "'", str59, "0/-1");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/-1" + "'", str60, "0/-1");
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) ' ', (int) ' ');
        int int3 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(35, 52);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        org.junit.Assert.assertNotNull(aDTFraction3);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        boolean boolean23 = aDTFraction19.equals((java.lang.Object) ' ');
        boolean boolean25 = aDTFraction19.equals((java.lang.Object) "");
        float float26 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction5.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float47 = aDTFraction46.value();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.plus(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction40.times(aDTFraction46);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int53 = aDTFraction52.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction40.times(aDTFraction52);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction37.times(aDTFraction54);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction58.plus(aDTFraction61);
        boolean boolean65 = aDTFraction61.equals((java.lang.Object) ' ');
        boolean boolean67 = aDTFraction61.equals((java.lang.Object) "");
        java.lang.String str68 = aDTFraction61.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction55.times(aDTFraction61);
        float float70 = aDTFraction69.value();
        java.lang.String str71 = aDTFraction69.toString();
        int int72 = aDTFraction69.denominator();
        int int73 = aDTFraction69.numerator();
        int int74 = aDTFraction69.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction77 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float81 = aDTFraction80.value();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction77.plus(aDTFraction80);
        int int83 = aDTFraction77.numerator();
        boolean boolean85 = aDTFraction77.equals((java.lang.Object) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction69.plus(aDTFraction77);
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction28.times(aDTFraction69);
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction28.times((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-0.0f) + "'", float47 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0/-1" + "'", str68, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0/-100" + "'", str71, "0/-100");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-100) + "'", int72 == (-100));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-100) + "'", int74 == (-100));
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + (-0.0f) + "'", float81 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(aDTFraction89);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        boolean boolean51 = aDTFraction43.equals((java.lang.Object) aDTFraction49);
        java.lang.String str52 = aDTFraction49.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction53.times((int) (short) -1);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction55);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        float float12 = aDTFraction5.value();
        java.lang.String str13 = aDTFraction5.toString();
        float float14 = aDTFraction5.value();
        int int15 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        boolean boolean25 = aDTFraction21.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction21.times((int) (byte) 100);
        java.lang.String str28 = aDTFraction21.toString();
        int int29 = aDTFraction21.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction21.times((int) ' ');
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        boolean boolean42 = aDTFraction38.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction38.times((int) (byte) 100);
        java.lang.String str45 = aDTFraction38.toString();
        int int46 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction55 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float56 = aDTFraction55.value();
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction52.plus(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction49.times(aDTFraction55);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int62 = aDTFraction61.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction49.times(aDTFraction61);
        int int64 = aDTFraction49.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        boolean boolean74 = aDTFraction70.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction70.times((int) (byte) 100);
        java.lang.String str77 = aDTFraction70.toString();
        int int78 = aDTFraction70.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction80 = aDTFraction70.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction81 = aDTFraction49.plus(aDTFraction80);
        int int82 = aDTFraction80.denominator();
        boolean boolean84 = aDTFraction80.equals((java.lang.Object) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction38.times(aDTFraction80);
        boolean boolean86 = aDTFraction31.equals((java.lang.Object) aDTFraction85);
        int int87 = aDTFraction85.numerator();
        boolean boolean88 = aDTFraction5.equals((java.lang.Object) int87);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0/-1" + "'", str45, "0/-1");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + (-0.0f) + "'", float56 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0/-1" + "'", str77, "0/-1");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction80);
        org.junit.Assert.assertNotNull(aDTFraction81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        java.lang.String str8 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction11.plus(aDTFraction14);
        boolean boolean18 = aDTFraction14.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (byte) 100);
        java.lang.String str21 = aDTFraction14.toString();
        int int22 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction14.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction2.plus(aDTFraction14);
        java.lang.Class<?> wildcardClass26 = aDTFraction25.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0/-1" + "'", str8, "0/-1");
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction18.times(aDTFraction24);
        int int28 = aDTFraction24.numerator();
        int int29 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction32.plus(aDTFraction35);
        boolean boolean39 = aDTFraction35.equals((java.lang.Object) ' ');
        boolean boolean41 = aDTFraction35.equals((java.lang.Object) "");
        float float42 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction24.times(aDTFraction35);
        boolean boolean44 = aDTFraction15.equals((java.lang.Object) aDTFraction24);
        int int45 = aDTFraction15.numerator();
        float float46 = aDTFraction15.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + (-0.0f) + "'", float36 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float3 = aDTFraction2.value();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction18.plus(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction15.times(aDTFraction21);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int28 = aDTFraction27.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction15.times(aDTFraction27);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction12.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction12.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction2.times(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction12.times((int) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction12.times((int) (short) -1);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.0f) + "'", float3 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertNotNull(aDTFraction37);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int36 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.times(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction23.plus(aDTFraction40);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction23.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction20.plus(aDTFraction23);
        float float44 = aDTFraction20.value();
        int int45 = aDTFraction20.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        int int6 = aDTFraction2.numerator();
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction5.plus(aDTFraction19);
        int int21 = aDTFraction5.denominator();
        int int22 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        java.lang.String str26 = aDTFraction25.toString();
        float float27 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float37 = aDTFraction36.value();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction33.plus(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction30.times(aDTFraction36);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int43 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction30.times(aDTFraction42);
        int int45 = aDTFraction30.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        boolean boolean55 = aDTFraction51.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction51.times((int) (byte) 100);
        java.lang.String str58 = aDTFraction51.toString();
        int int59 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction51.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction30.plus(aDTFraction61);
        int int63 = aDTFraction61.denominator();
        int int64 = aDTFraction61.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        int int73 = aDTFraction67.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction67.plus(aDTFraction76);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction61.times(aDTFraction77);
        boolean boolean79 = aDTFraction25.equals((java.lang.Object) aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction82 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float86 = aDTFraction85.value();
        com.thealgorithms.maths.ADTFraction aDTFraction87 = aDTFraction82.plus(aDTFraction85);
        java.lang.Class<?> wildcardClass88 = aDTFraction82.getClass();
        boolean boolean89 = aDTFraction61.equals((java.lang.Object) aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction5.times(aDTFraction61);
        java.lang.Class<?> wildcardClass91 = aDTFraction90.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/1" + "'", str26, "-1/1");
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-1.0f) + "'", float27 == (-1.0f));
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-0.0f) + "'", float37 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0/-1" + "'", str58, "0/-1");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + (-0.0f) + "'", float86 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction87);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times(aDTFraction28);
        java.lang.String str30 = aDTFraction28.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), (-10));
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction28.times(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/10" + "'", str30, "0/10");
        org.junit.Assert.assertNotNull(aDTFraction34);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        boolean boolean51 = aDTFraction43.equals((java.lang.Object) aDTFraction49);
        java.lang.String str52 = aDTFraction49.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction56.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction49.plus(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float71 = aDTFraction70.value();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction67.plus(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction64.times(aDTFraction70);
        com.thealgorithms.maths.ADTFraction aDTFraction76 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int77 = aDTFraction76.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction64.times(aDTFraction76);
        boolean boolean79 = aDTFraction49.equals((java.lang.Object) aDTFraction78);
        int int80 = aDTFraction78.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-0.0f) + "'", float71 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-100) + "'", int80 == (-100));
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        int int43 = aDTFraction37.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction37.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        boolean boolean55 = aDTFraction51.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction51.times((int) (byte) 100);
        float float58 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction37.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction37.times((int) 'a');
        int int62 = aDTFraction61.numerator();
        boolean boolean63 = aDTFraction34.equals((java.lang.Object) int62);
        int int64 = aDTFraction34.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction67.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction68.times(52);
        java.lang.String str71 = aDTFraction70.toString();
        boolean boolean72 = aDTFraction34.equals((java.lang.Object) aDTFraction70);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + (-0.0f) + "'", float58 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1664/10" + "'", str71, "1664/10");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction7.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction7.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction29.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction31.times((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction33);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        java.lang.String str3 = aDTFraction2.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float21 = aDTFraction20.value();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction17.plus(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction20);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int27 = aDTFraction26.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction11.times(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float39 = aDTFraction38.value();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction35.plus(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction32.times(aDTFraction38);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction29.times(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction29.times((int) (short) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction2.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float52 = aDTFraction51.value();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction48.plus(aDTFraction51);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction56.times(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction51.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction66.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = aDTFraction29.times(aDTFraction68);
        int int70 = aDTFraction68.denominator();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0/-1" + "'", str3, "0/-1");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + (-0.0f) + "'", float21 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-0.0f) + "'", float39 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction40);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + (-0.0f) + "'", float52 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertNotNull(aDTFraction66);
        org.junit.Assert.assertNotNull(aDTFraction68);
        org.junit.Assert.assertNotNull(aDTFraction69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 10, (int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction5.reciprocal();
        java.lang.String str7 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times(aDTFraction5);
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100/100" + "'", str7, "100/100");
        org.junit.Assert.assertNotNull(aDTFraction8);
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test464");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        float float6 = aDTFraction5.value();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 320.0f + "'", float6 == 320.0f);
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test465");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float11 = aDTFraction10.value();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction7.plus(aDTFraction10);
        int int13 = aDTFraction7.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction2.plus(aDTFraction7);
        float float15 = aDTFraction14.value();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-0.0f) + "'", float11 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test466");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction8.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        java.lang.String str21 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction8.plus(aDTFraction15);
        java.lang.String str23 = aDTFraction22.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction22.times(1);
        float float26 = aDTFraction25.value();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0/-1" + "'", str21, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/1" + "'", str23, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test467");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction40.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction41.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction5.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction((int) (byte) 0, (int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction43.times(aDTFraction47);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction48);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test468");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float17 = aDTFraction16.value();
        com.thealgorithms.maths.ADTFraction aDTFraction18 = aDTFraction13.plus(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction10.times(aDTFraction16);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int23 = aDTFraction22.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction10.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction7.times(aDTFraction24);
        int int26 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        java.lang.String str35 = aDTFraction29.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction41.times((int) (byte) 100);
        java.lang.String str48 = aDTFraction41.toString();
        int int49 = aDTFraction41.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction41.times((int) (byte) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction52 = aDTFraction29.plus(aDTFraction41);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction24.times(aDTFraction52);
        int int54 = aDTFraction52.numerator();
        int int55 = aDTFraction52.numerator();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + (-0.0f) + "'", float17 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction18);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0/-1" + "'", str35, "0/-1");
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0/-1" + "'", str48, "0/-1");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertNotNull(aDTFraction52);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test469");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) '#');
        int int3 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction6 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float10 = aDTFraction9.value();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction6.plus(aDTFraction9);
        boolean boolean13 = aDTFraction9.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction9.times((int) (byte) 100);
        java.lang.String str16 = aDTFraction9.toString();
        int int17 = aDTFraction9.denominator();
        int int18 = aDTFraction9.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float25 = aDTFraction24.value();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction21.plus(aDTFraction24);
        boolean boolean28 = aDTFraction24.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction24.times((int) (byte) 100);
        java.lang.String str31 = aDTFraction24.toString();
        int int32 = aDTFraction24.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction24.times((int) ' ');
        int int35 = aDTFraction34.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction9.plus(aDTFraction34);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction2.plus(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0/-1" + "'", str16, "0/-1");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + (-0.0f) + "'", float25 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0/-1" + "'", str31, "0/-1");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction37);
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test470");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction5.times((int) (byte) 100);
        java.lang.String str12 = aDTFraction5.toString();
        int int13 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction5.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times((int) (byte) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float43 = aDTFraction42.value();
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction39.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction36.times(aDTFraction42);
        int int46 = aDTFraction42.numerator();
        int int47 = aDTFraction42.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        boolean boolean57 = aDTFraction53.equals((java.lang.Object) ' ');
        boolean boolean59 = aDTFraction53.equals((java.lang.Object) "");
        float float60 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction42.times(aDTFraction53);
        boolean boolean62 = aDTFraction33.equals((java.lang.Object) aDTFraction42);
        boolean boolean63 = aDTFraction17.equals((java.lang.Object) aDTFraction42);
        java.lang.Class<?> wildcardClass64 = aDTFraction42.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-0.0f) + "'", float43 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + (-0.0f) + "'", float60 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test471");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        boolean boolean10 = aDTFraction8.equals((java.lang.Object) (-1));
        java.lang.String str11 = aDTFraction8.toString();
        boolean boolean12 = aDTFraction2.equals((java.lang.Object) str11);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0/-1" + "'", str11, "0/-1");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test472");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 0, (int) (byte) -1);
        int int3 = aDTFraction2.denominator();
        float float4 = aDTFraction2.value();
        float float5 = aDTFraction2.value();
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        boolean boolean15 = aDTFraction11.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction11.times((int) (byte) 100);
        java.lang.String str18 = aDTFraction11.toString();
        int int19 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction11.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction27 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction30 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float31 = aDTFraction30.value();
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction27.plus(aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction24.times(aDTFraction30);
        int int34 = aDTFraction30.numerator();
        int int35 = aDTFraction30.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction38 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float42 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction38.plus(aDTFraction41);
        boolean boolean45 = aDTFraction41.equals((java.lang.Object) ' ');
        boolean boolean47 = aDTFraction41.equals((java.lang.Object) "");
        float float48 = aDTFraction41.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction30.times(aDTFraction41);
        boolean boolean50 = aDTFraction21.equals((java.lang.Object) aDTFraction30);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        int int59 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float70 = aDTFraction69.value();
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction66.plus(aDTFraction69);
        int int72 = aDTFraction66.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction73 = aDTFraction62.times(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction21.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction2.plus(aDTFraction74);
        int int76 = aDTFraction2.numerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-0.0f) + "'", float4 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-0.0f) + "'", float5 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + (-0.0f) + "'", float31 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + (-0.0f) + "'", float42 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + (-0.0f) + "'", float70 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(aDTFraction73);
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test473");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction5.times((int) 'a');
        float float10 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float20 = aDTFraction19.value();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction16.plus(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction13.times(aDTFraction19);
        int int23 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        java.lang.String str32 = aDTFraction26.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.plus(aDTFraction26);
        float float34 = aDTFraction33.value();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction33.times((int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        boolean boolean40 = aDTFraction36.equals((java.lang.Object) aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction5.times(aDTFraction36);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + (-0.0f) + "'", float10 == (-0.0f));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + (-0.0f) + "'", float20 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0/-1" + "'", str32, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 0.0f + "'", float34 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(aDTFraction41);
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test474");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int3 = aDTFraction2.denominator();
        boolean boolean5 = aDTFraction2.equals((java.lang.Object) (short) 0);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction((int) '#', (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction9 = aDTFraction2.times(aDTFraction8);
        int int10 = aDTFraction8.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction8.times((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(aDTFraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertNotNull(aDTFraction12);
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test475");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction14.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float30 = aDTFraction29.value();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction26.plus(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = aDTFraction23.times(aDTFraction29);
        com.thealgorithms.maths.ADTFraction aDTFraction35 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int36 = aDTFraction35.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction23.times(aDTFraction35);
        int int38 = aDTFraction23.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float45 = aDTFraction44.value();
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction41.plus(aDTFraction44);
        boolean boolean48 = aDTFraction44.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction44.times((int) (byte) 100);
        java.lang.String str51 = aDTFraction44.toString();
        int int52 = aDTFraction44.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction54 = aDTFraction44.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction23.plus(aDTFraction54);
        int int56 = aDTFraction54.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float63 = aDTFraction62.value();
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction59.plus(aDTFraction62);
        int int65 = aDTFraction59.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction59.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction70 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction73 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float74 = aDTFraction73.value();
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction70.plus(aDTFraction73);
        int int76 = aDTFraction70.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction78 = aDTFraction70.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction81 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float85 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction86 = aDTFraction81.plus(aDTFraction84);
        boolean boolean88 = aDTFraction84.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction84.times((int) (byte) 100);
        float float91 = aDTFraction84.value();
        com.thealgorithms.maths.ADTFraction aDTFraction92 = aDTFraction70.plus(aDTFraction84);
        boolean boolean93 = aDTFraction59.equals((java.lang.Object) aDTFraction84);
        boolean boolean94 = aDTFraction54.equals((java.lang.Object) aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction96 = aDTFraction59.times(0);
        com.thealgorithms.maths.ADTFraction aDTFraction97 = aDTFraction14.plus(aDTFraction59);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + (-0.0f) + "'", float30 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertNotNull(aDTFraction32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + (-0.0f) + "'", float45 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0/-1" + "'", str51, "0/-1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction54);
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + (-0.0f) + "'", float63 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(aDTFraction67);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + (-0.0f) + "'", float74 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(aDTFraction78);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-0.0f) + "'", float85 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + (-0.0f) + "'", float91 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(aDTFraction96);
        org.junit.Assert.assertNotNull(aDTFraction97);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test476");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) 10);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.plus(aDTFraction16);
        int int18 = aDTFraction16.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction16.times((int) (byte) 10);
        float float21 = aDTFraction20.value();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test477");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) 1, (int) (byte) 1);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test478");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        int int12 = aDTFraction11.denominator();
        java.lang.String str13 = aDTFraction11.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction11.times((int) '#');
        int int16 = aDTFraction15.numerator();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test479");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        boolean boolean4 = aDTFraction2.equals((java.lang.Object) 100.0d);
        com.thealgorithms.maths.ADTFraction aDTFraction7 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction10 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction13 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float14 = aDTFraction13.value();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = aDTFraction10.plus(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction7.times(aDTFraction13);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int20 = aDTFraction19.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = aDTFraction7.times(aDTFraction19);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction7.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float29 = aDTFraction28.value();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction25.plus(aDTFraction28);
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction33.times(aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction28.plus(aDTFraction42);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = aDTFraction7.times(aDTFraction43);
        boolean boolean45 = aDTFraction2.equals((java.lang.Object) aDTFraction44);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction44.plus(aDTFraction46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"numerator\" because \"fraction\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-0.0f) + "'", float14 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction15);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(aDTFraction21);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.0f) + "'", float29 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertNotNull(aDTFraction44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test480");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        int int15 = aDTFraction11.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        java.lang.Class<?> wildcardClass25 = aDTFraction22.getClass();
        boolean boolean26 = aDTFraction2.equals((java.lang.Object) aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction32 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float33 = aDTFraction32.value();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction29.plus(aDTFraction32);
        boolean boolean36 = aDTFraction32.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction32.times((int) (byte) 100);
        java.lang.String str39 = aDTFraction32.toString();
        int int40 = aDTFraction32.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction22.plus(aDTFraction32);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction41.times(52);
        int int44 = aDTFraction43.numerator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-0.0f) + "'", float33 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0/-1" + "'", str39, "0/-1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test481");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) (short) -1);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test482");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        java.lang.String str12 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.plus(aDTFraction24);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        int int34 = aDTFraction28.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction35 = aDTFraction24.times(aDTFraction28);
        float float36 = aDTFraction35.value();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = aDTFraction5.plus(aDTFraction35);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction35.times((int) 'a');
        com.thealgorithms.maths.ADTFraction aDTFraction42 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction45 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction48 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float49 = aDTFraction48.value();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction45.plus(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction42.times(aDTFraction48);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float55 = aDTFraction54.value();
        boolean boolean56 = aDTFraction48.equals((java.lang.Object) aDTFraction54);
        java.lang.String str57 = aDTFraction54.toString();
        java.lang.String str58 = aDTFraction54.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction61 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float62 = aDTFraction61.value();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction61);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction69 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction72 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float73 = aDTFraction72.value();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction69.plus(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction75 = aDTFraction66.times(aDTFraction72);
        com.thealgorithms.maths.ADTFraction aDTFraction78 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float79 = aDTFraction78.value();
        boolean boolean80 = aDTFraction72.equals((java.lang.Object) aDTFraction78);
        java.lang.String str81 = aDTFraction78.toString();
        java.lang.String str82 = aDTFraction78.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction78.times((int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction54.plus(aDTFraction84);
        boolean boolean86 = aDTFraction39.equals((java.lang.Object) aDTFraction84);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0/-1" + "'", str12, "0/-1");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(aDTFraction35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(aDTFraction37);
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-0.0f) + "'", float49 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-0.0f) + "'", float55 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0/-1" + "'", str57, "0/-1");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0/-1" + "'", str58, "0/-1");
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + (-0.0f) + "'", float62 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + (-0.0f) + "'", float73 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertNotNull(aDTFraction75);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + (-0.0f) + "'", float79 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0/-1" + "'", str81, "0/-1");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0/-1" + "'", str82, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test483");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-10), 52);
        float float3 = aDTFraction2.value();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + (-0.1923077f) + "'", float3 == (-0.1923077f));
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test484");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float23 = aDTFraction22.value();
        com.thealgorithms.maths.ADTFraction aDTFraction24 = aDTFraction19.plus(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction16.times(aDTFraction22);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int29 = aDTFraction28.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction30 = aDTFraction16.times(aDTFraction28);
        int int31 = aDTFraction16.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        boolean boolean41 = aDTFraction37.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction43 = aDTFraction37.times((int) (byte) 100);
        java.lang.String str44 = aDTFraction37.toString();
        int int45 = aDTFraction37.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction47 = aDTFraction37.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction48 = aDTFraction16.plus(aDTFraction47);
        int int49 = aDTFraction47.denominator();
        int int50 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float57 = aDTFraction56.value();
        com.thealgorithms.maths.ADTFraction aDTFraction58 = aDTFraction53.plus(aDTFraction56);
        int int59 = aDTFraction53.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.plus(aDTFraction62);
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction47.times(aDTFraction63);
        int int65 = aDTFraction63.denominator();
        java.lang.String str66 = aDTFraction63.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction67 = aDTFraction5.times(aDTFraction63);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction68 = aDTFraction5.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + (-0.0f) + "'", float23 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction24);
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(aDTFraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(aDTFraction43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0/-1" + "'", str44, "0/-1");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction47);
        org.junit.Assert.assertNotNull(aDTFraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-0.0f) + "'", float57 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0/1" + "'", str66, "0/1");
        org.junit.Assert.assertNotNull(aDTFraction67);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test485");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        boolean boolean12 = aDTFraction8.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction8.times((int) (byte) 100);
        float float15 = aDTFraction8.value();
        boolean boolean16 = aDTFraction2.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float26 = aDTFraction25.value();
        com.thealgorithms.maths.ADTFraction aDTFraction27 = aDTFraction22.plus(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction19.times(aDTFraction25);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int32 = aDTFraction31.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction19.times(aDTFraction31);
        int int34 = aDTFraction19.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float41 = aDTFraction40.value();
        com.thealgorithms.maths.ADTFraction aDTFraction42 = aDTFraction37.plus(aDTFraction40);
        boolean boolean44 = aDTFraction40.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction40.times((int) (byte) 100);
        java.lang.String str47 = aDTFraction40.toString();
        int int48 = aDTFraction40.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction50 = aDTFraction40.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction51 = aDTFraction19.plus(aDTFraction50);
        com.thealgorithms.maths.ADTFraction aDTFraction54 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float61 = aDTFraction60.value();
        com.thealgorithms.maths.ADTFraction aDTFraction62 = aDTFraction57.plus(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction54.times(aDTFraction60);
        com.thealgorithms.maths.ADTFraction aDTFraction66 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float67 = aDTFraction66.value();
        boolean boolean68 = aDTFraction60.equals((java.lang.Object) aDTFraction66);
        java.lang.String str69 = aDTFraction66.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction70 = aDTFraction51.plus(aDTFraction66);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = aDTFraction51.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction72 = aDTFraction8.times(aDTFraction51);
        int int73 = aDTFraction51.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction74 = aDTFraction51.reciprocal();
        float float75 = aDTFraction51.value();
        java.lang.String str76 = aDTFraction51.toString();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + (-0.0f) + "'", float26 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction27);
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + (-0.0f) + "'", float41 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0/-1" + "'", str47, "0/-1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction50);
        org.junit.Assert.assertNotNull(aDTFraction51);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + (-0.0f) + "'", float61 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction62);
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + (-0.0f) + "'", float67 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0/-1" + "'", str69, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction70);
        org.junit.Assert.assertNotNull(aDTFraction71);
        org.junit.Assert.assertNotNull(aDTFraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction74);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-1.0f) + "'", float75 == (-1.0f));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1/-1" + "'", str76, "1/-1");
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test486");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, 100);
        java.lang.String str3 = aDTFraction2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1/100" + "'", str3, "-1/100");
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test487");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((int) (short) -1, (int) (byte) 10);
        java.lang.String str26 = aDTFraction25.toString();
        boolean boolean27 = aDTFraction11.equals((java.lang.Object) aDTFraction25);
        java.lang.String str28 = aDTFraction11.toString();
        int int29 = aDTFraction11.numerator();
        int int30 = aDTFraction11.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction36 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction39 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float40 = aDTFraction39.value();
        com.thealgorithms.maths.ADTFraction aDTFraction41 = aDTFraction36.plus(aDTFraction39);
        boolean boolean43 = aDTFraction39.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction39.times((int) (byte) 100);
        float float46 = aDTFraction39.value();
        boolean boolean47 = aDTFraction33.equals((java.lang.Object) aDTFraction39);
        com.thealgorithms.maths.ADTFraction aDTFraction50 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction53 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float54 = aDTFraction53.value();
        com.thealgorithms.maths.ADTFraction aDTFraction55 = aDTFraction50.plus(aDTFraction53);
        boolean boolean57 = aDTFraction53.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = aDTFraction53.times((int) (byte) 100);
        java.lang.String str60 = aDTFraction53.toString();
        int int61 = aDTFraction53.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction63 = aDTFraction53.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction64 = aDTFraction39.times(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction11.plus(aDTFraction63);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.maths.ADTFraction aDTFraction66 = aDTFraction11.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Denominator cannot be 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1/10" + "'", str26, "-1/10");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0/-1" + "'", str28, "0/-1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-0.0f) + "'", float40 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-0.0f) + "'", float46 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-0.0f) + "'", float54 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(aDTFraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0/-1" + "'", str60, "0/-1");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction63);
        org.junit.Assert.assertNotNull(aDTFraction64);
        org.junit.Assert.assertNotNull(aDTFraction65);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test488");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction3.times(100);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float16 = aDTFraction15.value();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction12.plus(aDTFraction15);
        int int18 = aDTFraction12.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction8.plus(aDTFraction12);
        com.thealgorithms.maths.ADTFraction aDTFraction22 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction25 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction28 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction31 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float32 = aDTFraction31.value();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction28.plus(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction25.times(aDTFraction31);
        int int35 = aDTFraction31.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction36 = aDTFraction22.times(aDTFraction31);
        com.thealgorithms.maths.ADTFraction aDTFraction38 = aDTFraction36.times(0);
        int int39 = aDTFraction38.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction40 = aDTFraction19.times(aDTFraction38);
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.0f) + "'", float16 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(aDTFraction19);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + (-0.0f) + "'", float32 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(aDTFraction36);
        org.junit.Assert.assertNotNull(aDTFraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(aDTFraction40);
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test489");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        int int8 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction12 = aDTFraction2.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction15 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction18 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float19 = aDTFraction18.value();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = aDTFraction15.plus(aDTFraction18);
        int int21 = aDTFraction15.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction22 = aDTFraction11.times(aDTFraction15);
        java.lang.String str23 = aDTFraction15.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction15.times((int) (byte) -1);
        int int26 = aDTFraction25.numerator();
        java.lang.Class<?> wildcardClass27 = aDTFraction25.getClass();
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(aDTFraction12);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + (-0.0f) + "'", float19 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(aDTFraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0/-1" + "'", str23, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test490");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        int int4 = aDTFraction3.denominator();
        int int5 = aDTFraction3.denominator();
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test491");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int15 = aDTFraction14.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction16 = aDTFraction2.times(aDTFraction14);
        int int17 = aDTFraction2.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float24 = aDTFraction23.value();
        com.thealgorithms.maths.ADTFraction aDTFraction25 = aDTFraction20.plus(aDTFraction23);
        boolean boolean27 = aDTFraction23.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction23.times((int) (byte) 100);
        java.lang.String str30 = aDTFraction23.toString();
        int int31 = aDTFraction23.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction33 = aDTFraction23.times((int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction34 = aDTFraction2.plus(aDTFraction33);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction40 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction43 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float44 = aDTFraction43.value();
        com.thealgorithms.maths.ADTFraction aDTFraction45 = aDTFraction40.plus(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction46 = aDTFraction37.times(aDTFraction43);
        com.thealgorithms.maths.ADTFraction aDTFraction49 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float50 = aDTFraction49.value();
        boolean boolean51 = aDTFraction43.equals((java.lang.Object) aDTFraction49);
        java.lang.String str52 = aDTFraction49.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction34.plus(aDTFraction49);
        com.thealgorithms.maths.ADTFraction aDTFraction56 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction59 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = aDTFraction56.plus(aDTFraction59);
        com.thealgorithms.maths.ADTFraction aDTFraction61 = aDTFraction49.plus(aDTFraction56);
        java.lang.Class<?> wildcardClass62 = aDTFraction61.getClass();
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(aDTFraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-0.0f) + "'", float24 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0/-1" + "'", str30, "0/-1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction33);
        org.junit.Assert.assertNotNull(aDTFraction34);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + (-0.0f) + "'", float44 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction45);
        org.junit.Assert.assertNotNull(aDTFraction46);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + (-0.0f) + "'", float50 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0/-1" + "'", str52, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertNotNull(aDTFraction60);
        org.junit.Assert.assertNotNull(aDTFraction61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test492");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float9 = aDTFraction8.value();
        com.thealgorithms.maths.ADTFraction aDTFraction10 = aDTFraction5.plus(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = aDTFraction2.times(aDTFraction8);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float15 = aDTFraction14.value();
        boolean boolean16 = aDTFraction8.equals((java.lang.Object) aDTFraction14);
        java.lang.String str17 = aDTFraction14.toString();
        java.lang.String str18 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction21 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float22 = aDTFraction21.value();
        com.thealgorithms.maths.ADTFraction aDTFraction23 = aDTFraction14.times(aDTFraction21);
        java.lang.String str24 = aDTFraction14.toString();
        com.thealgorithms.maths.ADTFraction aDTFraction26 = aDTFraction14.times((int) '#');
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction14.times((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + (-0.0f) + "'", float9 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction10);
        org.junit.Assert.assertNotNull(aDTFraction11);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-0.0f) + "'", float15 == (-0.0f));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0/-1" + "'", str17, "0/-1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0/-1" + "'", str18, "0/-1");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + (-0.0f) + "'", float22 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0/-1" + "'", str24, "0/-1");
        org.junit.Assert.assertNotNull(aDTFraction26);
        org.junit.Assert.assertNotNull(aDTFraction28);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test493");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        int int86 = aDTFraction84.denominator();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test494");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float6 = aDTFraction5.value();
        com.thealgorithms.maths.ADTFraction aDTFraction7 = aDTFraction2.plus(aDTFraction5);
        boolean boolean9 = aDTFraction5.equals((java.lang.Object) ' ');
        boolean boolean11 = aDTFraction5.equals((java.lang.Object) "");
        int int12 = aDTFraction5.denominator();
        java.lang.String str13 = aDTFraction5.toString();
        java.lang.String str14 = aDTFraction5.toString();
        int int15 = aDTFraction5.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction17 = aDTFraction5.times(52);
        com.thealgorithms.maths.ADTFraction aDTFraction19 = aDTFraction5.times((int) '#');
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + (-0.0f) + "'", float6 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0/-1" + "'", str13, "0/-1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0/-1" + "'", str14, "0/-1");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction17);
        org.junit.Assert.assertNotNull(aDTFraction19);
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test495");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(100, (int) (short) 100);
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction11 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float12 = aDTFraction11.value();
        com.thealgorithms.maths.ADTFraction aDTFraction13 = aDTFraction8.plus(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction14 = aDTFraction5.times(aDTFraction11);
        com.thealgorithms.maths.ADTFraction aDTFraction17 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction20 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction23 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction26 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float27 = aDTFraction26.value();
        com.thealgorithms.maths.ADTFraction aDTFraction28 = aDTFraction23.plus(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction29 = aDTFraction20.times(aDTFraction26);
        int int30 = aDTFraction26.numerator();
        com.thealgorithms.maths.ADTFraction aDTFraction31 = aDTFraction17.times(aDTFraction26);
        com.thealgorithms.maths.ADTFraction aDTFraction34 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction37 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float38 = aDTFraction37.value();
        com.thealgorithms.maths.ADTFraction aDTFraction39 = aDTFraction34.plus(aDTFraction37);
        java.lang.Class<?> wildcardClass40 = aDTFraction37.getClass();
        boolean boolean41 = aDTFraction17.equals((java.lang.Object) aDTFraction37);
        com.thealgorithms.maths.ADTFraction aDTFraction44 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction47 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float48 = aDTFraction47.value();
        com.thealgorithms.maths.ADTFraction aDTFraction49 = aDTFraction44.plus(aDTFraction47);
        boolean boolean51 = aDTFraction47.equals((java.lang.Object) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction53 = aDTFraction47.times((int) (byte) 100);
        java.lang.String str54 = aDTFraction47.toString();
        int int55 = aDTFraction47.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction56 = aDTFraction37.plus(aDTFraction47);
        com.thealgorithms.maths.ADTFraction aDTFraction57 = aDTFraction5.times(aDTFraction56);
        com.thealgorithms.maths.ADTFraction aDTFraction60 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction63 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float64 = aDTFraction63.value();
        com.thealgorithms.maths.ADTFraction aDTFraction65 = aDTFraction60.plus(aDTFraction63);
        com.thealgorithms.maths.ADTFraction aDTFraction68 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction71 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        com.thealgorithms.maths.ADTFraction aDTFraction74 = new com.thealgorithms.maths.ADTFraction(0, (int) (short) -1);
        float float75 = aDTFraction74.value();
        com.thealgorithms.maths.ADTFraction aDTFraction76 = aDTFraction71.plus(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction77 = aDTFraction68.times(aDTFraction74);
        com.thealgorithms.maths.ADTFraction aDTFraction80 = new com.thealgorithms.maths.ADTFraction((int) (short) 100, 100);
        int int81 = aDTFraction80.denominator();
        com.thealgorithms.maths.ADTFraction aDTFraction82 = aDTFraction68.times(aDTFraction80);
        com.thealgorithms.maths.ADTFraction aDTFraction83 = aDTFraction65.times(aDTFraction82);
        com.thealgorithms.maths.ADTFraction aDTFraction84 = aDTFraction57.plus(aDTFraction65);
        com.thealgorithms.maths.ADTFraction aDTFraction85 = aDTFraction2.times(aDTFraction84);
        com.thealgorithms.maths.ADTFraction aDTFraction88 = new com.thealgorithms.maths.ADTFraction(10, (int) ' ');
        com.thealgorithms.maths.ADTFraction aDTFraction89 = aDTFraction88.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction90 = aDTFraction2.times(aDTFraction88);
        int int91 = aDTFraction88.numerator();
        java.lang.String str92 = aDTFraction88.toString();
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + (-0.0f) + "'", float12 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction13);
        org.junit.Assert.assertNotNull(aDTFraction14);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.0f) + "'", float27 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction28);
        org.junit.Assert.assertNotNull(aDTFraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(aDTFraction31);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + (-0.0f) + "'", float38 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + (-0.0f) + "'", float48 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(aDTFraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0/-1" + "'", str54, "0/-1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(aDTFraction56);
        org.junit.Assert.assertNotNull(aDTFraction57);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + (-0.0f) + "'", float64 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction65);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-0.0f) + "'", float75 == (-0.0f));
        org.junit.Assert.assertNotNull(aDTFraction76);
        org.junit.Assert.assertNotNull(aDTFraction77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(aDTFraction82);
        org.junit.Assert.assertNotNull(aDTFraction83);
        org.junit.Assert.assertNotNull(aDTFraction84);
        org.junit.Assert.assertNotNull(aDTFraction85);
        org.junit.Assert.assertNotNull(aDTFraction89);
        org.junit.Assert.assertNotNull(aDTFraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "10/32" + "'", str92, "10/32");
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test496");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction(52, (-1));
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test497");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        float float7 = aDTFraction6.value();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 0.0f + "'", float7 == 0.0f);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test498");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) (byte) -1, (int) (byte) 1);
        com.thealgorithms.maths.ADTFraction aDTFraction3 = aDTFraction2.reciprocal();
        com.thealgorithms.maths.ADTFraction aDTFraction5 = aDTFraction2.times(0);
        org.junit.Assert.assertNotNull(aDTFraction3);
        org.junit.Assert.assertNotNull(aDTFraction5);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test499");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', 10);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test500");
        com.thealgorithms.maths.ADTFraction aDTFraction2 = new com.thealgorithms.maths.ADTFraction((int) '4', (int) '4');
        com.thealgorithms.maths.ADTFraction aDTFraction5 = new com.thealgorithms.maths.ADTFraction((-1), 1);
        com.thealgorithms.maths.ADTFraction aDTFraction6 = aDTFraction2.plus(aDTFraction5);
        com.thealgorithms.maths.ADTFraction aDTFraction8 = aDTFraction2.times((-100));
        java.lang.Class<?> wildcardClass9 = aDTFraction8.getClass();
        org.junit.Assert.assertNotNull(aDTFraction6);
        org.junit.Assert.assertNotNull(aDTFraction8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }
}


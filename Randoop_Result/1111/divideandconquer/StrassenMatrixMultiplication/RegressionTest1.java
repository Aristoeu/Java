package divideandconquer.StrassenMatrixMultiplication;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test501");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        int[] intArray54 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray69 = new int[][] { intArray54, intArray61, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray20, intArray69);
        int[][] intArray71 = null;
        int[] intArray73 = new int[] { (-1) };
        int[][] intArray74 = new int[][] { intArray73 };
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray71, intArray74, (int) '4', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1]");
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test502");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.add(intArray78, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (short) 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test503");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray81, intArray84);
        int[] intArray86 = new int[] {};
        int[] intArray87 = new int[] {};
        int[][] intArray88 = new int[][] { intArray86, intArray87 };
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray90 = strassenMatrixMultiplication0.add(intArray88, intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test504");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray3 = new int[] { (byte) 0, 'a' };
        int[][] intArray4 = new int[][] { intArray3 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        strassenMatrixMultiplication6.split(intArray7, intArray85, (int) (short) 10, (int) (byte) 1);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication5.add(intArray85, intArray89);
        strassenMatrixMultiplication0.split(intArray4, intArray90, (int) '4', (int) (short) 10);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.multiply(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 97]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test505");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[] intArray81 = new int[] { (byte) 10, 'a', (byte) 1, ' ' };
        int[][] intArray82 = new int[][] { intArray81 };
        int[] intArray84 = new int[] { (short) 0 };
        int[][] intArray85 = new int[][] { intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication2.sub(intArray82, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray86, intArray89, (int) (short) 0, (int) '4');
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray89, intArray96, 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10, 97, 1, 32]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test506");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        java.lang.Class<?> wildcardClass60 = intArray59.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test507");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray83, intArray86);
        strassenMatrixMultiplication0.split(intArray1, intArray87, (int) (short) 0, 0);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray91, intArray92, (int) (byte) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test508");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[][] intArray60 = null;
        int[][] intArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray60, intArray61, (int) (short) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
    }

    @Test
    public void test509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test509");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        java.lang.Class<?> wildcardClass60 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test510");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication6.sub(intArray84, intArray85);
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray85, intArray87, (int) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test511");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray67, intArray70, 0, (int) (byte) 1);
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray70, intArray77, 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test512");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray29 = new int[][] { intArray7, intArray14, intArray21, intArray28 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray29, intArray75);
        int[] intArray80 = new int[] { (byte) 10, (short) 1 };
        int[] intArray83 = new int[] { (byte) 10, (short) 1 };
        int[] intArray86 = new int[] { (byte) 10, (short) 1 };
        int[][] intArray87 = new int[][] { intArray80, intArray83, intArray86 };
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray87, intArray88, (int) (byte) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 1]");
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test513");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray76, intArray77, (int) (short) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test514");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray14, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray68, intArray69, (int) (short) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test515");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray64 = new int[] { (short) 0 };
        int[] intArray66 = new int[] { (short) 0 };
        int[][] intArray67 = new int[][] { intArray64, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication8.multiply(intArray14, intArray67);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        strassenMatrixMultiplication2.split(intArray68, intArray71, 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.multiply(intArray1, intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test516");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray35 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray36 = new int[][] { intArray14, intArray21, intArray28, intArray35 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication37 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray55 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray56 = new int[][] { intArray43, intArray49, intArray55 };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray81 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray82 = new int[][] { intArray61, intArray66, intArray71, intArray76, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication37.multiply(intArray56, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication7.sub(intArray36, intArray82);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray84, (int) (short) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test517");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[] intArray60 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray67 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray74 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray60, intArray67, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray26, intArray75);
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.add(intArray76, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test518");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray69, intArray75, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication9.add(intArray63, intArray82);
        int[][] intArray84 = new int[][] {};
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication9.add(intArray84, intArray85);
        strassenMatrixMultiplication7.split(intArray8, intArray86, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray86, (int) '#', 0);
        java.lang.Class<?> wildcardClass93 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test519");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray21 = new int[][] { intArray8, intArray14, intArray20 };
        int[] intArray26 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray47 = new int[][] { intArray26, intArray31, intArray36, intArray41, intArray46 };
        int[][] intArray48 = strassenMatrixMultiplication2.multiply(intArray21, intArray47);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication49 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray55 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray61 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray67 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray68 = new int[][] { intArray55, intArray61, intArray67 };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray88 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray93 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray94 = new int[][] { intArray73, intArray78, intArray83, intArray88, intArray93 };
        int[][] intArray95 = strassenMatrixMultiplication49.multiply(intArray68, intArray94);
        int[][] intArray96 = strassenMatrixMultiplication1.sub(intArray21, intArray68);
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.add(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test520");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray69, intArray75, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication9.add(intArray63, intArray82);
        int[][] intArray84 = new int[][] {};
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication9.add(intArray84, intArray85);
        strassenMatrixMultiplication7.split(intArray8, intArray86, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray86, (int) '#', 0);
        java.lang.Class<?> wildcardClass93 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test521");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray33);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray62 = strassenMatrixMultiplication0.sub(intArray1, intArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"A\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
    }

    @Test
    public void test522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test522");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray59 = new int[] { (short) 0 };
        int[] intArray61 = new int[] { (short) 0 };
        int[][] intArray62 = new int[][] { intArray59, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication3.multiply(intArray9, intArray62);
        int[] intArray66 = new int[] { 'a', (short) 1 };
        int[] intArray69 = new int[] { 'a', (short) 1 };
        int[] intArray72 = new int[] { 'a', (short) 1 };
        int[] intArray75 = new int[] { 'a', (short) 1 };
        int[] intArray78 = new int[] { 'a', (short) 1 };
        int[] intArray81 = new int[] { 'a', (short) 1 };
        int[][] intArray82 = new int[][] { intArray66, intArray69, intArray72, intArray75, intArray78, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication2.add(intArray9, intArray82);
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray9, intArray84, (-1), (-1));
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray9, intArray88, (int) ' ', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test523");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        java.lang.Class<?> wildcardClass60 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test524");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        strassenMatrixMultiplication8.split(intArray9, intArray87, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication1.split(intArray7, intArray87, (int) '#', 0);
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray7, intArray94, (int) (short) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test525");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray56 = new int[] { (short) 0 };
        int[] intArray58 = new int[] { (short) 0 };
        int[][] intArray59 = new int[][] { intArray56, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication0.multiply(intArray6, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray61, intArray62, (int) (short) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
    }

    @Test
    public void test526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test526");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray66 = new int[] { (short) 0 };
        int[] intArray68 = new int[] { (short) 0 };
        int[][] intArray69 = new int[][] { intArray66, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication10.multiply(intArray16, intArray69);
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[] intArray82 = new int[] { 'a', (short) 1 };
        int[] intArray85 = new int[] { 'a', (short) 1 };
        int[] intArray88 = new int[] { 'a', (short) 1 };
        int[][] intArray89 = new int[][] { intArray73, intArray76, intArray79, intArray82, intArray85, intArray88 };
        int[][] intArray90 = strassenMatrixMultiplication9.add(intArray16, intArray89);
        int[][] intArray91 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray16, intArray91, (-1), (-1));
        int[][] intArray95 = strassenMatrixMultiplication1.sub(intArray7, intArray91);
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication0.sub(intArray7, intArray96);
        java.lang.Class<?> wildcardClass98 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test527");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[][] intArray12 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[] intArray67 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray74 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray81 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray67, intArray74, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication13.sub(intArray33, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication6.add(intArray12, intArray33);
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.add(intArray33, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test528");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray66, intArray70, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication1.add(intArray79, intArray83);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray83, intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"A\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test529");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray66 = new int[] { (short) 0 };
        int[] intArray68 = new int[] { (short) 0 };
        int[][] intArray69 = new int[][] { intArray66, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication10.multiply(intArray16, intArray69);
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[] intArray82 = new int[] { 'a', (short) 1 };
        int[] intArray85 = new int[] { 'a', (short) 1 };
        int[] intArray88 = new int[] { 'a', (short) 1 };
        int[][] intArray89 = new int[][] { intArray73, intArray76, intArray79, intArray82, intArray85, intArray88 };
        int[][] intArray90 = strassenMatrixMultiplication9.add(intArray16, intArray89);
        int[][] intArray91 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray16, intArray91, (-1), (-1));
        int[][] intArray95 = strassenMatrixMultiplication1.sub(intArray7, intArray91);
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication0.sub(intArray7, intArray96);
        java.lang.Class<?> wildcardClass98 = intArray7.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test530");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray66 = new int[] { (short) 0 };
        int[] intArray68 = new int[] { (short) 0 };
        int[][] intArray69 = new int[][] { intArray66, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication10.multiply(intArray16, intArray69);
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[] intArray82 = new int[] { 'a', (short) 1 };
        int[] intArray85 = new int[] { 'a', (short) 1 };
        int[] intArray88 = new int[] { 'a', (short) 1 };
        int[][] intArray89 = new int[][] { intArray73, intArray76, intArray79, intArray82, intArray85, intArray88 };
        int[][] intArray90 = strassenMatrixMultiplication9.add(intArray16, intArray89);
        int[][] intArray91 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray16, intArray91, (-1), (-1));
        int[][] intArray95 = strassenMatrixMultiplication1.sub(intArray7, intArray91);
        int[][] intArray96 = null;
        strassenMatrixMultiplication0.join(intArray7, intArray96, 100, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test531");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray17 = new int[][] { intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication12.sub(intArray17, intArray63);
        int[] intArray67 = new int[] { (short) 0 };
        int[] intArray69 = new int[] { (short) 0 };
        int[][] intArray70 = new int[][] { intArray67, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication11.multiply(intArray17, intArray70);
        int[] intArray74 = new int[] { 'a', (short) 1 };
        int[] intArray77 = new int[] { 'a', (short) 1 };
        int[] intArray80 = new int[] { 'a', (short) 1 };
        int[] intArray83 = new int[] { 'a', (short) 1 };
        int[] intArray86 = new int[] { 'a', (short) 1 };
        int[] intArray89 = new int[] { 'a', (short) 1 };
        int[][] intArray90 = new int[][] { intArray74, intArray77, intArray80, intArray83, intArray86, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication10.add(intArray17, intArray90);
        int[][] intArray92 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray17, intArray92, (-1), (-1));
        int[][] intArray96 = strassenMatrixMultiplication2.sub(intArray8, intArray92);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.multiply(intArray1, intArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test532");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray1, intArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"A\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test533");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.sub(intArray87, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray87, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.add(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test534");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray57 = new int[] { (short) 0 };
        int[] intArray59 = new int[] { (short) 0 };
        int[][] intArray60 = new int[][] { intArray57, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication1.multiply(intArray7, intArray60);
        int[][] intArray62 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray60, intArray62, (int) (byte) -1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
    }

    @Test
    public void test535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test535");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        strassenMatrixMultiplication8.split(intArray9, intArray87, (int) (short) 10, (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray87, intArray91);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.multiply(intArray6, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test536");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray66 = new int[] { (short) 0 };
        int[] intArray68 = new int[] { (short) 0 };
        int[][] intArray69 = new int[][] { intArray66, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication10.multiply(intArray16, intArray69);
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[] intArray82 = new int[] { 'a', (short) 1 };
        int[] intArray85 = new int[] { 'a', (short) 1 };
        int[] intArray88 = new int[] { 'a', (short) 1 };
        int[][] intArray89 = new int[][] { intArray73, intArray76, intArray79, intArray82, intArray85, intArray88 };
        int[][] intArray90 = strassenMatrixMultiplication9.add(intArray16, intArray89);
        int[][] intArray91 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray16, intArray91, (-1), (-1));
        int[][] intArray95 = strassenMatrixMultiplication1.sub(intArray7, intArray91);
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication0.sub(intArray7, intArray96);
        java.lang.Class<?> wildcardClass98 = intArray97.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test537");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray81, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray85, intArray89, 1, (int) (byte) 100);
        java.lang.Class<?> wildcardClass96 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test538");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication0.sub(intArray77, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray83, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"A\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test539");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray81, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray85, intArray89, 1, (int) (byte) 100);
        java.lang.Class<?> wildcardClass96 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test540");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray19 = new int[][] { intArray6, intArray12, intArray18 };
        int[] intArray24 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray29 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray45 = new int[][] { intArray24, intArray29, intArray34, intArray39, intArray44 };
        int[][] intArray46 = strassenMatrixMultiplication0.multiply(intArray19, intArray45);
        int[][] intArray47 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication48 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray60 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray66 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray67 = new int[][] { intArray54, intArray60, intArray66 };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray82 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray87 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray92 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray93 = new int[][] { intArray72, intArray77, intArray82, intArray87, intArray92 };
        int[][] intArray94 = strassenMatrixMultiplication48.multiply(intArray67, intArray93);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.sub(intArray47, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"A\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test541");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        strassenMatrixMultiplication0.join(intArray81, intArray84, 1, (int) (byte) -1);
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray88, intArray89, (int) '4', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test542");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[] intArray87 = new int[] { (byte) 1, 1, 1, 100, '#' };
        int[][] intArray88 = new int[][] { intArray87 };
        int[][] intArray89 = strassenMatrixMultiplication6.multiply(intArray61, intArray88);
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray61, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from object array because \"B\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1, 1, 1, 100, 35]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test543");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray57 = new int[] { (short) 0 };
        int[] intArray59 = new int[] { (short) 0 };
        int[][] intArray60 = new int[][] { intArray57, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication1.multiply(intArray7, intArray60);
        int[] intArray64 = new int[] { 'a', (short) 1 };
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[][] intArray80 = new int[][] { intArray64, intArray67, intArray70, intArray73, intArray76, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray7, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray83, intArray88, (-1), 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test544");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray71, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"A\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test545");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray83, intArray86);
        strassenMatrixMultiplication0.split(intArray1, intArray87, (int) (short) 0, 0);
        int[][] intArray91 = new int[][] {};
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, (int) (byte) 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test546");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray56 = new int[] { (short) 0 };
        int[] intArray58 = new int[] { (short) 0 };
        int[][] intArray59 = new int[][] { intArray56, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication0.multiply(intArray6, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray63 = strassenMatrixMultiplication0.add(intArray61, intArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
    }

    @Test
    public void test547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test547");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
        java.lang.Class<?> wildcardClass84 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test548");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray59 = new int[] { (short) 0 };
        int[] intArray61 = new int[] { (short) 0 };
        int[][] intArray62 = new int[][] { intArray59, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication3.multiply(intArray9, intArray62);
        int[] intArray66 = new int[] { 'a', (short) 1 };
        int[] intArray69 = new int[] { 'a', (short) 1 };
        int[] intArray72 = new int[] { 'a', (short) 1 };
        int[] intArray75 = new int[] { 'a', (short) 1 };
        int[] intArray78 = new int[] { 'a', (short) 1 };
        int[] intArray81 = new int[] { 'a', (short) 1 };
        int[][] intArray82 = new int[][] { intArray66, intArray69, intArray72, intArray75, intArray78, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication2.add(intArray9, intArray82);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray84 = strassenMatrixMultiplication0.sub(intArray1, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"A\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test549");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
        java.lang.Class<?> wildcardClass84 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test550");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray40);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication3.sub(intArray17, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication2.add(intArray70, intArray71);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray71, (int) 'a', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test551");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray84, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"A\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test552");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
        java.lang.Class<?> wildcardClass84 = intArray83.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test553");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray81, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray88, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) (short) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test554");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[] intArray88 = new int[] { (byte) 1, 1, 1, 100, '#' };
        int[][] intArray89 = new int[][] { intArray88 };
        int[][] intArray90 = strassenMatrixMultiplication7.multiply(intArray62, intArray89);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.multiply(intArray6, intArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, 1, 1, 100, 35]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test555");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray65);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray67 = strassenMatrixMultiplication0.multiply(intArray6, intArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test556");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray69, intArray75, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication9.add(intArray63, intArray82);
        int[][] intArray84 = new int[][] {};
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication9.add(intArray84, intArray85);
        strassenMatrixMultiplication7.split(intArray8, intArray86, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray86, (int) '#', 0);
        int[][] intArray93 = null;
        int[][] intArray94 = new int[][] {};
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.multiply(intArray93, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test557");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication74 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray75 = null;
        int[][] intArray76 = new int[][] {};
        strassenMatrixMultiplication74.split(intArray75, intArray76, (int) '4', (-1));
        strassenMatrixMultiplication7.split(intArray73, intArray76, 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray76, 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test558");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray3, intArray75);
        java.lang.Class<?> wildcardClass79 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test559");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray3, intArray75);
        java.lang.Class<?> wildcardClass79 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test560");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray70);
        strassenMatrixMultiplication0.split(intArray8, intArray20, (int) 'a', (int) (byte) 1);
        java.lang.Class<?> wildcardClass75 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test561");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray3, intArray75);
        java.lang.Class<?> wildcardClass79 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test562");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray59 = new int[] { (short) 0 };
        int[] intArray61 = new int[] { (short) 0 };
        int[][] intArray62 = new int[][] { intArray59, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication3.multiply(intArray9, intArray62);
        int[] intArray66 = new int[] { 'a', (short) 1 };
        int[] intArray69 = new int[] { 'a', (short) 1 };
        int[] intArray72 = new int[] { 'a', (short) 1 };
        int[] intArray75 = new int[] { 'a', (short) 1 };
        int[] intArray78 = new int[] { 'a', (short) 1 };
        int[] intArray81 = new int[] { 'a', (short) 1 };
        int[][] intArray82 = new int[][] { intArray66, intArray69, intArray72, intArray75, intArray78, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication2.add(intArray9, intArray82);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray84 = strassenMatrixMultiplication0.multiply(intArray1, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test563");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray3 = new int[] { (byte) 0, 'a' };
        int[][] intArray4 = new int[][] { intArray3 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        strassenMatrixMultiplication6.split(intArray7, intArray85, (int) (short) 10, (int) (byte) 1);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication5.add(intArray85, intArray89);
        strassenMatrixMultiplication0.split(intArray4, intArray90, (int) '4', (int) (short) 10);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"A\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 97]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test564");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray3 = new int[] { (byte) 0, 'a' };
        int[][] intArray4 = new int[][] { intArray3 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        strassenMatrixMultiplication6.split(intArray7, intArray85, (int) (short) 10, (int) (byte) 1);
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication5.add(intArray85, intArray89);
        strassenMatrixMultiplication0.split(intArray4, intArray90, (int) '4', (int) (short) 10);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray94, intArray95, (int) ' ', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 97]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test565");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication55 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray56 = null;
        int[][] intArray57 = new int[][] {};
        strassenMatrixMultiplication55.split(intArray56, intArray57, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray61 = strassenMatrixMultiplication0.sub(intArray52, intArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray57);
    }

    @Test
    public void test566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test566");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[] intArray79 = new int[] { (byte) 10, 'a', (byte) 1, ' ' };
        int[][] intArray80 = new int[][] { intArray79 };
        int[] intArray82 = new int[] { (short) 0 };
        int[][] intArray83 = new int[][] { intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication0.sub(intArray80, intArray83);
        int[][] intArray85 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray85, intArray88, (int) (short) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 97, 1, 32]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test567");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray70);
        strassenMatrixMultiplication0.split(intArray8, intArray20, (int) 'a', (int) (byte) 1);
        java.lang.Class<?> wildcardClass75 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test568");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray70);
        strassenMatrixMultiplication0.split(intArray8, intArray20, (int) 'a', (int) (byte) 1);
        java.lang.Class<?> wildcardClass75 = intArray20.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test569");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.multiply(intArray72, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test570");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray4 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray5 = new int[][] { intArray4 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[][] intArray53 = strassenMatrixMultiplication0.sub(intArray5, intArray51);
        int[][] intArray54 = null;
        int[][] intArray55 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray56 = strassenMatrixMultiplication0.sub(intArray54, intArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"A\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
    }

    @Test
    public void test571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test571");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        strassenMatrixMultiplication0.join(intArray3, intArray67, (int) (short) -1, (int) '#');
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray71, intArray74, (int) (short) 100, (int) (byte) 100);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray81, intArray82, 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test572");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        int[][] intArray67 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray66, intArray67, (int) (byte) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test573");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[] intArray79 = new int[] { (byte) 10, 'a', (byte) 1, ' ' };
        int[][] intArray80 = new int[][] { intArray79 };
        int[] intArray82 = new int[] { (short) 0 };
        int[][] intArray83 = new int[][] { intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication0.sub(intArray80, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray87 = strassenMatrixMultiplication0.add(intArray85, intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 97, 1, 32]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test574");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray35 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray36 = new int[][] { intArray14, intArray21, intArray28, intArray35 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication37 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray55 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray56 = new int[][] { intArray43, intArray49, intArray55 };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray81 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray82 = new int[][] { intArray61, intArray66, intArray71, intArray76, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication37.multiply(intArray56, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication7.sub(intArray36, intArray82);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray6, intArray84, 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test575");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray56 = new int[] { (short) 0 };
        int[] intArray58 = new int[] { (short) 0 };
        int[][] intArray59 = new int[][] { intArray56, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication0.multiply(intArray6, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray61, intArray62, (int) (short) 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
    }

    @Test
    public void test576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test576");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray3, intArray75);
        java.lang.Class<?> wildcardClass79 = intArray75.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test577");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray43);
        int[][] intArray72 = null;
        int[][] intArray73 = strassenMatrixMultiplication6.sub(intArray20, intArray72);
        int[][] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray20, intArray74, (int) (byte) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test578");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray17 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray18 = new int[][] { intArray12, intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.sub(intArray18, intArray65);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray67 = strassenMatrixMultiplication0.add(intArray6, intArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test579");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray58 = new int[] { (short) 0 };
        int[] intArray60 = new int[] { (short) 0 };
        int[][] intArray61 = new int[][] { intArray58, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication2.multiply(intArray8, intArray61);
        int[] intArray65 = new int[] { 'a', (short) 1 };
        int[] intArray68 = new int[] { 'a', (short) 1 };
        int[] intArray71 = new int[] { 'a', (short) 1 };
        int[] intArray74 = new int[] { 'a', (short) 1 };
        int[] intArray77 = new int[] { 'a', (short) 1 };
        int[] intArray80 = new int[] { 'a', (short) 1 };
        int[][] intArray81 = new int[][] { intArray65, intArray68, intArray71, intArray74, intArray77, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication1.add(intArray8, intArray81);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication83 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray84 = null;
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication83.split(intArray84, intArray85, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.add(intArray8, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test580");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray81, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray85, intArray89, 1, (int) (byte) 100);
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"A\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test581");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        strassenMatrixMultiplication0.split(intArray1, intArray5, (int) '#', (int) (byte) 1);
        java.lang.Class<?> wildcardClass76 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test582");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray69, intArray75, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication9.add(intArray63, intArray82);
        int[][] intArray84 = new int[][] {};
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication9.add(intArray84, intArray85);
        strassenMatrixMultiplication7.split(intArray8, intArray86, (int) (short) 10, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray90 = strassenMatrixMultiplication0.multiply(intArray6, intArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test583");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        strassenMatrixMultiplication0.join(intArray81, intArray84, 1, (int) (byte) -1);
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray90 = strassenMatrixMultiplication0.multiply(intArray88, intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test584");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[][] intArray53 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray54 = strassenMatrixMultiplication0.add(intArray52, intArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
    }

    @Test
    public void test585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test585");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[][] intArray76 = new int[][] {};
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication1.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.sub(intArray78, intArray79);
        int[] intArray82 = new int[] { (byte) -1 };
        int[] intArray84 = new int[] { (byte) -1 };
        int[] intArray86 = new int[] { (byte) -1 };
        int[] intArray88 = new int[] { (byte) -1 };
        int[] intArray90 = new int[] { (byte) -1 };
        int[][] intArray91 = new int[][] { intArray82, intArray84, intArray86, intArray88, intArray90 };
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray91, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from object array because \"B\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1]");
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test586");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[][] intArray75 = new int[][] {};
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.add(intArray75, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray80 = strassenMatrixMultiplication0.sub(intArray78, intArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"A\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test587");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.sub(intArray87, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray87, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"A\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test588");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray17 = new int[][] { intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication12.sub(intArray17, intArray63);
        int[] intArray67 = new int[] { (short) 0 };
        int[] intArray69 = new int[] { (short) 0 };
        int[][] intArray70 = new int[][] { intArray67, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication11.multiply(intArray17, intArray70);
        int[] intArray74 = new int[] { 'a', (short) 1 };
        int[] intArray77 = new int[] { 'a', (short) 1 };
        int[] intArray80 = new int[] { 'a', (short) 1 };
        int[] intArray83 = new int[] { 'a', (short) 1 };
        int[] intArray86 = new int[] { 'a', (short) 1 };
        int[] intArray89 = new int[] { 'a', (short) 1 };
        int[][] intArray90 = new int[][] { intArray74, intArray77, intArray80, intArray83, intArray86, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication10.add(intArray17, intArray90);
        int[][] intArray92 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray17, intArray92, (-1), (-1));
        int[][] intArray96 = strassenMatrixMultiplication2.sub(intArray8, intArray92);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray92, (int) ' ', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test589");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        strassenMatrixMultiplication0.split(intArray1, intArray5, (int) '#', (int) (byte) 1);
        java.lang.Class<?> wildcardClass76 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test590");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        int[][] intArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray8 = strassenMatrixMultiplication0.add(intArray6, intArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
    }

    @Test
    public void test591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test591");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication2.sub(intArray79, intArray83);
        strassenMatrixMultiplication0.split(intArray1, intArray79, (int) '4', (int) '4');
        java.lang.Class<?> wildcardClass88 = intArray79.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test592");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray35 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray36 = new int[][] { intArray14, intArray21, intArray28, intArray35 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication37 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray55 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray56 = new int[][] { intArray43, intArray49, intArray55 };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray81 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray82 = new int[][] { intArray61, intArray66, intArray71, intArray76, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication37.multiply(intArray56, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication7.sub(intArray36, intArray82);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray6, intArray36, (int) '4', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test593");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication2.sub(intArray79, intArray83);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray1, intArray83, (int) (short) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test594");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[][] intArray55 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray56 = strassenMatrixMultiplication0.add(intArray6, intArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
    }

    @Test
    public void test595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test595");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray81, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.multiply(intArray86, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test596");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication2.sub(intArray79, intArray83);
        strassenMatrixMultiplication0.split(intArray1, intArray79, (int) '4', (int) '4');
        java.lang.Class<?> wildcardClass88 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test597");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[] intArray79 = new int[] { (byte) 10, 'a', (byte) 1, ' ' };
        int[][] intArray80 = new int[][] { intArray79 };
        int[] intArray82 = new int[] { (short) 0 };
        int[][] intArray83 = new int[][] { intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication0.sub(intArray80, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray85, intArray86, (int) (short) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 97, 1, 32]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test598");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.sub(intArray82, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        strassenMatrixMultiplication0.join(intArray86, intArray88, 1, (int) (short) 100);
        java.lang.Class<?> wildcardClass96 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test599");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        int[] intArray54 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray69 = new int[][] { intArray54, intArray61, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray20, intArray69);
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.multiply(intArray71, intArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test600");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.sub(intArray21, intArray73);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray75 = strassenMatrixMultiplication0.add(intArray6, intArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test601");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.sub(intArray82, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        strassenMatrixMultiplication0.join(intArray86, intArray88, 1, (int) (short) 100);
        java.lang.Class<?> wildcardClass96 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test602");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray80, (-1), (int) (short) 1);
        java.lang.Class<?> wildcardClass84 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test603");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        int[][] intArray48 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray49 = strassenMatrixMultiplication0.sub(intArray20, intArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from object array because \"B\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
    }

    @Test
    public void test604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test604");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray80, (-1), (int) (short) 1);
        java.lang.Class<?> wildcardClass84 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test605");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray75, intArray76, (int) '4', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from object array because \"P\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test606");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray80, (-1), (int) (short) 1);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray84, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"A\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test607");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        strassenMatrixMultiplication6.split(intArray7, intArray85, (int) (short) 10, (int) (byte) 1);
        int[][] intArray89 = null;
        strassenMatrixMultiplication0.join(intArray85, intArray89, 100, (int) (short) 0);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray93, intArray94, 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test608");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.add(intArray78, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray85, (int) '#', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test609");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray17 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray18 = new int[][] { intArray12, intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.sub(intArray18, intArray65);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray6, intArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"A\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test610");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[] intArray80 = new int[] { (byte) 10, 'a', (byte) 1, ' ' };
        int[][] intArray81 = new int[][] { intArray80 };
        int[] intArray83 = new int[] { (short) 0 };
        int[][] intArray84 = new int[][] { intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication1.sub(intArray81, intArray84);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication86 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        strassenMatrixMultiplication86.split(intArray87, intArray88, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray85, intArray88, (int) (short) 0, (int) '4');
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.add(intArray95, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 97, 1, 32]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test611");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray83, intArray86);
        strassenMatrixMultiplication0.split(intArray1, intArray83, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray91 = new int[][] {};
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, (int) 'a', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test612");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray10 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray11 = new int[][] { intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication6.sub(intArray11, intArray57);
        int[][] intArray60 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray61 = strassenMatrixMultiplication0.multiply(intArray57, intArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
    }

    @Test
    public void test613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test613");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray63 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray63, intArray69, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication3.add(intArray57, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication3.add(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication2.sub(intArray80, intArray81);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.add(intArray1, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test614");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray71, intArray72, 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test615");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray44 = new int[][] { intArray31, intArray37, intArray43 };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray70 = new int[][] { intArray49, intArray54, intArray59, intArray64, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication25.multiply(intArray44, intArray70);
        int[][] intArray72 = strassenMatrixMultiplication13.add(intArray21, intArray44);
        int[][] intArray73 = null;
        int[][] intArray74 = strassenMatrixMultiplication7.sub(intArray21, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication6.add(intArray74, intArray75);
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray75, intArray77, (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test616");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        strassenMatrixMultiplication6.split(intArray7, intArray85, (int) (short) 10, (int) (byte) 1);
        int[][] intArray89 = null;
        strassenMatrixMultiplication0.join(intArray85, intArray89, 100, (int) (short) 0);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray93, intArray94, (int) '4', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test617");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray6 = null;
        int[][] intArray7 = new int[][] {};
        strassenMatrixMultiplication5.split(intArray6, intArray7, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray17 = new int[][] { intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication12.sub(intArray17, intArray63);
        int[] intArray67 = new int[] { (short) 0 };
        int[] intArray69 = new int[] { (short) 0 };
        int[][] intArray70 = new int[][] { intArray67, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication11.multiply(intArray17, intArray70);
        strassenMatrixMultiplication4.join(intArray7, intArray71, (int) (short) -1, (int) '#');
        strassenMatrixMultiplication2.split(intArray3, intArray7, (int) '#', (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray1, intArray3, (int) 'a', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test618");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        strassenMatrixMultiplication0.split(intArray1, intArray79, (int) (short) 10, (int) (byte) 1);
        int[] intArray84 = new int[] { (byte) 0 };
        int[][] intArray85 = new int[][] { intArray84 };
        int[][] intArray86 = new int[][] {};
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray85, intArray86, (int) (byte) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test619");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray69, intArray75, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication9.add(intArray63, intArray82);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication9.sub(intArray86, intArray90);
        strassenMatrixMultiplication7.split(intArray8, intArray86, (int) '4', (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.add(intArray6, intArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test620");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[][] intArray76 = new int[][] {};
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray75, intArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test621");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[] intArray62 = new int[] { (short) 10, '#' };
        int[][] intArray63 = new int[][] { intArray62 };
        int[] intArray65 = new int[] { ' ' };
        int[] intArray67 = new int[] { ' ' };
        int[] intArray69 = new int[] { ' ' };
        int[] intArray71 = new int[] { ' ' };
        int[][] intArray72 = new int[][] { intArray65, intArray67, intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication0.multiply(intArray63, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray76 = strassenMatrixMultiplication0.multiply(intArray74, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[32]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[32]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test622");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray57 = new int[] { (short) 0 };
        int[] intArray59 = new int[] { (short) 0 };
        int[][] intArray60 = new int[][] { intArray57, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication1.multiply(intArray7, intArray60);
        int[] intArray64 = new int[] { 'a', (short) 1 };
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[][] intArray80 = new int[][] { intArray64, intArray67, intArray70, intArray73, intArray76, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray7, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray84 = strassenMatrixMultiplication0.add(intArray82, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test623");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray82, intArray85);
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray85, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"A\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test624");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray81, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.add(intArray86, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test625");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray22 = new int[][] { intArray9, intArray15, intArray21 };
        int[] intArray27 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray48 = new int[][] { intArray27, intArray32, intArray37, intArray42, intArray47 };
        int[][] intArray49 = strassenMatrixMultiplication3.multiply(intArray22, intArray48);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication50 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray56 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray62 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray68 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray69 = new int[][] { intArray56, intArray62, intArray68 };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray84 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray89 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray94 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray95 = new int[][] { intArray74, intArray79, intArray84, intArray89, intArray94 };
        int[][] intArray96 = strassenMatrixMultiplication50.multiply(intArray69, intArray95);
        int[][] intArray97 = strassenMatrixMultiplication2.sub(intArray22, intArray96);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.multiply(intArray1, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test626");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray56 = strassenMatrixMultiplication0.multiply(intArray1, intArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
    }

    @Test
    public void test627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test627");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray71, intArray72, (int) ' ', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test628");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray65, intArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test629");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        int[][] intArray67 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray12, intArray67, (int) (byte) 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from object array because \"P\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test630");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray17 = new int[][] { intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication12.sub(intArray17, intArray63);
        int[] intArray71 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray77 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray83 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray84 = new int[][] { intArray71, intArray77, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication11.add(intArray65, intArray84);
        int[][] intArray86 = new int[][] {};
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication11.add(intArray86, intArray87);
        strassenMatrixMultiplication9.split(intArray10, intArray88, (int) (short) 10, (int) (byte) 1);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication8.add(intArray88, intArray92);
        int[][] intArray94 = null;
        strassenMatrixMultiplication2.join(intArray88, intArray94, (-1), 10);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.add(intArray1, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test631");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray84, intArray87, 1, (int) (byte) 0);
        java.lang.Class<?> wildcardClass94 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test632");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray84, intArray87, 1, (int) (byte) 0);
        java.lang.Class<?> wildcardClass94 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test633");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray63 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray63, intArray69, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication3.add(intArray57, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication3.add(intArray78, intArray79);
        strassenMatrixMultiplication1.split(intArray2, intArray80, (int) (short) 10, (int) (byte) 1);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray86, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test634");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        strassenMatrixMultiplication0.join(intArray3, intArray67, (int) (short) -1, (int) '#');
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray73 = strassenMatrixMultiplication0.add(intArray71, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test635");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray31);
        int[][] intArray60 = null;
        int[] intArray64 = new int[] { (short) 10, (short) 100, 1 };
        int[] intArray68 = new int[] { (short) 10, (short) 100, 1 };
        int[] intArray72 = new int[] { (short) 10, (short) 100, 1 };
        int[] intArray76 = new int[] { (short) 10, (short) 100, 1 };
        int[][] intArray77 = new int[][] { intArray64, intArray68, intArray72, intArray76 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.multiply(intArray60, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 100, 1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 100, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 100, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 100, 1]");
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test636");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray16 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray17 = new int[][] { intArray11, intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.sub(intArray17, intArray64);
        int[] intArray68 = new int[] { (short) 10, '#' };
        int[][] intArray69 = new int[][] { intArray68 };
        int[] intArray71 = new int[] { ' ' };
        int[] intArray73 = new int[] { ' ' };
        int[] intArray75 = new int[] { ' ' };
        int[] intArray77 = new int[] { ' ' };
        int[][] intArray78 = new int[][] { intArray71, intArray73, intArray75, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication6.multiply(intArray69, intArray78);
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray78, intArray80, (int) (byte) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 35]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[32]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[32]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[32]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[32]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test637");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray81, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, (int) (byte) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test638");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray63 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray63, intArray69, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication3.add(intArray57, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication3.add(intArray78, intArray79);
        strassenMatrixMultiplication1.split(intArray2, intArray80, (int) (short) 10, (int) (byte) 1);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[] intArray87 = new int[] {};
        int[][] intArray88 = new int[][] { intArray87 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.add(intArray86, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test639");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray76, intArray77, 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test640");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.sub(intArray23, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.add(intArray76, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication1.sub(intArray4, intArray76);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray76, intArray80, (int) (short) 100, (int) (short) 0);
        java.lang.Class<?> wildcardClass84 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test641");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray58 = new int[] { (short) 0 };
        int[] intArray60 = new int[] { (short) 0 };
        int[][] intArray61 = new int[][] { intArray58, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication2.multiply(intArray8, intArray61);
        int[] intArray65 = new int[] { 'a', (short) 1 };
        int[] intArray68 = new int[] { 'a', (short) 1 };
        int[] intArray71 = new int[] { 'a', (short) 1 };
        int[] intArray74 = new int[] { 'a', (short) 1 };
        int[] intArray77 = new int[] { 'a', (short) 1 };
        int[] intArray80 = new int[] { 'a', (short) 1 };
        int[][] intArray81 = new int[][] { intArray65, intArray68, intArray71, intArray74, intArray77, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication1.add(intArray8, intArray81);
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray8, intArray83, (-1), (-1));
        int[][] intArray87 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication88 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray89 = null;
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication88.split(intArray89, intArray90, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.multiply(intArray87, intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test642");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray60 = new int[] { (short) 0 };
        int[] intArray62 = new int[] { (short) 0 };
        int[][] intArray63 = new int[][] { intArray60, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication4.multiply(intArray10, intArray63);
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[] intArray82 = new int[] { 'a', (short) 1 };
        int[][] intArray83 = new int[][] { intArray67, intArray70, intArray73, intArray76, intArray79, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication3.add(intArray10, intArray83);
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray10, intArray85, (-1), (-1));
        strassenMatrixMultiplication0.split(intArray1, intArray85, (int) (byte) 100, (int) (short) 1);
        java.lang.Class<?> wildcardClass92 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test643");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.sub(intArray23, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.add(intArray76, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication1.sub(intArray4, intArray76);
        int[][] intArray80 = null;
        strassenMatrixMultiplication0.join(intArray76, intArray80, (int) (short) 100, (int) (short) 0);
        java.lang.Class<?> wildcardClass84 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test644");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication2.sub(intArray79, intArray83);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.add(intArray1, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test645");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray60 = new int[] { (short) 0 };
        int[] intArray62 = new int[] { (short) 0 };
        int[][] intArray63 = new int[][] { intArray60, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication4.multiply(intArray10, intArray63);
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[] intArray82 = new int[] { 'a', (short) 1 };
        int[][] intArray83 = new int[][] { intArray67, intArray70, intArray73, intArray76, intArray79, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication3.add(intArray10, intArray83);
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray10, intArray85, (-1), (-1));
        strassenMatrixMultiplication0.split(intArray1, intArray85, (int) (byte) 100, (int) (short) 1);
        java.lang.Class<?> wildcardClass92 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test646");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray75, intArray76, (int) (short) -1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test647");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        strassenMatrixMultiplication0.split(intArray1, intArray79, (int) (short) 10, (int) (byte) 1);
        int[] intArray83 = new int[] {};
        int[] intArray84 = new int[] {};
        int[] intArray85 = new int[] {};
        int[][] intArray86 = new int[][] { intArray83, intArray84, intArray85 };
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray87, (int) (byte) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test648");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray63 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray63, intArray69, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication3.add(intArray57, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication3.add(intArray78, intArray79);
        strassenMatrixMultiplication1.split(intArray2, intArray80, (int) (short) 10, (int) (byte) 1);
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray80, intArray84, (int) '#', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test649");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[] intArray63 = new int[] { 100, '#', 10 };
        int[][] intArray64 = new int[][] { intArray63 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication65 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray66 = null;
        int[][] intArray67 = new int[][] {};
        strassenMatrixMultiplication65.split(intArray66, intArray67, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray64, intArray67, (int) (short) 0, (int) (short) 0);
        java.lang.Class<?> wildcardClass74 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test650");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[] intArray63 = new int[] { 100, '#', 10 };
        int[][] intArray64 = new int[][] { intArray63 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication65 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray66 = null;
        int[][] intArray67 = new int[][] {};
        strassenMatrixMultiplication65.split(intArray66, intArray67, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray64, intArray67, (int) (short) 0, (int) (short) 0);
        java.lang.Class<?> wildcardClass74 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test651");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[] intArray63 = new int[] { 100, '#', 10 };
        int[][] intArray64 = new int[][] { intArray63 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication65 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray66 = null;
        int[][] intArray67 = new int[][] {};
        strassenMatrixMultiplication65.split(intArray66, intArray67, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray64, intArray67, (int) (short) 0, (int) (short) 0);
        java.lang.Class<?> wildcardClass74 = intArray67.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test652");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.add(intArray69, intArray70);
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray73 = strassenMatrixMultiplication0.add(intArray70, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test653");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray15, (int) (byte) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test654");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray66, intArray69, 0, (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.add(intArray76, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test655");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray3, intArray75);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.multiply(intArray79, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test656");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray3 = new int[] { (short) 0, (short) 10 };
        int[] intArray6 = new int[] { (short) 0, (short) 10 };
        int[][] intArray7 = new int[][] { intArray3, intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        strassenMatrixMultiplication8.split(intArray9, intArray87, (int) (short) 10, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray7, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 10]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test657");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray61, intArray68, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray27, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray6, intArray27);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.add(intArray79, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test658");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray56 = strassenMatrixMultiplication0.sub(intArray1, intArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
    }

    @Test
    public void test659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test659");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray6 = null;
        int[][] intArray7 = new int[][] {};
        strassenMatrixMultiplication5.split(intArray6, intArray7, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray49);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication12.sub(intArray26, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication11.add(intArray79, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication4.sub(intArray7, intArray79);
        strassenMatrixMultiplication2.split(intArray3, intArray82, (-1), (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.multiply(intArray1, intArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test660");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray33);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray61, (int) ' ', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
    }

    @Test
    public void test661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test661");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[] intArray81 = new int[] { (byte) 10, 'a', (byte) 1, ' ' };
        int[][] intArray82 = new int[][] { intArray81 };
        int[] intArray84 = new int[] { (short) 0 };
        int[][] intArray85 = new int[][] { intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication2.sub(intArray82, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray86, intArray89, (int) (short) 0, (int) '4');
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.sub(intArray86, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from object array because \"B\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10, 97, 1, 32]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test662");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[] intArray82 = new int[] { 'a', (short) 1 };
        int[] intArray85 = new int[] { 'a', (short) 1 };
        int[][] intArray86 = new int[][] { intArray70, intArray73, intArray76, intArray79, intArray82, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication6.add(intArray13, intArray86);
        int[][] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.add(intArray87, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test663");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray66 = new int[] { (short) 0 };
        int[] intArray68 = new int[] { (short) 0 };
        int[][] intArray69 = new int[][] { intArray66, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication10.multiply(intArray16, intArray69);
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[] intArray82 = new int[] { 'a', (short) 1 };
        int[] intArray85 = new int[] { 'a', (short) 1 };
        int[] intArray88 = new int[] { 'a', (short) 1 };
        int[][] intArray89 = new int[][] { intArray73, intArray76, intArray79, intArray82, intArray85, intArray88 };
        int[][] intArray90 = strassenMatrixMultiplication9.add(intArray16, intArray89);
        int[][] intArray91 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray16, intArray91, (-1), (-1));
        strassenMatrixMultiplication1.split(intArray7, intArray91, 100, 0);
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray7, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test664");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.sub(intArray82, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray86, intArray87);
        java.lang.Class<?> wildcardClass89 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test665");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[] intArray60 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray67 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray74 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray60, intArray67, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication6.sub(intArray26, intArray75);
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray75, intArray77, (int) ' ', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from object array because \"P\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test666");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray64 = new int[] { (short) 0 };
        int[] intArray66 = new int[] { (short) 0 };
        int[][] intArray67 = new int[][] { intArray64, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication8.multiply(intArray14, intArray67);
        int[] intArray71 = new int[] { 'a', (short) 1 };
        int[] intArray74 = new int[] { 'a', (short) 1 };
        int[] intArray77 = new int[] { 'a', (short) 1 };
        int[] intArray80 = new int[] { 'a', (short) 1 };
        int[] intArray83 = new int[] { 'a', (short) 1 };
        int[] intArray86 = new int[] { 'a', (short) 1 };
        int[][] intArray87 = new int[][] { intArray71, intArray74, intArray77, intArray80, intArray83, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication7.add(intArray14, intArray87);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray14, (int) (short) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test667");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray69, intArray75, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication9.add(intArray63, intArray82);
        int[][] intArray84 = new int[][] {};
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication9.add(intArray84, intArray85);
        strassenMatrixMultiplication7.split(intArray8, intArray86, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray86, (int) '#', 0);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.sub(intArray93, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test668");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray69, intArray75, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication9.add(intArray63, intArray82);
        int[][] intArray84 = new int[][] {};
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication9.add(intArray84, intArray85);
        strassenMatrixMultiplication7.split(intArray8, intArray86, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray86, (int) '#', 0);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray93, intArray94, (int) 'a', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test669");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray86 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray87 = new int[][] { intArray74, intArray80, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication14.add(intArray68, intArray87);
        int[][] intArray89 = new int[][] {};
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication14.add(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication8.sub(intArray89, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = strassenMatrixMultiplication2.add(intArray89, intArray94);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray1, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test670");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray61, intArray68, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray27, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray6, intArray27);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray79, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test671");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[] intArray62 = new int[] { (short) 10, '#' };
        int[][] intArray63 = new int[][] { intArray62 };
        int[] intArray65 = new int[] { ' ' };
        int[] intArray67 = new int[] { ' ' };
        int[] intArray69 = new int[] { ' ' };
        int[] intArray71 = new int[] { ' ' };
        int[][] intArray72 = new int[][] { intArray65, intArray67, intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication0.multiply(intArray63, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray76 = strassenMatrixMultiplication0.sub(intArray74, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[32]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[32]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test672");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[][] intArray75 = new int[][] {};
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.add(intArray75, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray78, intArray79, (-1), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test673");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.sub(intArray82, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray86, intArray87);
        java.lang.Class<?> wildcardClass89 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test674");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.sub(intArray82, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication0.add(intArray86, intArray87);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test675");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication3.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication2.sub(intArray83, intArray84);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.multiply(intArray1, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test676");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray82, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.multiply(intArray85, intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test677");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray12 = new int[][] { intArray6, intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.sub(intArray12, intArray59);
        int[] intArray63 = new int[] { (short) 10, '#' };
        int[][] intArray64 = new int[][] { intArray63 };
        int[] intArray66 = new int[] { ' ' };
        int[] intArray68 = new int[] { ' ' };
        int[] intArray70 = new int[] { ' ' };
        int[] intArray72 = new int[] { ' ' };
        int[][] intArray73 = new int[][] { intArray66, intArray68, intArray70, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication1.multiply(intArray64, intArray73);
        int[][] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray76 = strassenMatrixMultiplication0.multiply(intArray64, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10, 35]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[32]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[32]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[32]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[32]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test678");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray64 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray64, intArray70, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication4.add(intArray58, intArray77);
        int[][] intArray79 = new int[][] {};
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication4.add(intArray79, intArray80);
        strassenMatrixMultiplication2.split(intArray3, intArray81, (int) (short) 10, (int) (byte) 1);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray81, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray85, intArray89, 1, (int) (byte) 100);
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.add(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test679");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication9.add(intArray17, intArray40);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication3.sub(intArray17, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = strassenMatrixMultiplication2.add(intArray70, intArray71);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray73 = strassenMatrixMultiplication0.sub(intArray1, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test680");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray73 = strassenMatrixMultiplication0.add(intArray71, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test681");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray69 = new int[] { (short) 0 };
        int[] intArray71 = new int[] { (short) 0 };
        int[][] intArray72 = new int[][] { intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication13.multiply(intArray19, intArray72);
        strassenMatrixMultiplication6.join(intArray9, intArray73, (int) (short) -1, (int) '#');
        int[][] intArray77 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication78 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication78.split(intArray79, intArray80, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray77, intArray80, (int) (short) 100, (int) (byte) 100);
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray77, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test682");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication75 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        strassenMatrixMultiplication75.split(intArray76, intArray77, (int) '4', (-1));
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication0.sub(intArray77, intArray81);
        int[][] intArray83 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray83, intArray86, (int) (short) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test683");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray69, intArray75, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication9.add(intArray63, intArray82);
        int[][] intArray84 = new int[][] {};
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication9.add(intArray84, intArray85);
        strassenMatrixMultiplication7.split(intArray8, intArray86, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray86, (int) '#', 0);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray93, intArray94, 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test684");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray3, intArray75);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray79, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test685");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[] intArray63 = new int[] { 100, '#', 10 };
        int[][] intArray64 = new int[][] { intArray63 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication65 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray66 = null;
        int[][] intArray67 = new int[][] {};
        strassenMatrixMultiplication65.split(intArray66, intArray67, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray64, intArray67, (int) (short) 0, (int) (short) 0);
        int[][] intArray74 = null;
        int[] intArray79 = new int[] { 10, 0, (byte) -1, 10 };
        int[] intArray84 = new int[] { 10, 0, (byte) -1, 10 };
        int[] intArray89 = new int[] { 10, 0, (byte) -1, 10 };
        int[][] intArray90 = new int[][] { intArray79, intArray84, intArray89 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.sub(intArray74, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test686");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[] intArray81 = new int[] { (byte) 1, 1, 1, 100, '#' };
        int[][] intArray82 = new int[][] { intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication0.multiply(intArray55, intArray82);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray85, intArray90, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 1, 1, 100, 35]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test687");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray83, intArray86);
        strassenMatrixMultiplication0.split(intArray1, intArray83, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray93 = strassenMatrixMultiplication0.sub(intArray91, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test688");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[] intArray62 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray69 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray76 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray62, intArray69, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication8.sub(intArray28, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray7, intArray28);
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.multiply(intArray28, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test689");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        int[][] intArray60 = null;
        int[][] intArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray60, intArray61, (int) (short) 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
    }

    @Test
    public void test690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test690");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray61, intArray68, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray27, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray6, intArray27);
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray79, intArray80, 10, 100);
        java.lang.Class<?> wildcardClass84 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test691");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        int[] intArray72 = new int[] { 'a', (short) 1 };
        int[] intArray75 = new int[] { 'a', (short) 1 };
        int[] intArray78 = new int[] { 'a', (short) 1 };
        int[] intArray81 = new int[] { 'a', (short) 1 };
        int[] intArray84 = new int[] { 'a', (short) 1 };
        int[] intArray87 = new int[] { 'a', (short) 1 };
        int[][] intArray88 = new int[][] { intArray72, intArray75, intArray78, intArray81, intArray84, intArray87 };
        int[][] intArray89 = strassenMatrixMultiplication8.add(intArray15, intArray88);
        int[][] intArray90 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray15, intArray90, (-1), (-1));
        int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray6, intArray90);
        int[][] intArray95 = null;
        int[][] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray95, intArray96, (int) (short) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test692");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray61, intArray68, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray27, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray6, intArray27);
        int[][] intArray79 = null;
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray79, intArray80, (int) (short) 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test693");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray29 = new int[][] { intArray7, intArray14, intArray21, intArray28 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray29, intArray75);
        int[][] intArray78 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.add(intArray78, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test694");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray21 = new int[][] { intArray20 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray41 = new int[][] { intArray28, intArray34, intArray40 };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray67 = new int[][] { intArray46, intArray51, intArray56, intArray61, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication22.multiply(intArray41, intArray67);
        int[][] intArray69 = strassenMatrixMultiplication16.sub(intArray21, intArray67);
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray87 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray88 = new int[][] { intArray75, intArray81, intArray87 };
        int[][] intArray89 = strassenMatrixMultiplication15.add(intArray69, intArray88);
        int[][] intArray90 = new int[][] {};
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication15.add(intArray90, intArray91);
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication9.add(intArray90, intArray93);
        strassenMatrixMultiplication7.split(intArray8, intArray90, (int) (byte) 100, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.add(intArray6, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test695");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray61, intArray68, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray27, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray6, intArray27);
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray79, intArray80, 10, 100);
        java.lang.Class<?> wildcardClass84 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test696");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        strassenMatrixMultiplication0.split(intArray1, intArray8, (int) (byte) 10, (int) '#');
        int[][] intArray84 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.add(intArray84, intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test697");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = strassenMatrixMultiplication0.sub(intArray60, intArray61);
        java.lang.Class<?> wildcardClass63 = intArray62.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test698");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.sub(intArray83, intArray86);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray1, intArray86, (int) '4', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test699");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        strassenMatrixMultiplication0.split(intArray1, intArray8, (int) (byte) 10, (int) '#');
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray84, intArray85, (int) (short) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test700");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication2.sub(intArray79, intArray83);
        strassenMatrixMultiplication0.split(intArray1, intArray79, (int) '4', (int) '4');
        int[][] intArray88 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication89 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray90 = null;
        int[][] intArray91 = new int[][] {};
        strassenMatrixMultiplication89.split(intArray90, intArray91, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray88, intArray90, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test701");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        int[] intArray54 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray69 = new int[][] { intArray54, intArray61, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray20, intArray69);
        int[][] intArray71 = null;
        int[][] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray73 = strassenMatrixMultiplication0.multiply(intArray71, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test702");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.add(intArray14, intArray37);
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.sub(intArray14, intArray66);
        int[][] intArray68 = null;
        int[][] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray70 = strassenMatrixMultiplication0.sub(intArray68, intArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test703");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        strassenMatrixMultiplication0.split(intArray1, intArray8, (int) (byte) 10, (int) '#');
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray85, (int) (byte) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test704");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray17 = new int[][] { intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication12.sub(intArray17, intArray63);
        int[] intArray67 = new int[] { (short) 0 };
        int[] intArray69 = new int[] { (short) 0 };
        int[][] intArray70 = new int[][] { intArray67, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication11.multiply(intArray17, intArray70);
        int[] intArray74 = new int[] { 'a', (short) 1 };
        int[] intArray77 = new int[] { 'a', (short) 1 };
        int[] intArray80 = new int[] { 'a', (short) 1 };
        int[] intArray83 = new int[] { 'a', (short) 1 };
        int[] intArray86 = new int[] { 'a', (short) 1 };
        int[] intArray89 = new int[] { 'a', (short) 1 };
        int[][] intArray90 = new int[][] { intArray74, intArray77, intArray80, intArray83, intArray86, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication10.add(intArray17, intArray90);
        int[][] intArray92 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray17, intArray92, (-1), (-1));
        strassenMatrixMultiplication7.split(intArray8, intArray92, (int) (byte) 100, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.sub(intArray6, intArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test705");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = strassenMatrixMultiplication0.sub(intArray60, intArray61);
        java.lang.Class<?> wildcardClass63 = intArray60.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test706");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = strassenMatrixMultiplication0.sub(intArray60, intArray61);
        java.lang.Class<?> wildcardClass63 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test707");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        strassenMatrixMultiplication0.split(intArray1, intArray8, (int) (byte) 10, (int) '#');
        int[] intArray85 = new int[] { (byte) 10 };
        int[] intArray87 = new int[] { (byte) 10 };
        int[][] intArray88 = new int[][] { intArray85, intArray87 };
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray90 = strassenMatrixMultiplication0.add(intArray88, intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10]");
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test708");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray3 = strassenMatrixMultiplication0.multiply(intArray1, intArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test709");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[][] intArray75 = new int[][] {};
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.add(intArray75, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray80 = strassenMatrixMultiplication0.multiply(intArray78, intArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test710");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray17 = new int[][] { intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication12.sub(intArray17, intArray63);
        int[] intArray67 = new int[] { (short) 0 };
        int[] intArray69 = new int[] { (short) 0 };
        int[][] intArray70 = new int[][] { intArray67, intArray69 };
        int[][] intArray71 = strassenMatrixMultiplication11.multiply(intArray17, intArray70);
        int[] intArray74 = new int[] { 'a', (short) 1 };
        int[] intArray77 = new int[] { 'a', (short) 1 };
        int[] intArray80 = new int[] { 'a', (short) 1 };
        int[] intArray83 = new int[] { 'a', (short) 1 };
        int[] intArray86 = new int[] { 'a', (short) 1 };
        int[] intArray89 = new int[] { 'a', (short) 1 };
        int[][] intArray90 = new int[][] { intArray74, intArray77, intArray80, intArray83, intArray86, intArray89 };
        int[][] intArray91 = strassenMatrixMultiplication10.add(intArray17, intArray90);
        int[][] intArray92 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray17, intArray92, (-1), (-1));
        int[][] intArray96 = strassenMatrixMultiplication2.sub(intArray8, intArray92);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.add(intArray1, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test711");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[][] intArray76 = new int[][] {};
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication1.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.sub(intArray78, intArray79);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray81, intArray82, (int) (short) 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test712");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.multiply(intArray76, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test713");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        strassenMatrixMultiplication0.join(intArray81, intArray84, 1, (int) (byte) -1);
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray88, intArray89, (int) 'a', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test714");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 0, 'a' };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray70 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray76 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray82 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray83 = new int[][] { intArray70, intArray76, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication10.add(intArray64, intArray83);
        int[][] intArray85 = new int[][] {};
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication10.add(intArray85, intArray86);
        strassenMatrixMultiplication8.split(intArray9, intArray87, (int) (short) 10, (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray87, intArray91);
        strassenMatrixMultiplication2.split(intArray6, intArray92, (int) '4', (int) (short) 10);
        int[][] intArray96 = new int[][] {};
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication2.sub(intArray96, intArray97);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.add(intArray1, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray98);
    }

    @Test
    public void test715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test715");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray75, intArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test716");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray33);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray62 = strassenMatrixMultiplication0.add(intArray1, intArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
    }

    @Test
    public void test717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test717");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.sub(intArray82, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication1.sub(intArray89, intArray93);
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.add(intArray93, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test718");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray22 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray23 = new int[][] { intArray17, intArray22 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.sub(intArray23, intArray70);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray72 = strassenMatrixMultiplication0.sub(intArray7, intArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test719");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        strassenMatrixMultiplication0.split(intArray1, intArray8, (int) (byte) 10, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray90, (int) (short) 1, 100);
        java.lang.Class<?> wildcardClass94 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test720");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        int[][] intArray67 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray68 = strassenMatrixMultiplication0.multiply(intArray66, intArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test721");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[] intArray11 = new int[] { (short) -1, ' ', (byte) -1, (short) 10, (short) 10 };
        int[] intArray17 = new int[] { (short) -1, ' ', (byte) -1, (short) 10, (short) 10 };
        int[] intArray23 = new int[] { (short) -1, ' ', (byte) -1, (short) 10, (short) 10 };
        int[] intArray29 = new int[] { (short) -1, ' ', (byte) -1, (short) 10, (short) 10 };
        int[] intArray35 = new int[] { (short) -1, ' ', (byte) -1, (short) 10, (short) 10 };
        int[][] intArray36 = new int[][] { intArray11, intArray17, intArray23, intArray29, intArray35 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication37 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray42 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray47 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray48 = new int[][] { intArray42, intArray47 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication49 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray55 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray61 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray67 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray68 = new int[][] { intArray55, intArray61, intArray67 };
        int[] intArray73 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray78 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray83 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray88 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray93 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray94 = new int[][] { intArray73, intArray78, intArray83, intArray88, intArray93 };
        int[][] intArray95 = strassenMatrixMultiplication49.multiply(intArray68, intArray94);
        int[][] intArray96 = strassenMatrixMultiplication37.sub(intArray48, intArray95);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray97 = strassenMatrixMultiplication0.multiply(intArray36, intArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 32, -1, 10, 10]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 32, -1, 10, 10]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 32, -1, 10, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 32, -1, 10, 10]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 32, -1, 10, 10]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test722");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray69, intArray75, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication9.add(intArray63, intArray82);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication9.sub(intArray86, intArray90);
        strassenMatrixMultiplication7.split(intArray8, intArray86, (int) '4', (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.multiply(intArray6, intArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test723");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[][] intArray8 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[] intArray63 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray70 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray77 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray63, intArray70, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication9.sub(intArray29, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.add(intArray8, intArray29);
        strassenMatrixMultiplication0.split(intArray1, intArray8, (int) (byte) 10, (int) '#');
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        strassenMatrixMultiplication0.join(intArray86, intArray90, (int) (short) 1, 100);
        java.lang.Class<?> wildcardClass94 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test724");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray9 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray10 = new int[][] { intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[][] intArray58 = strassenMatrixMultiplication5.sub(intArray10, intArray56);
        int[] intArray60 = new int[] { (short) 0 };
        int[] intArray62 = new int[] { (short) 0 };
        int[][] intArray63 = new int[][] { intArray60, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication4.multiply(intArray10, intArray63);
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[] intArray82 = new int[] { 'a', (short) 1 };
        int[][] intArray83 = new int[][] { intArray67, intArray70, intArray73, intArray76, intArray79, intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication3.add(intArray10, intArray83);
        int[][] intArray85 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray10, intArray85, (-1), (-1));
        strassenMatrixMultiplication0.split(intArray1, intArray85, (int) (byte) 100, (int) (short) 1);
        int[][] intArray92 = null;
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.add(intArray92, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test725");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray14 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray21 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[] intArray28 = new int[] { (byte) 0, (byte) 10, (byte) -1, ' ', 10, (short) 10 };
        int[][] intArray29 = new int[][] { intArray7, intArray14, intArray21, intArray28 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray29, intArray75);
        int[][] intArray78 = null;
        int[][] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray78, intArray79, 0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 10, -1, 32, 10, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test726");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray6 = null;
        int[][] intArray7 = new int[][] {};
        strassenMatrixMultiplication5.split(intArray6, intArray7, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray25 = null;
        int[][] intArray26 = new int[][] {};
        strassenMatrixMultiplication24.split(intArray25, intArray26, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication30 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray48 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray49 = new int[][] { intArray36, intArray42, intArray48 };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray75 = new int[][] { intArray54, intArray59, intArray64, intArray69, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication30.multiply(intArray49, intArray75);
        int[][] intArray77 = strassenMatrixMultiplication18.add(intArray26, intArray49);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication12.sub(intArray26, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication11.add(intArray79, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication4.sub(intArray7, intArray79);
        strassenMatrixMultiplication2.split(intArray3, intArray82, (-1), (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray1, intArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test727");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray1 = new int[] {};
        int[] intArray2 = new int[] {};
        int[][] intArray3 = new int[][] { intArray1, intArray2 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication5 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray10 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray11 = new int[][] { intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication6.sub(intArray11, intArray57);
        int[] intArray65 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray71 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray77 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray78 = new int[][] { intArray65, intArray71, intArray77 };
        int[][] intArray79 = strassenMatrixMultiplication5.add(intArray59, intArray78);
        int[][] intArray80 = new int[][] {};
        int[][] intArray81 = null;
        int[][] intArray82 = strassenMatrixMultiplication5.add(intArray80, intArray81);
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication4.sub(intArray82, intArray83);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.multiply(intArray3, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test728");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[][] intArray60 = null;
        int[][] intArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray60, intArray61, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
    }

    @Test
    public void test729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test729");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        int[][] intArray11 = new int[][] {};
        strassenMatrixMultiplication9.split(intArray10, intArray11, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray16 = null;
        int[][] intArray17 = new int[][] {};
        strassenMatrixMultiplication15.split(intArray16, intArray17, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray22 = null;
        int[][] intArray23 = new int[][] {};
        strassenMatrixMultiplication21.split(intArray22, intArray23, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication27 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray45 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray46 = new int[][] { intArray33, intArray39, intArray45 };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray72 = new int[][] { intArray51, intArray56, intArray61, intArray66, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication27.multiply(intArray46, intArray72);
        int[][] intArray74 = strassenMatrixMultiplication15.add(intArray23, intArray46);
        int[][] intArray75 = null;
        int[][] intArray76 = strassenMatrixMultiplication9.sub(intArray23, intArray75);
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication8.add(intArray76, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication1.sub(intArray4, intArray76);
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray4, intArray80, 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test730");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        strassenMatrixMultiplication0.split(intArray1, intArray79, (int) (short) 10, (int) (byte) 1);
        int[][] intArray83 = null;
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray83, intArray84, (int) (short) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test731");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication82 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray83 = null;
        int[][] intArray84 = new int[][] {};
        strassenMatrixMultiplication82.split(intArray83, intArray84, (int) '4', (-1));
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication7.sub(intArray84, intArray88);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray84, (int) (short) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test732");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray83, intArray86);
        strassenMatrixMultiplication0.split(intArray1, intArray83, (int) (byte) 100, (int) (byte) 1);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, (int) (short) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test733");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[] intArray62 = new int[] { (short) 10, '#' };
        int[][] intArray63 = new int[][] { intArray62 };
        int[] intArray65 = new int[] { ' ' };
        int[] intArray67 = new int[] { ' ' };
        int[] intArray69 = new int[] { ' ' };
        int[] intArray71 = new int[] { ' ' };
        int[][] intArray72 = new int[][] { intArray65, intArray67, intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication0.multiply(intArray63, intArray72);
        int[] intArray78 = new int[] { (byte) 1, 10, (-1), (short) 10 };
        int[] intArray83 = new int[] { (byte) 1, 10, (-1), (short) 10 };
        int[] intArray88 = new int[] { (byte) 1, 10, (-1), (short) 10 };
        int[] intArray93 = new int[] { (byte) 1, 10, (-1), (short) 10 };
        int[][] intArray94 = new int[][] { intArray78, intArray83, intArray88, intArray93 };
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.multiply(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[32]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[32]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 10, -1, 10]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 10, -1, 10]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, 10, -1, 10]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[1, 10, -1, 10]");
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test734");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray21 = new int[][] { intArray8, intArray14, intArray20 };
        int[] intArray26 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray47 = new int[][] { intArray26, intArray31, intArray36, intArray41, intArray46 };
        int[][] intArray48 = strassenMatrixMultiplication2.multiply(intArray21, intArray47);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray49 = strassenMatrixMultiplication0.add(intArray1, intArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
    }

    @Test
    public void test735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test735");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray63 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray63, intArray69, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication3.add(intArray57, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication3.add(intArray78, intArray79);
        strassenMatrixMultiplication1.split(intArray2, intArray80, (int) (short) 10, (int) (byte) 1);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray86, intArray88, (int) (byte) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test736");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        int[][] intArray48 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray49 = strassenMatrixMultiplication0.multiply(intArray46, intArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
    }

    @Test
    public void test737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test737");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray16 = new int[][] { intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray35 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray36 = new int[][] { intArray23, intArray29, intArray35 };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray62 = new int[][] { intArray41, intArray46, intArray51, intArray56, intArray61 };
        int[][] intArray63 = strassenMatrixMultiplication17.multiply(intArray36, intArray62);
        int[][] intArray64 = strassenMatrixMultiplication11.sub(intArray16, intArray62);
        int[] intArray66 = new int[] { (short) 0 };
        int[] intArray68 = new int[] { (short) 0 };
        int[][] intArray69 = new int[][] { intArray66, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication10.multiply(intArray16, intArray69);
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[] intArray82 = new int[] { 'a', (short) 1 };
        int[] intArray85 = new int[] { 'a', (short) 1 };
        int[] intArray88 = new int[] { 'a', (short) 1 };
        int[][] intArray89 = new int[][] { intArray73, intArray76, intArray79, intArray82, intArray85, intArray88 };
        int[][] intArray90 = strassenMatrixMultiplication9.add(intArray16, intArray89);
        int[][] intArray91 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray16, intArray91, (-1), (-1));
        strassenMatrixMultiplication1.split(intArray7, intArray91, 100, 0);
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.sub(intArray7, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test738");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray9, intArray85);
        java.lang.Class<?> wildcardClass87 = intArray9.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test739");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[] intArray7 = new int[] { (short) 10 };
        int[] intArray9 = new int[] { (short) 10 };
        int[][] intArray10 = new int[][] { intArray7, intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray12 = null;
        int[][] intArray13 = new int[][] {};
        strassenMatrixMultiplication11.split(intArray12, intArray13, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray54 = new int[][] { intArray41, intArray47, intArray53 };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray80 = new int[][] { intArray59, intArray64, intArray69, intArray74, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication35.multiply(intArray54, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication23.add(intArray31, intArray81);
        strassenMatrixMultiplication11.split(intArray19, intArray31, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray10, intArray31, (int) (short) -1, (int) (byte) 0);
        java.lang.Class<?> wildcardClass89 = intArray10.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test740");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[] intArray7 = new int[] { (short) 10 };
        int[] intArray9 = new int[] { (short) 10 };
        int[][] intArray10 = new int[][] { intArray7, intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray12 = null;
        int[][] intArray13 = new int[][] {};
        strassenMatrixMultiplication11.split(intArray12, intArray13, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray54 = new int[][] { intArray41, intArray47, intArray53 };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray80 = new int[][] { intArray59, intArray64, intArray69, intArray74, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication35.multiply(intArray54, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication23.add(intArray31, intArray81);
        strassenMatrixMultiplication11.split(intArray19, intArray31, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray10, intArray31, (int) (short) -1, (int) (byte) 0);
        java.lang.Class<?> wildcardClass89 = intArray31.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test741");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray68 = strassenMatrixMultiplication0.multiply(intArray6, intArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test742");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray9, intArray85);
        int[][] intArray87 = null;
        int[][] intArray88 = new int[][] {};
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray89 = strassenMatrixMultiplication0.add(intArray87, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test743");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray9, intArray85);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test744");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.sub(intArray81, intArray82);
        int[][] intArray84 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication85 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        strassenMatrixMultiplication85.split(intArray86, intArray87, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray84, intArray87, 1, (int) (byte) 0);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.sub(intArray94, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test745");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray77 = strassenMatrixMultiplication0.multiply(intArray1, intArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test746");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray81, intArray84);
        int[][] intArray86 = null;
        int[] intArray90 = new int[] { (byte) 0, (byte) -1, '4' };
        int[] intArray94 = new int[] { (byte) 0, (byte) -1, '4' };
        int[][] intArray95 = new int[][] { intArray90, intArray94 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.add(intArray86, intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, -1, 52]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, -1, 52]");
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test747");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray8 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray9 = new int[][] { intArray8 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray29 = new int[][] { intArray16, intArray22, intArray28 };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray55 = new int[][] { intArray34, intArray39, intArray44, intArray49, intArray54 };
        int[][] intArray56 = strassenMatrixMultiplication10.multiply(intArray29, intArray55);
        int[][] intArray57 = strassenMatrixMultiplication4.sub(intArray9, intArray55);
        int[] intArray63 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray63, intArray69, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication3.add(intArray57, intArray76);
        int[][] intArray78 = new int[][] {};
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication3.add(intArray78, intArray79);
        strassenMatrixMultiplication1.split(intArray2, intArray80, (int) (short) 10, (int) (byte) 1);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray80, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, (int) ' ', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test748");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray19 = new int[][] { intArray6, intArray12, intArray18 };
        int[] intArray24 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray29 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray45 = new int[][] { intArray24, intArray29, intArray34, intArray39, intArray44 };
        int[][] intArray46 = strassenMatrixMultiplication0.multiply(intArray19, intArray45);
        int[][] intArray47 = null;
        int[][] intArray48 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray47, intArray48, (int) (short) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
    }

    @Test
    public void test749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test749");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray9, intArray85);
        java.lang.Class<?> wildcardClass87 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test750");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.add(intArray87, intArray90);
        int[][] intArray92 = new int[][] {};
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray91, intArray92);
        java.lang.Class<?> wildcardClass94 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test751");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.add(intArray87, intArray90);
        int[][] intArray92 = new int[][] {};
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray91, intArray92);
        java.lang.Class<?> wildcardClass94 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test752");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[] intArray7 = new int[] { (short) 10 };
        int[] intArray9 = new int[] { (short) 10 };
        int[][] intArray10 = new int[][] { intArray7, intArray9 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray12 = null;
        int[][] intArray13 = new int[][] {};
        strassenMatrixMultiplication11.split(intArray12, intArray13, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray41 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray54 = new int[][] { intArray41, intArray47, intArray53 };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray69 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray74 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray79 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray80 = new int[][] { intArray59, intArray64, intArray69, intArray74, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication35.multiply(intArray54, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication23.add(intArray31, intArray81);
        strassenMatrixMultiplication11.split(intArray19, intArray31, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray10, intArray31, (int) (short) -1, (int) (byte) 0);
        java.lang.Class<?> wildcardClass89 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test753");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.add(intArray82, intArray85);
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.multiply(intArray85, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test754");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.add(intArray87, intArray90);
        int[][] intArray92 = new int[][] {};
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray91, intArray92);
        java.lang.Class<?> wildcardClass94 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test755");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.add(intArray87, intArray90);
        int[][] intArray92 = new int[][] {};
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray91, intArray92);
        java.lang.Class<?> wildcardClass94 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test756");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        strassenMatrixMultiplication0.split(intArray1, intArray5, (int) '#', (int) (byte) 1);
        int[][] intArray76 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.multiply(intArray76, intArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test757");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray19 = new int[][] { intArray18 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication14.sub(intArray19, intArray65);
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray85 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray86 = new int[][] { intArray73, intArray79, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication13.add(intArray67, intArray86);
        int[][] intArray88 = new int[][] {};
        int[][] intArray89 = null;
        int[][] intArray90 = strassenMatrixMultiplication13.add(intArray88, intArray89);
        int[][] intArray91 = null;
        int[][] intArray92 = strassenMatrixMultiplication7.add(intArray88, intArray91);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray88, (int) 'a', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test758");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[][] intArray76 = new int[][] {};
        int[][] intArray77 = null;
        int[][] intArray78 = strassenMatrixMultiplication1.add(intArray76, intArray77);
        int[][] intArray79 = null;
        int[][] intArray80 = strassenMatrixMultiplication0.sub(intArray78, intArray79);
        int[] intArray85 = new int[] { (byte) 1, (byte) -1, (short) -1, (byte) 10 };
        int[] intArray90 = new int[] { (byte) 1, (byte) -1, (short) -1, (byte) 10 };
        int[][] intArray91 = new int[][] { intArray85, intArray90 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication92 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray93 = null;
        int[][] intArray94 = new int[][] {};
        strassenMatrixMultiplication92.split(intArray93, intArray94, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray91, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from object array because \"B\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, -1, -1, 10]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[1, -1, -1, 10]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test759");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[][] intArray76 = new int[][] {};
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray77 = strassenMatrixMultiplication0.add(intArray74, intArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test760");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray57 = new int[] { (short) 0 };
        int[] intArray59 = new int[] { (short) 0 };
        int[][] intArray60 = new int[][] { intArray57, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication1.multiply(intArray7, intArray60);
        int[] intArray64 = new int[] { 'a', (short) 1 };
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[][] intArray80 = new int[][] { intArray64, intArray67, intArray70, intArray73, intArray76, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray7, intArray80);
        int[] intArray86 = new int[] { 10, (short) -1, (byte) 1, ' ' };
        int[] intArray91 = new int[] { 10, (short) -1, (byte) 1, ' ' };
        int[] intArray96 = new int[] { 10, (short) -1, (byte) 1, ' ' };
        int[][] intArray97 = new int[][] { intArray86, intArray91, intArray96 };
        int[][] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray99 = strassenMatrixMultiplication0.multiply(intArray97, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, -1, 1, 32]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[10, -1, 1, 32]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[10, -1, 1, 32]");
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test761");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[] intArray79 = new int[] { (byte) 10, 'a', (byte) 1, ' ' };
        int[][] intArray80 = new int[][] { intArray79 };
        int[] intArray82 = new int[] { (short) 0 };
        int[][] intArray83 = new int[][] { intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication0.sub(intArray80, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray87 = strassenMatrixMultiplication0.sub(intArray85, intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 97, 1, 32]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test762");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        strassenMatrixMultiplication0.split(intArray1, intArray5, (int) '#', (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.add(intArray76, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"A\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test763");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray20 = new int[][] { intArray19 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication21 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray39 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray40 = new int[][] { intArray27, intArray33, intArray39 };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray66 = new int[][] { intArray45, intArray50, intArray55, intArray60, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication21.multiply(intArray40, intArray66);
        int[][] intArray68 = strassenMatrixMultiplication15.sub(intArray20, intArray66);
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray86 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray87 = new int[][] { intArray74, intArray80, intArray86 };
        int[][] intArray88 = strassenMatrixMultiplication14.add(intArray68, intArray87);
        int[][] intArray89 = new int[][] {};
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication14.add(intArray89, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication8.add(intArray89, intArray92);
        int[][] intArray94 = new int[][] {};
        int[][] intArray95 = strassenMatrixMultiplication2.add(intArray93, intArray94);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray96 = strassenMatrixMultiplication0.add(intArray1, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"A\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test764");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.add(intArray81, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.multiply(intArray86, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test765");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray69, intArray75, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication9.add(intArray63, intArray82);
        int[][] intArray84 = new int[][] {};
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication9.add(intArray84, intArray85);
        strassenMatrixMultiplication7.split(intArray8, intArray86, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray86, (int) '#', 0);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray93, intArray94, (int) (byte) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test766");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray84, (int) (byte) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test767");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray12 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray13 = new int[][] { intArray7, intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.sub(intArray13, intArray60);
        int[] intArray64 = new int[] { (short) 10, '#' };
        int[][] intArray65 = new int[][] { intArray64 };
        int[] intArray67 = new int[] { ' ' };
        int[] intArray69 = new int[] { ' ' };
        int[] intArray71 = new int[] { ' ' };
        int[] intArray73 = new int[] { ' ' };
        int[][] intArray74 = new int[][] { intArray67, intArray69, intArray71, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication2.multiply(intArray65, intArray74);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray76 = strassenMatrixMultiplication0.add(intArray1, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 35]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[32]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[32]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test768");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[][] intArray60 = null;
        int[] intArray63 = new int[] { (short) 100, 10 };
        int[] intArray66 = new int[] { (short) 100, 10 };
        int[] intArray69 = new int[] { (short) 100, 10 };
        int[] intArray72 = new int[] { (short) 100, 10 };
        int[][] intArray73 = new int[][] { intArray63, intArray66, intArray69, intArray72 };
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray74 = strassenMatrixMultiplication0.add(intArray60, intArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[100, 10]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[100, 10]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[100, 10]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[100, 10]");
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test769");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication12.sub(intArray89, intArray93);
        strassenMatrixMultiplication0.join(intArray8, intArray94, (int) (byte) 0, (-1));
        java.lang.Class<?> wildcardClass98 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test770");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        strassenMatrixMultiplication0.join(intArray81, intArray84, 1, (int) (byte) -1);
        int[][] intArray88 = null;
        int[][] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray88, intArray89, (int) (byte) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test771");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray72);
        strassenMatrixMultiplication2.split(intArray10, intArray22, (int) 'a', (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray77 = strassenMatrixMultiplication0.sub(intArray1, intArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test772");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication12.sub(intArray89, intArray93);
        strassenMatrixMultiplication0.join(intArray8, intArray94, (int) (byte) 0, (-1));
        java.lang.Class<?> wildcardClass98 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test773");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray83, intArray86);
        strassenMatrixMultiplication0.split(intArray1, intArray87, (int) (short) 0, 0);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray91, intArray92, (int) (short) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test774");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication0.add(intArray78, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray84, intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test775");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray57 = new int[] { (short) 0 };
        int[] intArray59 = new int[] { (short) 0 };
        int[][] intArray60 = new int[][] { intArray57, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication1.multiply(intArray7, intArray60);
        int[] intArray64 = new int[] { 'a', (short) 1 };
        int[] intArray67 = new int[] { 'a', (short) 1 };
        int[] intArray70 = new int[] { 'a', (short) 1 };
        int[] intArray73 = new int[] { 'a', (short) 1 };
        int[] intArray76 = new int[] { 'a', (short) 1 };
        int[] intArray79 = new int[] { 'a', (short) 1 };
        int[][] intArray80 = new int[][] { intArray64, intArray67, intArray70, intArray73, intArray76, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication0.add(intArray7, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray82, intArray83, (int) (short) 1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test776");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray82 = strassenMatrixMultiplication0.sub(intArray6, intArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test777");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[] intArray79 = new int[] { (byte) 10, 'a', (byte) 1, ' ' };
        int[][] intArray80 = new int[][] { intArray79 };
        int[] intArray82 = new int[] { (short) 0 };
        int[][] intArray83 = new int[][] { intArray82 };
        int[][] intArray84 = strassenMatrixMultiplication0.sub(intArray80, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray85, intArray86, (int) (byte) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 97, 1, 32]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test778");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray71, intArray74, (int) (short) 0, (int) (short) 100);
        java.lang.Class<?> wildcardClass81 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test779");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray79 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray67, intArray73, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication7.add(intArray61, intArray80);
        int[][] intArray82 = new int[][] {};
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication7.add(intArray82, intArray83);
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication1.sub(intArray82, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        strassenMatrixMultiplication0.join(intArray86, intArray88, 1, (int) (short) 100);
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test780");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray70);
        strassenMatrixMultiplication0.split(intArray8, intArray20, (int) 'a', (int) (byte) 1);
        int[][] intArray75 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray75, intArray78, (int) (short) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test781");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication77 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray78 = null;
        int[][] intArray79 = new int[][] {};
        strassenMatrixMultiplication77.split(intArray78, intArray79, (int) '4', (-1));
        int[][] intArray83 = null;
        int[][] intArray84 = strassenMatrixMultiplication2.sub(intArray79, intArray83);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.add(intArray1, intArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test782");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        strassenMatrixMultiplication0.split(intArray1, intArray79, (int) (short) 10, (int) (byte) 1);
        int[][] intArray83 = null;
        int[][] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray83, intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test783");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication87 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray88 = null;
        int[][] intArray89 = new int[][] {};
        strassenMatrixMultiplication87.split(intArray88, intArray89, (int) '4', (-1));
        int[][] intArray93 = null;
        int[][] intArray94 = strassenMatrixMultiplication12.sub(intArray89, intArray93);
        strassenMatrixMultiplication0.join(intArray8, intArray94, (int) (byte) 0, (-1));
        java.lang.Class<?> wildcardClass98 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test784");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray61, intArray68, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray27, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray6, intArray27);
        int[][] intArray79 = null;
        int[][] intArray80 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray79, intArray80, 10, 100);
        int[][] intArray84 = null;
        int[][] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray84, intArray85, (int) (short) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test785");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = new int[][] {};
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication6.add(intArray81, intArray82);
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication0.sub(intArray81, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = new int[][] {};
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray86, intArray87, 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test786");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray19 = new int[][] { intArray6, intArray12, intArray18 };
        int[] intArray24 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray29 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray34 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray45 = new int[][] { intArray24, intArray29, intArray34, intArray39, intArray44 };
        int[][] intArray46 = strassenMatrixMultiplication0.multiply(intArray19, intArray45);
        int[][] intArray47 = null;
        int[][] intArray48 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray47, intArray48, 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
    }

    @Test
    public void test787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test787");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray25 = new int[][] { intArray12, intArray18, intArray24 };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray51 = new int[][] { intArray30, intArray35, intArray40, intArray45, intArray50 };
        int[][] intArray52 = strassenMatrixMultiplication6.multiply(intArray25, intArray51);
        int[] intArray58 = new int[] { (short) -1, (byte) 10, '#', (byte) 1, (byte) 1 };
        int[] intArray64 = new int[] { (short) -1, (byte) 10, '#', (byte) 1, (byte) 1 };
        int[] intArray70 = new int[] { (short) -1, (byte) 10, '#', (byte) 1, (byte) 1 };
        int[] intArray76 = new int[] { (short) -1, (byte) 10, '#', (byte) 1, (byte) 1 };
        int[] intArray82 = new int[] { (short) -1, (byte) 10, '#', (byte) 1, (byte) 1 };
        int[][] intArray83 = new int[][] { intArray58, intArray64, intArray70, intArray76, intArray82 };
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray52, intArray83, 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 35, 1, 1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 35, 1, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 35, 1, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 35, 1, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 35, 1, 1]");
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test788");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray61, intArray68, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray27, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray6, intArray27);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray81, intArray85, (int) (byte) 100, 100);
        java.lang.Class<?> wildcardClass89 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test789");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[] intArray61 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray68 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray75 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray76 = new int[][] { intArray61, intArray68, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication7.sub(intArray27, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.add(intArray6, intArray27);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray81, intArray85, (int) (byte) 100, 100);
        java.lang.Class<?> wildcardClass89 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test790");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        int[][] intArray7 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[] intArray62 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray69 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray76 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray77 = new int[][] { intArray62, intArray69, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication8.sub(intArray28, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication1.add(intArray7, intArray28);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication80 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray81 = null;
        int[][] intArray82 = new int[][] {};
        strassenMatrixMultiplication80.split(intArray81, intArray82, (int) '4', (-1));
        int[][] intArray86 = null;
        strassenMatrixMultiplication1.join(intArray82, intArray86, (int) (byte) 100, 100);
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray82, intArray90, (int) (short) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test791");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray71, intArray74, (int) (short) 0, (int) (short) 100);
        java.lang.Class<?> wildcardClass81 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test792");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[][] intArray75 = new int[][] {};
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication0.add(intArray75, intArray76);
        int[][] intArray78 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication79 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray80 = null;
        int[][] intArray81 = new int[][] {};
        strassenMatrixMultiplication79.split(intArray80, intArray81, (int) '4', (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray85 = strassenMatrixMultiplication0.multiply(intArray78, intArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test793");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication4 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray5 = null;
        int[][] intArray6 = new int[][] {};
        strassenMatrixMultiplication4.split(intArray5, intArray6, (int) '4', (-1));
        int[][] intArray10 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[] intArray65 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray72 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray79 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray80 = new int[][] { intArray65, intArray72, intArray79 };
        int[][] intArray81 = strassenMatrixMultiplication11.sub(intArray31, intArray80);
        int[][] intArray82 = strassenMatrixMultiplication4.add(intArray10, intArray31);
        strassenMatrixMultiplication2.split(intArray3, intArray10, (int) (byte) 10, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray10, (int) ' ', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test794");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = strassenMatrixMultiplication0.sub(intArray60, intArray61);
        int[][] intArray63 = null;
        int[][] intArray64 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray65 = strassenMatrixMultiplication0.multiply(intArray63, intArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
    }

    @Test
    public void test795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test795");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray69, intArray75, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication9.add(intArray63, intArray82);
        int[][] intArray84 = new int[][] {};
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication9.add(intArray84, intArray85);
        strassenMatrixMultiplication7.split(intArray8, intArray86, (int) (short) 10, (int) (byte) 1);
        strassenMatrixMultiplication0.split(intArray6, intArray86, (int) '#', 0);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray93, intArray94, (int) (byte) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test796");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray51);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication14.sub(intArray28, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication13.add(intArray81, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication6.sub(intArray9, intArray81);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray9, intArray85, (int) 'a', (int) '4');
        java.lang.Class<?> wildcardClass89 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test797");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray65 = new int[] { (short) 0 };
        int[] intArray67 = new int[] { (short) 0 };
        int[][] intArray68 = new int[][] { intArray65, intArray67 };
        int[][] intArray69 = strassenMatrixMultiplication9.multiply(intArray15, intArray68);
        strassenMatrixMultiplication2.join(intArray5, intArray69, (int) (short) -1, (int) '#');
        strassenMatrixMultiplication0.split(intArray1, intArray5, (int) '#', (int) (byte) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication76 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray77 = null;
        int[][] intArray78 = new int[][] {};
        strassenMatrixMultiplication76.split(intArray77, intArray78, (int) '4', (-1));
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.multiply(intArray77, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test798");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        int[][] intArray9 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray23 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray29 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray30 = new int[][] { intArray17, intArray23, intArray29 };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray56 = new int[][] { intArray35, intArray40, intArray45, intArray50, intArray55 };
        int[][] intArray57 = strassenMatrixMultiplication11.multiply(intArray30, intArray56);
        int[] intArray64 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray64, intArray71, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication10.sub(intArray30, intArray79);
        int[][] intArray81 = strassenMatrixMultiplication3.add(intArray9, intArray30);
        strassenMatrixMultiplication1.split(intArray2, intArray9, (int) (byte) 10, (int) '#');
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication0.sub(intArray9, intArray85);
        int[][] intArray87 = null;
        int[] intArray89 = new int[] { 100 };
        int[] intArray91 = new int[] { 100 };
        int[] intArray93 = new int[] { 100 };
        int[][] intArray94 = new int[][] { intArray89, intArray91, intArray93 };
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray87, intArray94, (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[100]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[100]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[100]");
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test799");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray51);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication14.sub(intArray28, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication13.add(intArray81, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication6.sub(intArray9, intArray81);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray9, intArray85, (int) 'a', (int) '4');
        java.lang.Class<?> wildcardClass89 = intArray9.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test800");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray83, intArray86);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray88 = strassenMatrixMultiplication0.sub(intArray1, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test801");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray65, intArray69, 100, 0);
        int[][] intArray76 = null;
        int[][] intArray77 = new int[][] {};
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.add(intArray76, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test802");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        int[][] intArray86 = null;
        int[][] intArray87 = strassenMatrixMultiplication2.add(intArray83, intArray86);
        strassenMatrixMultiplication0.split(intArray1, intArray87, (int) (short) 0, 0);
        int[][] intArray91 = null;
        int[][] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray91, intArray92, 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test803");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { '#', 1, 100, '#', (byte) 0 };
        int[] intArray12 = new int[] { '#', 1, 100, '#', (byte) 0 };
        int[][] intArray13 = new int[][] { intArray6, intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray24 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray25 = new int[][] { intArray19, intArray24 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.sub(intArray25, intArray72);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray13, intArray73, 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[35, 1, 100, 35, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[35, 1, 100, 35, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test804");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray79 = new int[][] { intArray66, intArray72, intArray78 };
        int[][] intArray80 = strassenMatrixMultiplication6.add(intArray60, intArray79);
        int[][] intArray81 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray82 = strassenMatrixMultiplication0.sub(intArray80, intArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from object array because \"B\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test805");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray60 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray66 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray73 = new int[][] { intArray60, intArray66, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication0.add(intArray54, intArray73);
        int[][] intArray75 = null;
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray75, intArray76, (int) (byte) 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test806");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        int[] intArray9 = new int[] { (short) 10 };
        int[] intArray11 = new int[] { (short) 10 };
        int[][] intArray12 = new int[][] { intArray9, intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray32 = null;
        int[][] intArray33 = new int[][] {};
        strassenMatrixMultiplication31.split(intArray32, intArray33, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication37 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray55 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray56 = new int[][] { intArray43, intArray49, intArray55 };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray81 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray82 = new int[][] { intArray61, intArray66, intArray71, intArray76, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication37.multiply(intArray56, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication25.add(intArray33, intArray83);
        strassenMatrixMultiplication13.split(intArray21, intArray33, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication2.split(intArray12, intArray33, (int) (short) -1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.multiply(intArray1, intArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test807");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray2, (-1), 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test808");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray13 = null;
        int[][] intArray14 = new int[][] {};
        strassenMatrixMultiplication12.split(intArray13, intArray14, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray19 = null;
        int[][] intArray20 = new int[][] {};
        strassenMatrixMultiplication18.split(intArray19, intArray20, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication24 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray42 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray43 = new int[][] { intArray30, intArray36, intArray42 };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray68 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray69 = new int[][] { intArray48, intArray53, intArray58, intArray63, intArray68 };
        int[][] intArray70 = strassenMatrixMultiplication24.multiply(intArray43, intArray69);
        int[][] intArray71 = strassenMatrixMultiplication12.add(intArray20, intArray70);
        strassenMatrixMultiplication0.split(intArray8, intArray20, (int) 'a', (int) (byte) 1);
        int[][] intArray75 = null;
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray77 = strassenMatrixMultiplication0.multiply(intArray75, intArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test809");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray27 = null;
        int[][] intArray28 = new int[][] {};
        strassenMatrixMultiplication26.split(intArray27, intArray28, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication32 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray50 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray51 = new int[][] { intArray38, intArray44, intArray50 };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray61 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray66 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray71 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray76 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray77 = new int[][] { intArray56, intArray61, intArray66, intArray71, intArray76 };
        int[][] intArray78 = strassenMatrixMultiplication32.multiply(intArray51, intArray77);
        int[][] intArray79 = strassenMatrixMultiplication20.add(intArray28, intArray51);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication14.sub(intArray28, intArray80);
        int[][] intArray82 = null;
        int[][] intArray83 = strassenMatrixMultiplication13.add(intArray81, intArray82);
        int[][] intArray84 = strassenMatrixMultiplication6.sub(intArray9, intArray81);
        int[][] intArray85 = null;
        strassenMatrixMultiplication0.join(intArray9, intArray85, (int) 'a', (int) '4');
        int[][] intArray89 = null;
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray91 = strassenMatrixMultiplication0.multiply(intArray89, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test810");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray10 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray11 = new int[][] { intArray5, intArray10 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.sub(intArray11, intArray58);
        int[] intArray62 = new int[] { (short) 10, '#' };
        int[][] intArray63 = new int[][] { intArray62 };
        int[] intArray65 = new int[] { ' ' };
        int[] intArray67 = new int[] { ' ' };
        int[] intArray69 = new int[] { ' ' };
        int[] intArray71 = new int[] { ' ' };
        int[][] intArray72 = new int[][] { intArray65, intArray67, intArray69, intArray71 };
        int[][] intArray73 = strassenMatrixMultiplication0.multiply(intArray63, intArray72);
        int[][] intArray74 = null;
        int[][] intArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray76 = strassenMatrixMultiplication0.add(intArray74, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 35]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[32]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[32]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[32]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test811");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication48 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray60 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray66 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray67 = new int[][] { intArray54, intArray60, intArray66 };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray82 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray87 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray92 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray93 = new int[][] { intArray72, intArray77, intArray82, intArray87, intArray92 };
        int[][] intArray94 = strassenMatrixMultiplication48.multiply(intArray67, intArray93);
        int[][] intArray95 = strassenMatrixMultiplication0.sub(intArray20, intArray67);
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test812");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray6, intArray67, (int) 'a', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test813");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray4 = new int[] { (byte) 0, 'a' };
        int[][] intArray5 = new int[][] { intArray4 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray15 = new int[][] { intArray14 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray22 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray28 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray35 = new int[][] { intArray22, intArray28, intArray34 };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray61 = new int[][] { intArray40, intArray45, intArray50, intArray55, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication16.multiply(intArray35, intArray61);
        int[][] intArray63 = strassenMatrixMultiplication10.sub(intArray15, intArray61);
        int[] intArray69 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray75 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray81 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray82 = new int[][] { intArray69, intArray75, intArray81 };
        int[][] intArray83 = strassenMatrixMultiplication9.add(intArray63, intArray82);
        int[][] intArray84 = new int[][] {};
        int[][] intArray85 = null;
        int[][] intArray86 = strassenMatrixMultiplication9.add(intArray84, intArray85);
        strassenMatrixMultiplication7.split(intArray8, intArray86, (int) (short) 10, (int) (byte) 1);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.add(intArray86, intArray90);
        strassenMatrixMultiplication1.split(intArray5, intArray91, (int) '4', (int) (short) 10);
        int[][] intArray95 = new int[][] {};
        int[][] intArray96 = null;
        int[][] intArray97 = strassenMatrixMultiplication1.sub(intArray95, intArray96);
        int[][] intArray98 = null;
        int[][] intArray99 = strassenMatrixMultiplication0.add(intArray97, intArray98);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 97]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(intArray99);
    }

    @Test
    public void test814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test814");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray21 = null;
        int[][] intArray22 = new int[][] {};
        strassenMatrixMultiplication20.split(intArray21, intArray22, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication26 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray44 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray45 = new int[][] { intArray32, intArray38, intArray44 };
        int[] intArray50 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray71 = new int[][] { intArray50, intArray55, intArray60, intArray65, intArray70 };
        int[][] intArray72 = strassenMatrixMultiplication26.multiply(intArray45, intArray71);
        int[][] intArray73 = strassenMatrixMultiplication14.add(intArray22, intArray45);
        int[][] intArray74 = null;
        int[][] intArray75 = strassenMatrixMultiplication8.sub(intArray22, intArray74);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication7.add(intArray75, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication0.sub(intArray3, intArray75);
        int[][] intArray79 = null;
        int[] intArray81 = new int[] { 'a' };
        int[] intArray83 = new int[] { 'a' };
        int[][] intArray84 = new int[][] { intArray81, intArray83 };
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray79, intArray84, (int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[97]");
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test815");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray66, intArray69, 0, (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray78 = strassenMatrixMultiplication0.multiply(intArray76, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test816");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray15 = null;
        int[][] intArray16 = new int[][] {};
        strassenMatrixMultiplication14.split(intArray15, intArray16, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication20 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray38 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray39 = new int[][] { intArray26, intArray32, intArray38 };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray64 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray65 = new int[][] { intArray44, intArray49, intArray54, intArray59, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication20.multiply(intArray39, intArray65);
        int[][] intArray67 = strassenMatrixMultiplication8.add(intArray16, intArray39);
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.sub(intArray16, intArray68);
        int[][] intArray70 = null;
        int[][] intArray71 = strassenMatrixMultiplication1.add(intArray69, intArray70);
        int[] intArray77 = new int[] { (byte) 0, 'a', 100, (byte) -1, '4' };
        int[] intArray83 = new int[] { (byte) 0, 'a', 100, (byte) -1, '4' };
        int[][] intArray84 = new int[][] { intArray77, intArray83 };
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray69, intArray84, (int) (short) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 97, 100, -1, 52]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 97, 100, -1, 52]");
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test817");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        int[][] intArray67 = null;
        int[][] intArray68 = strassenMatrixMultiplication1.sub(intArray15, intArray67);
        int[][] intArray69 = null;
        int[][] intArray70 = strassenMatrixMultiplication0.add(intArray68, intArray69);
        int[][] intArray71 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication72 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray73 = null;
        int[][] intArray74 = new int[][] {};
        strassenMatrixMultiplication72.split(intArray73, intArray74, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray71, intArray74, (int) (short) 0, (int) (short) 100);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray83 = strassenMatrixMultiplication0.add(intArray81, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test818");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray67, intArray70, 0, (int) (byte) 1);
        int[][] intArray77 = null;
        strassenMatrixMultiplication0.join(intArray70, intArray77, (int) ' ', (int) (byte) 1);
        java.lang.Class<?> wildcardClass81 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test819");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray4 = null;
        int[][] intArray5 = new int[][] {};
        strassenMatrixMultiplication3.split(intArray4, intArray5, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication16 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray17 = null;
        int[][] intArray18 = new int[][] {};
        strassenMatrixMultiplication16.split(intArray17, intArray18, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication22 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray23 = null;
        int[][] intArray24 = new int[][] {};
        strassenMatrixMultiplication22.split(intArray23, intArray24, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication28 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray34 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray40 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray46 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray47 = new int[][] { intArray34, intArray40, intArray46 };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray67 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray73 = new int[][] { intArray52, intArray57, intArray62, intArray67, intArray72 };
        int[][] intArray74 = strassenMatrixMultiplication28.multiply(intArray47, intArray73);
        int[][] intArray75 = strassenMatrixMultiplication16.add(intArray24, intArray47);
        int[][] intArray76 = null;
        int[][] intArray77 = strassenMatrixMultiplication10.sub(intArray24, intArray76);
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication9.add(intArray77, intArray78);
        int[][] intArray80 = strassenMatrixMultiplication2.sub(intArray5, intArray77);
        strassenMatrixMultiplication0.split(intArray1, intArray80, (-1), (int) (short) 1);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication84 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray85 = null;
        int[][] intArray86 = new int[][] {};
        strassenMatrixMultiplication84.split(intArray85, intArray86, (int) '4', (-1));
        int[][] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray85, intArray90, (int) (byte) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test820");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        int[][] intArray77 = new int[][] {};
        int[][] intArray78 = null;
        int[][] intArray79 = strassenMatrixMultiplication2.add(intArray77, intArray78);
        int[][] intArray80 = null;
        int[][] intArray81 = strassenMatrixMultiplication1.sub(intArray79, intArray80);
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray80, intArray82, (int) 'a', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test821");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray67, intArray70, 0, (int) (byte) 1);
        int[][] intArray77 = null;
        strassenMatrixMultiplication0.join(intArray70, intArray77, (int) ' ', (int) (byte) 1);
        java.lang.Class<?> wildcardClass81 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test822");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication10 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray11 = null;
        int[][] intArray12 = new int[][] {};
        strassenMatrixMultiplication10.split(intArray11, intArray12, (int) '4', (-1));
        int[][] intArray16 = new int[][] {};
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[] intArray71 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray78 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[] intArray85 = new int[] { 1, '#', '#', (short) 100, (short) -1, (byte) 0 };
        int[][] intArray86 = new int[][] { intArray71, intArray78, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication17.sub(intArray37, intArray86);
        int[][] intArray88 = strassenMatrixMultiplication10.add(intArray16, intArray37);
        strassenMatrixMultiplication8.split(intArray9, intArray16, (int) (byte) 10, (int) '#');
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication7.sub(intArray16, intArray92);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.sub(intArray6, intArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, 35, 35, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test823");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray12 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray13 = new int[][] { intArray7, intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.sub(intArray13, intArray60);
        int[] intArray65 = new int[] { 100, '#', 10 };
        int[][] intArray66 = new int[][] { intArray65 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication2.split(intArray66, intArray69, (int) (short) 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray69, (int) (byte) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test824");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[] intArray13 = new int[] { (short) 10 };
        int[] intArray15 = new int[] { (short) 10 };
        int[][] intArray16 = new int[][] { intArray13, intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray36 = null;
        int[][] intArray37 = new int[][] {};
        strassenMatrixMultiplication35.split(intArray36, intArray37, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication41 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray59 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray60 = new int[][] { intArray47, intArray53, intArray59 };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray85 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray86 = new int[][] { intArray65, intArray70, intArray75, intArray80, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication41.multiply(intArray60, intArray86);
        int[][] intArray88 = strassenMatrixMultiplication29.add(intArray37, intArray87);
        strassenMatrixMultiplication17.split(intArray25, intArray37, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication6.split(intArray16, intArray37, (int) (short) -1, (int) (byte) 0);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray37, intArray95);
        java.lang.Class<?> wildcardClass97 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test825");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray20 = new int[][] { intArray7, intArray13, intArray19 };
        int[] intArray25 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray30 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray35 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray40 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray45 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray46 = new int[][] { intArray25, intArray30, intArray35, intArray40, intArray45 };
        int[][] intArray47 = strassenMatrixMultiplication1.multiply(intArray20, intArray46);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication48 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray54 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray60 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray66 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray67 = new int[][] { intArray54, intArray60, intArray66 };
        int[] intArray72 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray77 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray82 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray87 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray92 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray93 = new int[][] { intArray72, intArray77, intArray82, intArray87, intArray92 };
        int[][] intArray94 = strassenMatrixMultiplication48.multiply(intArray67, intArray93);
        int[][] intArray95 = strassenMatrixMultiplication0.multiply(intArray20, intArray94);
        int[][] intArray96 = null;
        int[][] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray98 = strassenMatrixMultiplication0.multiply(intArray96, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test826");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[][] intArray55 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray56 = strassenMatrixMultiplication0.multiply(intArray52, intArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
    }

    @Test
    public void test827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test827");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication1.add(intArray9, intArray32);
        int[][] intArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray62 = strassenMatrixMultiplication0.multiply(intArray32, intArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
    }

    @Test
    public void test828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test828");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray62 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray75 = new int[][] { intArray62, intArray68, intArray74 };
        int[][] intArray76 = strassenMatrixMultiplication2.add(intArray56, intArray75);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray77 = strassenMatrixMultiplication0.multiply(intArray1, intArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test829");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray12 = new int[][] { intArray11 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray32 = new int[][] { intArray19, intArray25, intArray31 };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray58 = new int[][] { intArray37, intArray42, intArray47, intArray52, intArray57 };
        int[][] intArray59 = strassenMatrixMultiplication13.multiply(intArray32, intArray58);
        int[][] intArray60 = strassenMatrixMultiplication7.sub(intArray12, intArray58);
        int[] intArray62 = new int[] { (short) 0 };
        int[] intArray64 = new int[] { (short) 0 };
        int[][] intArray65 = new int[][] { intArray62, intArray64 };
        int[][] intArray66 = strassenMatrixMultiplication6.multiply(intArray12, intArray65);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication67 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray68 = null;
        int[][] intArray69 = new int[][] {};
        strassenMatrixMultiplication67.split(intArray68, intArray69, (int) '4', (-1));
        strassenMatrixMultiplication0.split(intArray66, intArray69, 0, (int) (byte) 1);
        int[][] intArray76 = null;
        int[][] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray76, intArray77, (int) (short) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test830");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray20 = null;
        int[][] intArray21 = new int[][] {};
        strassenMatrixMultiplication19.split(intArray20, intArray21, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication25 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray26 = null;
        int[][] intArray27 = new int[][] {};
        strassenMatrixMultiplication25.split(intArray26, intArray27, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication31 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray43 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray49 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray50 = new int[][] { intArray37, intArray43, intArray49 };
        int[] intArray55 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray60 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray76 = new int[][] { intArray55, intArray60, intArray65, intArray70, intArray75 };
        int[][] intArray77 = strassenMatrixMultiplication31.multiply(intArray50, intArray76);
        int[][] intArray78 = strassenMatrixMultiplication19.add(intArray27, intArray77);
        strassenMatrixMultiplication7.split(intArray15, intArray27, (int) 'a', (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray82 = strassenMatrixMultiplication0.sub(intArray2, intArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test831");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray5 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray6 = new int[][] { intArray5 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray19 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray26 = new int[][] { intArray13, intArray19, intArray25 };
        int[] intArray31 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray52 = new int[][] { intArray31, intArray36, intArray41, intArray46, intArray51 };
        int[][] intArray53 = strassenMatrixMultiplication7.multiply(intArray26, intArray52);
        int[][] intArray54 = strassenMatrixMultiplication1.sub(intArray6, intArray52);
        int[] intArray56 = new int[] { (short) 0 };
        int[] intArray58 = new int[] { (short) 0 };
        int[][] intArray59 = new int[][] { intArray56, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication0.multiply(intArray6, intArray59);
        int[][] intArray61 = null;
        int[][] intArray62 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray63 = strassenMatrixMultiplication0.multiply(intArray61, intArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
    }

    @Test
    public void test832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test832");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        java.lang.Class<?> wildcardClass68 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test833");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray6 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray7 = new int[][] { intArray6 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray14 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray27 = new int[][] { intArray14, intArray20, intArray26 };
        int[] intArray32 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray37 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray53 = new int[][] { intArray32, intArray37, intArray42, intArray47, intArray52 };
        int[][] intArray54 = strassenMatrixMultiplication8.multiply(intArray27, intArray53);
        int[][] intArray55 = strassenMatrixMultiplication2.sub(intArray7, intArray53);
        int[] intArray61 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray67 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray73 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray74 = new int[][] { intArray61, intArray67, intArray73 };
        int[][] intArray75 = strassenMatrixMultiplication1.add(intArray55, intArray74);
        int[][] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray75, intArray76, (int) (byte) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test834");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray18 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray31 = new int[][] { intArray18, intArray24, intArray30 };
        int[] intArray36 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray41 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray46 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray51 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray56 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray57 = new int[][] { intArray36, intArray41, intArray46, intArray51, intArray56 };
        int[][] intArray58 = strassenMatrixMultiplication12.multiply(intArray31, intArray57);
        int[][] intArray59 = strassenMatrixMultiplication0.add(intArray8, intArray58);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication60 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray61 = null;
        int[][] intArray62 = new int[][] {};
        strassenMatrixMultiplication60.split(intArray61, intArray62, (int) '4', (-1));
        int[][] intArray66 = null;
        int[][] intArray67 = strassenMatrixMultiplication0.add(intArray62, intArray66);
        java.lang.Class<?> wildcardClass68 = intArray62.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test835");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray11 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[] intArray16 = new int[] { 100, (short) 10, ' ', (short) -1 };
        int[][] intArray17 = new int[][] { intArray11, intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication6.sub(intArray17, intArray64);
        int[] intArray69 = new int[] { 100, '#', 10 };
        int[][] intArray70 = new int[][] { intArray69 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication71 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray72 = null;
        int[][] intArray73 = new int[][] {};
        strassenMatrixMultiplication71.split(intArray72, intArray73, (int) '4', (-1));
        strassenMatrixMultiplication6.split(intArray70, intArray73, (int) (short) 0, (int) (short) 0);
        int[][] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray81 = strassenMatrixMultiplication0.sub(intArray70, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from object array because \"B\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[100, 10, 32, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[100, 35, 10]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test836");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray64 = new int[] { (short) 0 };
        int[] intArray66 = new int[] { (short) 0 };
        int[][] intArray67 = new int[][] { intArray64, intArray66 };
        int[][] intArray68 = strassenMatrixMultiplication8.multiply(intArray14, intArray67);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication69 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray70 = null;
        int[][] intArray71 = new int[][] {};
        strassenMatrixMultiplication69.split(intArray70, intArray71, (int) '4', (-1));
        strassenMatrixMultiplication2.split(intArray68, intArray71, 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.join(intArray1, intArray68, 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"C\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test837");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        int[] intArray13 = new int[] { (short) 10 };
        int[] intArray15 = new int[] { (short) 10 };
        int[][] intArray16 = new int[][] { intArray13, intArray15 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication17 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray18 = null;
        int[][] intArray19 = new int[][] {};
        strassenMatrixMultiplication17.split(intArray18, intArray19, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication23 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray24 = null;
        int[][] intArray25 = new int[][] {};
        strassenMatrixMultiplication23.split(intArray24, intArray25, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication29 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray30 = null;
        int[][] intArray31 = new int[][] {};
        strassenMatrixMultiplication29.split(intArray30, intArray31, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication35 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray36 = null;
        int[][] intArray37 = new int[][] {};
        strassenMatrixMultiplication35.split(intArray36, intArray37, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication41 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray47 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray53 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray59 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray60 = new int[][] { intArray47, intArray53, intArray59 };
        int[] intArray65 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray70 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray75 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray80 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray85 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray86 = new int[][] { intArray65, intArray70, intArray75, intArray80, intArray85 };
        int[][] intArray87 = strassenMatrixMultiplication41.multiply(intArray60, intArray86);
        int[][] intArray88 = strassenMatrixMultiplication29.add(intArray37, intArray87);
        strassenMatrixMultiplication17.split(intArray25, intArray37, (int) 'a', (int) (byte) 1);
        strassenMatrixMultiplication6.split(intArray16, intArray37, (int) (short) -1, (int) (byte) 0);
        int[][] intArray95 = null;
        int[][] intArray96 = strassenMatrixMultiplication0.add(intArray37, intArray95);
        java.lang.Class<?> wildcardClass97 = intArray37.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test838");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        int[][] intArray8 = new int[][] {};
        strassenMatrixMultiplication6.split(intArray7, intArray8, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray17 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray18 = new int[][] { intArray17 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication13.sub(intArray18, intArray64);
        int[] intArray72 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray78 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray84 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray85 = new int[][] { intArray72, intArray78, intArray84 };
        int[][] intArray86 = strassenMatrixMultiplication12.add(intArray66, intArray85);
        int[][] intArray87 = new int[][] {};
        int[][] intArray88 = null;
        int[][] intArray89 = strassenMatrixMultiplication12.add(intArray87, intArray88);
        int[][] intArray90 = null;
        int[][] intArray91 = strassenMatrixMultiplication6.sub(intArray87, intArray90);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication0.add(intArray87, intArray92);
        int[][] intArray94 = null;
        int[][] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray94, intArray95, (int) ' ', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test839");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray2 = null;
        int[][] intArray3 = new int[][] {};
        strassenMatrixMultiplication1.split(intArray2, intArray3, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray12 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray13 = new int[][] { intArray12 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication8.sub(intArray13, intArray59);
        int[] intArray63 = new int[] { (short) 0 };
        int[] intArray65 = new int[] { (short) 0 };
        int[][] intArray66 = new int[][] { intArray63, intArray65 };
        int[][] intArray67 = strassenMatrixMultiplication7.multiply(intArray13, intArray66);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication68 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray69 = null;
        int[][] intArray70 = new int[][] {};
        strassenMatrixMultiplication68.split(intArray69, intArray70, (int) '4', (-1));
        strassenMatrixMultiplication1.split(intArray67, intArray70, 0, (int) (byte) 1);
        int[][] intArray77 = null;
        strassenMatrixMultiplication0.join(intArray70, intArray77, (int) ' ', (int) (byte) 1);
        int[][] intArray81 = null;
        int[][] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray81, intArray82, (int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test840");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        int[][] intArray6 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication7 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray8 = null;
        int[][] intArray9 = new int[][] {};
        strassenMatrixMultiplication7.split(intArray8, intArray9, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication13 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray14 = null;
        int[][] intArray15 = new int[][] {};
        strassenMatrixMultiplication13.split(intArray14, intArray15, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication19 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray25 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray31 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray37 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray38 = new int[][] { intArray25, intArray31, intArray37 };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray63 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray64 = new int[][] { intArray43, intArray48, intArray53, intArray58, intArray63 };
        int[][] intArray65 = strassenMatrixMultiplication19.multiply(intArray38, intArray64);
        int[][] intArray66 = strassenMatrixMultiplication7.add(intArray15, intArray38);
        strassenMatrixMultiplication0.split(intArray6, intArray15, (-1), (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test841");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        int[][] intArray2 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray1, intArray2, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication6 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray7 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray13 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray14 = new int[][] { intArray13 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication15 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray33 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray34 = new int[][] { intArray21, intArray27, intArray33 };
        int[] intArray39 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray44 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray49 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray54 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray59 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray60 = new int[][] { intArray39, intArray44, intArray49, intArray54, intArray59 };
        int[][] intArray61 = strassenMatrixMultiplication15.multiply(intArray34, intArray60);
        int[][] intArray62 = strassenMatrixMultiplication9.sub(intArray14, intArray60);
        int[] intArray68 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray74 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray80 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray81 = new int[][] { intArray68, intArray74, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication8.add(intArray62, intArray81);
        int[][] intArray83 = new int[][] {};
        int[][] intArray84 = null;
        int[][] intArray85 = strassenMatrixMultiplication8.add(intArray83, intArray84);
        strassenMatrixMultiplication6.split(intArray7, intArray85, (int) (short) 10, (int) (byte) 1);
        int[][] intArray89 = null;
        strassenMatrixMultiplication0.join(intArray85, intArray89, 100, (int) (short) 0);
        int[][] intArray93 = null;
        int[][] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray95 = strassenMatrixMultiplication0.add(intArray93, intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test842");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray1 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray9 = null;
        int[][] intArray10 = new int[][] {};
        strassenMatrixMultiplication8.split(intArray9, intArray10, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication14 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray20 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray26 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray32 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray33 = new int[][] { intArray20, intArray26, intArray32 };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray58 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray59 = new int[][] { intArray38, intArray43, intArray48, intArray53, intArray58 };
        int[][] intArray60 = strassenMatrixMultiplication14.multiply(intArray33, intArray59);
        int[][] intArray61 = strassenMatrixMultiplication2.add(intArray10, intArray60);
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication62 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray63 = null;
        int[][] intArray64 = new int[][] {};
        strassenMatrixMultiplication62.split(intArray63, intArray64, (int) '4', (-1));
        int[][] intArray68 = null;
        int[][] intArray69 = strassenMatrixMultiplication2.add(intArray64, intArray68);
        // The following exception was thrown during execution in test generation
        try {
            strassenMatrixMultiplication0.split(intArray1, intArray68, (int) (short) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test843");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication3 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray7 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray8 = new int[][] { intArray7 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray15 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray21 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray27 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray28 = new int[][] { intArray15, intArray21, intArray27 };
        int[] intArray33 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray38 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray43 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray48 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray53 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray54 = new int[][] { intArray33, intArray38, intArray43, intArray48, intArray53 };
        int[][] intArray55 = strassenMatrixMultiplication9.multiply(intArray28, intArray54);
        int[][] intArray56 = strassenMatrixMultiplication3.sub(intArray8, intArray54);
        int[] intArray58 = new int[] { (short) 0 };
        int[] intArray60 = new int[] { (short) 0 };
        int[][] intArray61 = new int[][] { intArray58, intArray60 };
        int[][] intArray62 = strassenMatrixMultiplication2.multiply(intArray8, intArray61);
        int[] intArray65 = new int[] { 'a', (short) 1 };
        int[] intArray68 = new int[] { 'a', (short) 1 };
        int[] intArray71 = new int[] { 'a', (short) 1 };
        int[] intArray74 = new int[] { 'a', (short) 1 };
        int[] intArray77 = new int[] { 'a', (short) 1 };
        int[] intArray80 = new int[] { 'a', (short) 1 };
        int[][] intArray81 = new int[][] { intArray65, intArray68, intArray71, intArray74, intArray77, intArray80 };
        int[][] intArray82 = strassenMatrixMultiplication1.add(intArray8, intArray81);
        int[][] intArray83 = new int[][] {};
        strassenMatrixMultiplication0.split(intArray8, intArray83, (-1), (-1));
        int[] intArray91 = new int[] { (short) 0, (short) 10, (-1), (byte) 0 };
        int[][] intArray92 = new int[][] { intArray91 };
        int[][] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][] intArray94 = strassenMatrixMultiplication0.add(intArray92, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 10, -1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test844");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray17 = new int[][] { intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication12.sub(intArray17, intArray63);
        int[] intArray71 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray77 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray83 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray84 = new int[][] { intArray71, intArray77, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication11.add(intArray65, intArray84);
        int[][] intArray86 = new int[][] {};
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication11.add(intArray86, intArray87);
        strassenMatrixMultiplication9.split(intArray10, intArray88, (int) (short) 10, (int) (byte) 1);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication8.add(intArray88, intArray92);
        strassenMatrixMultiplication1.split(intArray3, intArray93, (int) (short) -1, (int) (short) 1);
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray93, intArray97);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test845");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray17 = new int[][] { intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication12.sub(intArray17, intArray63);
        int[] intArray71 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray77 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray83 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray84 = new int[][] { intArray71, intArray77, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication11.add(intArray65, intArray84);
        int[][] intArray86 = new int[][] {};
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication11.add(intArray86, intArray87);
        strassenMatrixMultiplication9.split(intArray10, intArray88, (int) (short) 10, (int) (byte) 1);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication8.add(intArray88, intArray92);
        strassenMatrixMultiplication1.split(intArray3, intArray93, (int) (short) -1, (int) (short) 1);
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray93, intArray97);
        java.lang.Class<?> wildcardClass99 = strassenMatrixMultiplication0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test846");
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication0 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication1 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication2 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray3 = null;
        int[][] intArray4 = new int[][] {};
        strassenMatrixMultiplication2.split(intArray3, intArray4, (int) '4', (-1));
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication8 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication9 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[][] intArray10 = null;
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication11 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication12 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray16 = new int[] { (byte) 10, (-1), (byte) 1 };
        int[][] intArray17 = new int[][] { intArray16 };
        com.thealgorithms.divideandconquer.StrassenMatrixMultiplication strassenMatrixMultiplication18 = new com.thealgorithms.divideandconquer.StrassenMatrixMultiplication();
        int[] intArray24 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray30 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[] intArray36 = new int[] { (byte) 1, (byte) 10, 10, (byte) 100, 0 };
        int[][] intArray37 = new int[][] { intArray24, intArray30, intArray36 };
        int[] intArray42 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray47 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray52 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray57 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[] intArray62 = new int[] { 'a', (short) 0, (byte) -1, 'a' };
        int[][] intArray63 = new int[][] { intArray42, intArray47, intArray52, intArray57, intArray62 };
        int[][] intArray64 = strassenMatrixMultiplication18.multiply(intArray37, intArray63);
        int[][] intArray65 = strassenMatrixMultiplication12.sub(intArray17, intArray63);
        int[] intArray71 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray77 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[] intArray83 = new int[] { (-1), (byte) -1, (byte) 100, (byte) -1, (byte) 0 };
        int[][] intArray84 = new int[][] { intArray71, intArray77, intArray83 };
        int[][] intArray85 = strassenMatrixMultiplication11.add(intArray65, intArray84);
        int[][] intArray86 = new int[][] {};
        int[][] intArray87 = null;
        int[][] intArray88 = strassenMatrixMultiplication11.add(intArray86, intArray87);
        strassenMatrixMultiplication9.split(intArray10, intArray88, (int) (short) 10, (int) (byte) 1);
        int[][] intArray92 = null;
        int[][] intArray93 = strassenMatrixMultiplication8.add(intArray88, intArray92);
        strassenMatrixMultiplication1.split(intArray3, intArray93, (int) (short) -1, (int) (short) 1);
        int[][] intArray97 = null;
        int[][] intArray98 = strassenMatrixMultiplication0.sub(intArray93, intArray97);
        java.lang.Class<?> wildcardClass99 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, -1, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[97, 0, -1, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, 100, -1, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }
}

